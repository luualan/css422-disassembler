00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/3/2020 7:29:42 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler for the Motorola MC68000 Microprocessor
00000000                             3  * Written by :  Avery Mortenson & Alan Luu
00000000                             4  * Date       :  2/12/2020
00000000                             5  * Description:  An inverse assembler (disassembler) that will 
00000000                             6  * convert a memory image of instructions and data back 
00000000                             7  * to the MC68000 assembly code and that will output the 
00000000                             8  * disassembled code to the display.
00000000                             9  *-----------------------------------------------------------
00001000                            10      ORG    $1000
00001000  4EB9 00001012             11  START:      JSR     DISP_W          ; Display Welcome Message. 
00001006  4EB9 0000101E             12              JSR     DISP_UI         ; Display User Instructions.
0000100C  4EB9 0000102A             13              JSR     PROMPT_START    ; Prompt the user for starting address. 
00001012                            14              
00001012                            15  *------------------------------------------------------------*
00001012                            16  * D0: used for the tasks
00001012                            17  * D1: used to hold the size of the input obtained. 
00001012                            18  * D5: used to store the starting and ending address 
00001012                            19  * temporarily before moving them to A4 and A6 correspondingly. 
00001012                            20  * D6: used to check the last digit to see if the input 
00001012                            21  * for the starting and ending address causes a bus error. 
00001012                            22  * A1: a pointer to the message to print out. 
00001012                            23  *------------------------------------------------------------*
00001012                            24  
00001012  103C 000E                 25  DISP_W      MOVE.B  #14,D0          ; Display Welcome Message. 
00001016  43F9 00001B45             26              LEA     WELCOME,A1
0000101C  4E4F                      27              TRAP    #15
0000101E                            28  
0000101E                            29  * Put program code here
0000101E                            30  
0000101E  103C 000E                 31  DISP_UI         MOVE.B  #14,D0             ; Display User Instructions. 
00001022  43F9 00001B7B             32                  LEA     USER_INST,A1
00001028  4E4F                      33                  TRAP    #15    
0000102A                            34  
0000102A                            35         
0000102A  4FF9 00002000             36  PROMPT_START    LEA     stack, SP          ; SP = stack ($A0000)
00001030  43F9 00001D5A             37                  LEA     START_IN,A1        ; Display starting address message
00001036  103C 000E                 38                  MOVE.B  #14,D0
0000103A  4E4F                      39                  TRAP    #15       
0000103C                            40       
0000103C  43F9 00001D93             41  READ_START      LEA     START_ADDRESS,A1        ; Store user's starting address input
00001042  103C 0002                 42                  MOVE.B  #2,D0                   ; Read user's input into A1; length is stored into D1
00001046  4E4F                      43                  TRAP    #15
00001048  1C3C 0000                 44                  MOVE.B  #0,D6
0000104C                            45  
0000104C  6000 0022                 46  VALIDATE_START  BRA     ATOI
00001050                            47  
00001050  43F9 00001D77             48  PROMPT_END      LEA     END_IN,A1        ; Display starting address message
00001056  103C 000E                 49                  MOVE.B  #14,D0
0000105A  4E4F                      50                  TRAP    #15            
0000105C  43F9 00001DD3             51  READ_END        LEA     END_ADDRESS,A1        ; Store user's starting address input
00001062  103C 0002                 52                  MOVE.B  #2,D0                   ; Read user's input into A1; length is stored into D1
00001066  4E4F                      53                  TRAP    #15
00001068  1C3C 0001                 54                  MOVE.B  #1,D6
0000106C                            55  
0000106C  6000 0002                 56  VALIDATE_END    BRA     ATOI
00001070                            57  
00001070                            58  * D0 stores the value to pushed from A1.
00001070                            59  
00001070  1019                      60  ATOI            MOVE.B  (A1)+,D0    ; Move to next character in A1 and store in D0          
00001072  B03C 0030                 61                  CMP.B   #$30,D0
00001076  6D00 0040                 62                  BLT     INVALID
0000107A  B03C 0039                 63                  CMP.B   #$39,D0
0000107E  6E00 0016                 64                  BGT     ASCII_TO_HEX_LETTER
00001082  0400 0030                 65                  SUB.B   #$30,D0     ; Subtract by 30 to get the numbers 0-9
00001086  DA80                      66                  ADD.L   D0,D5
00001088  5341                      67                  SUBI    #1,D1       ; Decrement input's length to move to next character          
0000108A  B23C 0000                 68                  CMP.B   #0,D1       ; Compare to see if we're at the last digit
0000108E  6700 0036                 69                  BEQ     LASTDIGITCHECK
00001092  E98D                      70                  LSL.L   #4,D5
00001094  60DA                      71                  BRA     ATOI
00001096                            72  
00001096                            73    
00001096  B03C 0041                 74  ASCII_TO_HEX_LETTER     CMP.B   #$41,D0
0000109A  6D00 001C                 75                          BLT     INVALID
0000109E  B03C 0046                 76                          CMP.B   #$46, D0
000010A2  6E00 0014                 77                          BGT     INVALID 
000010A6  0400 0031                 78                          SUB.B   #$31,D0     ; Subtract by 31 to get the numbers A-F
000010AA  5D00                      79                          SUB.B   #6,D0
000010AC  DA80                      80                          ADD.L   D0,D5
000010AE  5341                      81                          SUBI    #1,D1
000010B0  6700 0014                 82                          BEQ     LASTDIGITCHECK
000010B4  E98D                      83                          LSL.L   #4,D5
000010B6  60B8                      84                          BRA     ATOI     
000010B8                            85  
000010B8                            86                      
000010B8  43F9 00001E13             87  INVALID     LEA     ERROR_MESSAGE, A1   ; Display error message
000010BE  103C 000E                 88              MOVE.B  #14, D0
000010C2  4E4F                      89              TRAP    #15
000010C4  4206                      90              CLR.B   D6
000010C6                            91   
000010C6                            92                  
000010C6  2E05                      93  LASTDIGITCHECK      MOVE.L  D5, D7  ; D7 used as temporary storage
000010C8  E20F                      94                      LSR.B   #1, D7  ; Check for carry bit to see if last digit is odd
000010CA  6500 0024                 95                      BCS     ODD
000010CE  4287                      96                      CLR.L   D7
000010D0  BC3C 0000                 97                      CMP.B   #0,D6
000010D4  6700 000A                 98                      BEQ     COMPLETE_STARTA  ; When even, go to prompt for end address
000010D8  BC3C 0001                 99                      CMP.B   #1,D6
000010DC  6700 000A                100                      BEQ     COMPLETE_ENDA
000010E0                           101  
000010E0  2845                     102  COMPLETE_STARTA     MOVEA.L D5, A4  ; A4 holds the starting address.
000010E2  4285                     103                      CLR.L   D5 
000010E4  6000 FF6A                104                      BRA PROMPT_END
000010E8                           105  
000010E8                           106  
000010E8  2C45                     107  COMPLETE_ENDA       MOVEA.L D5, A6  ; A6 holds the ending address. 
000010EA  2A4C                     108                       MOVEA.L A4, A5  ; Store starting address into current address
000010EC  6000 01B8                109                      BRA DECODE_MEMORY
000010F0                           110  
000010F0                           111  
000010F0  43F9 00001E13            112  ODD     LEA     ERROR_MESSAGE, A1 
000010F6  103C 000E                113          MOVE.B  #14, D0
000010FA  4E4F                     114          TRAP    #15
000010FC                           115  
000010FC                           116  *--------------------------------------------------------------------------------------
000010FC                           117  * param D2 data size to convert into ASCII
000010FC                           118  * param A2 a pointer to decode_buf
000010FC                           119  * param A5 the current address
000010FC                           120  * itoa (D2, A2, A5) {
000010FC                           121  * D0 byte data in ACII
000010FC                           122  * D1 #sfhit
000010FC                           123  * D7 long data to convert into ASCII
000010FC                           124  * }
000010FC                           125          
000010FC                           126  ITOA    
000010FC  48E7 C000                127          MOVEM.L D0-D1,-(SP) ; convert integer to ASCII
00001100                           128          
00001100  B43C 0000                129          CMP.B   #%00, D2    ; byte
00001104  6700 003A                130          BEQ     ITOA_BYTE
00001108  B43C 0001                131          CMP.B   #%01, D2    ; word
0000110C  6700 0040                132          BEQ     ITOA_WORD
00001110  B43C 0002                133          CMP.B   #%10, D2    ; long
00001114  6700 0054                134          BEQ     ITOA_LONG
00001118  4EF9 0000119C            135          JMP     ITOA_LONGADDRESS    ; long address
0000111E                           136          
0000111E                           137  ITOA_MOVE
0000111E  48E7 C000                138          MOVEM.L D0-D1,-(SP)
00001122                           139  
00001122  B43C 0001                140          CMP.B   #%01, D2    ; byte
00001126  6700 0018                141          BEQ     ITOA_BYTE
0000112A  B43C 0003                142          CMP.B   #%11, D2    ; word
0000112E  6700 001E                143          BEQ     ITOA_WORD
00001132  B43C 0002                144          CMP.B   #%10,D2     ; long
00001136  6700 0032                145          BEQ     ITOA_LONG
0000113A  4EF9 0000119C            146          JMP     ITOA_LONGADDRESS ; long address
00001140                           147  
00001140                           148  ITOA_BYTE
00001140  3E1D                     149          MOVE.W  (A5)+,D7
00001142  4EB9 000011D4            150          JSR     ITOA_BYTE_CONVERT
00001148  4EF9 00001210            151          JMP     ITOA_DONE
0000114E                           152          
0000114E                           153  ITOA_WORD
0000114E  3E15                     154          MOVE.W  (A5),D7
00001150  123C 0008                155          MOVE.B  #right8, D1
00001154  E26F                     156          LSR.W   D1,D7
00001156  4EB9 000011D4            157          JSR     ITOA_BYTE_CONVERT
0000115C  3E1D                     158          MOVE.W  (A5)+, D7
0000115E  4EB9 000011D4            159          JSR     ITOA_BYTE_CONVERT
00001164  4EF9 00001210            160          JMP     ITOA_DONE
0000116A                           161          
0000116A                           162  ITOA_LONG
0000116A  3E15                     163          MOVE.W  (A5),D7
0000116C  123C 0008                164          MOVE.B  #right8, D1
00001170  E26F                     165          LSR.W   D1, D7
00001172  4EB9 000011D4            166          JSR     ITOA_BYTE_CONVERT
00001178  3E1D                     167          MOVE.W  (A5)+, D7
0000117A  4EB9 000011D4            168          JSR     ITOA_BYTE_CONVERT
00001180                           169          
00001180  3E15                     170          MOVE.W  (A5),D7
00001182  123C 0008                171          MOVE.B  #right8, D1
00001186  E26F                     172          LSR.W   D1, D7
00001188  4EB9 000011D4            173          JSR     ITOA_BYTE_CONVERT
0000118E  3E1D                     174          MOVE.W  (A5)+, D7
00001190  4EB9 000011D4            175          JSR     ITOA_BYTE_CONVERT
00001196  4EF9 00001210            176          JMP     ITOA_DONE
0000119C                           177  
0000119C                           178  ITOA_LONGADDRESS
0000119C  3E0D                     179          MOVE.W  A5,D7
0000119E  123C 0018                180          MOVE.B  #right24,D1
000011A2  E26F                     181          LSR.W   D1,D7
000011A4  4EB9 000011D4            182          JSR     ITOA_BYTE_CONVERT
000011AA  3E4D                     183          MOVE.W  A5,A7
000011AC  123C 0010                184          MOVE.B  #right16,D1
000011B0  E26F                     185          LSR.W   D1,D7
000011B2  4EB9 000011D4            186          JSR     ITOA_BYTE_CONVERT
000011B8  3E0D                     187          MOVE.W  A5,D7
000011BA  123C 0008                188          MOVE.B  #right8,D1
000011BE  E26F                     189          LSR.W   D1,D7
000011C0  4EB9 000011D4            190          JSR     ITOA_BYTE_CONVERT
000011C6  3E0D                     191          MOVE.W  A5,D7
000011C8  4EB9 000011D4            192          JSR     ITOA_BYTE_CONVERT   
000011CE  4EF9 00001210            193          JMP     ITOA_DONE   
000011D4                           194  
000011D4                           195  ITOA_BYTE_CONVERT
000011D4  3007                     196          MOVE.W  D7, D0 
000011D6  0240 00F0                197          ANDI.W  #$F0, D0
000011DA  123C 0004                198          MOVE.B  #right4, D1
000011DE  E268                     199          LSR.W   D1, D0
000011E0  4EB9 000011F4            200          JSR     ITOA_NIBBLE_CONVERT
000011E6                           201          
000011E6  3007                     202          MOVE.W  D7, D0
000011E8  0240 00F0                203          ANDI.W  #$F0, D0
000011EC  4EB9 000011F4            204          JSR     ITOA_NIBBLE_CONVERT
000011F2  4E75                     205          RTS
000011F4                           206          
000011F4                           207  ITOA_NIBBLE_CONVERT
000011F4  B03C 0009                208          CMP.B   #9, D0
000011F8  6E00 000A                209          BGT     ITOA_CONVERT_A_TO_F
000011FC  0600 0030                210          ADD.B   #$30, D0
00001200  14C0                     211          MOVE.B  D0, (A2)+   ; store D0 into decode buffer
00001202  4E75                     212          RTS
00001204                           213          
00001204                           214  ITOA_CONVERT_A_TO_F
00001204  0400 000A                215          SUBI.B  #10, D0
00001208  0600 0041                216          ADDI.B  #$41, D0
0000120C  14C0                     217          MOVE.B  D0, (A2)+   ; store D0 into decode buffer
0000120E  4E75                     218          RTS
00001210                           219  
00001210                           220  ITOA_DONE
00001210  4CDF 0003                221          MOVEM.L (SP)+, D0-D1
00001214  6000 00B0                222          BRA DO
00001218                           223  
00001218                           224  *-------------------------------------------------------------------------------*
00001218                           225  
00001218                           226  START_DECODING
00001218  4282                     227          CLR.L   D2
0000121A                           228          
0000121A                           229  DECODING_ITERATION
0000121A                           230          ;decoding the current address
0000121A  4EB9 000012A6            231          JSR     DECODE_MEMORY
00001220  103C 000D                232          MOVE.B  #task13, D0
00001224  43F9 00000040            233          LEA     decoded_buffer, A1
0000122A  4E4F                     234          TRAP    #15
0000122C                           235          
0000122C                           236          ;check if decoding has finished or if the screen is filled. 
0000122C  BDCD                     237          CMP.L   A5, A6
0000122E  6F00 0024                238          BLE     CONTINUE_OR_END
00001232                           239          ;have yet to reach the ending address
00001232  5202                     240          ADDQ.B  #1, D2
00001234  B439 00000014            241          CMP.B   lines_p_screen, D2
0000123A  6C00 0004                242          BGE     DECODE_PAUSE
0000123E                           243          ;not yet reached the maximum lines per screen. 
0000123E  60DA                     244          BRA     DECODING_ITERATION
00001240                           245  
00001240                           246  DECODE_PAUSE
00001240  103C 000E                247          MOVE.B  #task14, D0
00001244  43F9 00001CF5            248          LEA     ENTER_PROMPT, A1
0000124A  4E4F                     249          TRAP    #15
0000124C  103C 0005                250          MOVE.B  #task5, D0
00001250  4E4F                     251          TRAP    #15
00001252  60C4                     252          BRA     START_DECODING
00001254                           253  
00001254                           254  CONTINUE_OR_END
00001254  103C 000E                255          MOVE.B  #task14, D0
00001258  43F9 00001D12            256          LEA     PROMPT_AGAIN, A1
0000125E  4E4F                     257          TRAP    #15
00001260                           258          
00001260  103C 0002                259          MOVE.B  #task2, D0
00001264  43F9 00001B44            260          LEA     ascii_y_n, A1
0000126A  4E4F                     261          TRAP    #15
0000126C                           262          
0000126C  1639 00001B44            263          MOVE.B  ascii_y_n, D3
00001272  0C03 0059                264          CMPI.B  #y_uppercase, D3
00001276  6700 FDB2                265          BEQ     PROMPT_START
0000127A  0C03 0079                266          CMPI.B  #y_lowercase, D3
0000127E  6700 FDAA                267          BEQ     PROMPT_START
00001282  0C03 004E                268          CMPI.B  #n_uppercase, D3
00001286  6700 000C                269          BEQ     EXIT
0000128A  0C03 006E                270          CMPI.B  #n_lowercase, D3
0000128E  6700 0004                271          BEQ     EXIT
00001292                           272  
00001292  60C0                     273          BRA     CONTINUE_OR_END 
00001294                           274          
00001294                           275  EXIT
00001294  103C 000E                276          MOVE.B  #task14, D0
00001298  43F9 00001D35            277          LEA     EXIT_PROMPT, A1
0000129E  4E4F                     278          TRAP    #15
000012A0                           279          
000012A0  103C 0009                280          MOVE.B  #task9, D0
000012A4  4E4F                     281          TRAP    #15
000012A6                           282  
000012A6                           283          
000012A6                           284          
000012A6                           285  *---------------------------------------------------------------------------------*
000012A6                           286  * D0: the current instruction. 
000012A6                           287  * D1: 
000012A6                           288  * D2: data size / shift count
000012A6                           289  * D3: loop counter for the amount of lines per screen. 
000012A6                           290  * D4: 
000012A6                           291  * D5: 
000012A6                           292  * D6: 
000012A6                           293  * D7: 
000012A6                           294  * A0: 
000012A6                           295  * A1: A pointer to the message to print out. 
000012A6                           296  * A2: A pointer to the decode_buffer. 
000012A6                           297  * A3: 
000012A6                           298  * A4: Store the starting address and increment to the ending address. 
000012A6                           299  * A5: The current address. 
000012A6                           300  * A6: Store the ending address. 
000012A6                           301  * A7: Stack pointer. 
000012A6                           302  *---------------------------------------------------------------------------------*
000012A6                           303                                
000012A6                           304  DECODE_MEMORY     
000012A6                           305  
000012A6                           306  *Clear the data and address registers used to obtain the starting and ending address. 
000012A6  4280                     307          CLR.L   D0
000012A8  4285                     308          CLR.L   D5
000012AA  4286                     309          CLR.L   D6
000012AC  327C 0000                310          MOVEA   #0, A1
000012B0                           311          
000012B0  48E7 2002                312          MOVEM.L D2/A6, -(SP)
000012B4                           313                  
000012B4                           314          ;zero clear the decode_buffer
000012B4  4EB9 000012EA            315          JSR     OP_CLEAR_DATA
000012BA  45F9 00000040            316          LEA     decoded_buffer, A2
000012C0                           317                  
000012C0                           318          ;print out the current address
000012C0  7403                     319          MOVE.L  #$0003, D2
000012C2  6000 FE38                320          BRA      ITOA
000012C6                           321          
000012C6  14FC 0009                322  DO      MOVE.B  #$9, (A2)+
000012CA                           323                  
000012CA                           324          ;load the next instruction and jump to the opcode table entry
000012CA  41F9 00001300            325          LEA     OP_TABLE, A0
000012D0  4280                     326          CLR.L   D0
000012D2  301D                     327          MOVE.W  (A5)+, D0       ; increment A5 store value into D0
000012D4  2200                     328          MOVE.L  D0, D1
000012D6  143C 000C                329          MOVE.B  #right12, D2
000012DA  E469                     330          LSR.W   D2, D1
000012DC  C2FC 0006                331          MULU    #6, D1
000012E0  4EF0 1000                332          JMP     0(A0, D1)
000012E4                           333  OP_FINISH
000012E4  4CDF 4004                334          MOVEM.L (SP)+, D2/A6
000012E8  4E75                     335          RTS
000012EA                           336  
000012EA                           337  *------------------------------------------------------------------------------------*
000012EA                           338          ;clear the 32 bits within the decoded_buffer       
000012EA                           339  OP_CLEAR_DATA
000012EA  4283                     340          CLR.L   D3
000012EC  163C 0040                341          MOVE.B  #buffer_size, D3
000012F0  45F9 00000040            342          LEA     decoded_buffer, A2
000012F6                           343  OP_CLEAR_DATA_LOOP
000012F6  14FC 0000                344          MOVE.B  #0, (A2)+
000012FA  5343                     345          SUBI    #1, D3
000012FC  6EF8                     346          BGT     OP_CLEAR_DATA_LOOP
000012FE  4E75                     347          RTS
00001300                           348  
00001300                           349  *------------------------------------------------------------------------------------*
00001300                           350  OP_TABLE
00001300  4EF9 00001360            351          JMP     code0000    ; ADDI.bwl/ ANDI.bwl / CMPI.bwl / EORI.bwl / ORI.bwl / SUBI.bwl 
00001306  4EF9 0000137A            352          JMP     code0001    ; MOVE.b
0000130C  4EF9 0000137E            353          JMP     code0010    ; MOVE.l / MOVEA.l
00001312  4EF9 00001396            354          JMP     code0011    ; MOVE.w / MOVEA.w
00001318  4EF9 000013AE            355          JMP     code0100    ; CLR.bwl / JMP / JSR / LEA / MOVEM.wl / NOP / NOT.bwl / RTS / STOP / TRAP
0000131E  4EF9 000013C8            356          JMP     code0101    ; ADDQ.bwl / SUBQ.bwl / Scc / Dbcc
00001324  4EF9 000013CC            357          JMP     code0110    ; BRA.bw / BSR.bw / Bcc.bw
0000132A  4EF9 000013E4            358          JMP     code0111    ; MOVEQ
00001330  4EF9 000013E8            359          JMP     code1000    ; DIVS / DIVU / CR.bwl
00001336  4EF9 00001400            360          JMP     code1001    ; SUB.bwl / SUBA.wl
0000133C  4EF9 00001404            361          JMP     code1010    ;   [unassigned]
00001342  4EF9 00001408            362          JMP     code1011    ; CMP.bwl / CMPA.wl / EOR.bwl
00001348  4EF9 0000140C            363          JMP     code1100    ; MULS / MULU / AND.bwl
0000134E  4EF9 00001426            364          JMP     code1101    ; ADD.bwl / ADDA.wl / ADDX.bwl
00001354  4EF9 00001440            365          JMP     code1110    ; ASL.bwl / ASR.bwl / LSL.bwl / LSR.bwl / ROR.bwl / ROL.bwl
0000135A  4EF9 000014BE            366          JMP     code1111    ;   [unassigned]
00001360                           367          
00001360                           368  code0000:                           ; Opcodes ADDI and SUBI
00001360  220D                     369          MOVE.L  A5,D1               ; A5 is current instruction word
00001362  0241 0F00                370          ANDI.W  #second_nibble,D1   ; Extract 2nd nibble from instruction word
00001366  143C 0008                371          MOVE.B  #right8,D2          ; Used to shift 8 times to right
0000136A  E469                     372          LSR.W   D2,D1               ; Shift nibble into LSB position
0000136C  C2FC 0006                373          MULU    #6, D1              ; Set displacement 
00001370  41F9 000014C2            374          LEA     OP_0000_TABLE,A0    ; Load table into A0
00001376  4EF0 1000                375          JMP     0(A0,D1)            ; go to displacement (A0 + xxxx * 6)
0000137A                           376  
0000137A                           377  code0001:                           ; Opcode MOVE.B
0000137A  6000 03C8                378          BRA     OP_MOVE             ; Go to opcode MOVE
0000137E                           379  
0000137E                           380  code0010:                           ; Opcodes MOVE.L and MOVEA.L 
0000137E  220D                     381          MOVE.L  A5,D1               ; A5 is current instruction word
00001380  0241 00C0                382          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
00001384  143C 0006                383          MOVE.B  #right6,D2          ; Used to shift 6 times to right
00001388  E469                     384          LSR.W   D2,D1               ; Shift dst mode into LSB position
0000138A  B23C 0001                385          CMP.B   #1, D1              ; When 001 in destination mode
0000138E  6700 0390                386          BEQ     OP_MOVEA            ; Go to opcode MOVEA
00001392  6000 03B0                387          BRA     OP_MOVE             ; Otherwise, go to opcode MOVE
00001396                           388  
00001396                           389  code0011:                           ; Opcodes MOVE.W and MOVEA.W 
00001396  220D                     390          MOVE.L  A5,D1               ; A5 is current instruction word
00001398  0241 00C0                391          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
0000139C  143C 0006                392          MOVE.B  #right6,D2          ; Used to shift 6 times to right
000013A0  E469                     393          LSR.W   D2,D1               ; Shift dst mode into LSB position
000013A2  B23C 0001                394          CMP.B   #1, D1              ; When 001 in destination mode
000013A6  6700 0378                395          BEQ     OP_MOVEA            ; Go to opcode MOVEA
000013AA  6000 0398                396          BRA     OP_MOVE             ; Otherwise, go to opcode MOVE
000013AE                           397  
000013AE                           398  code0100:                           ; Opcodes CLR, JSR, LEA, MOVEM, NOP, RTS
000013AE  220D                     399          MOVE.L  A5,D1               ; A5 is current instruction word
000013B0  0241 0F00                400          ANDI.W  #second_nibble,D1   ; Extract 2nd nibble from instruction word
000013B4  143C 0008                401          MOVE.B  #right8,D2          ; Used to shift 8 times to right
000013B8  E469                     402          LSR.W   D2,D1               ; Shift nibble into LSB position
000013BA  C2FC 0006                403          MULU    #6, D1              ; Set displacement 
000013BE  41F9 00001522            404          LEA     OP_0100_TABLE,A0    ; Load table into A0
000013C4  4EF0 1000                405          JMP     0(A0,D1)            ; go to displacement (A0 + xxxx * 6)
000013C8                           406  
000013C8                           407  code0101:                           ; Opcode ADDQ.B/W/L
000013C8  6000 044A                408          BRA     OP_ADDQ             ; Go to opcode ADDQ
000013CC                           409  
000013CC                           410  code0110:                           ; Opcodes BRA and BSR
000013CC  220D                     411          MOVE.L  A5,D1               ; A5 is current instruction word
000013CE  0241 0F00                412          ANDI.W  #second_nibble,D1   ; Extract 2nd 4 bits from instruction word
000013D2  143C 0008                413          MOVE.B  #right8,D2          ; Used to shift 8 times to right
000013D6  E469                     414          LSR.W   D2,D1               ; Shift nibble into LSB position
000013D8  B23C 0000                415          CMP.B   #0, D1              ; When 0000 in destination mode
000013DC  6700 0456                416          BEQ     OP_BRA              ; Go to opcode BRA
000013E0  6000 04C2                417          BRA     OP_BSR              ; Otherwise, go to opcode BSR
000013E4                           418  
000013E4                           419  code0111:                           ; Opcode MOVEQ
000013E4  6000 04DA                420          BRA     OP_MOVEQ            ; Go to opcode MOVEQ
000013E8                           421  
000013E8                           422  code1000:                           ; Opcodes DIVU word and OR.B/W/L
000013E8  220D                     423          MOVE.L  A5,D1               ; A5 is current instruction word
000013EA  0241 00C0                424          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000013EE  143C 0006                425          MOVE.B  #right6,D2          ; Used to shift 6 times to right
000013F2  E469                     426          LSR.W   D2,D1               ; Shift dst mode into LSB position
000013F4  B23C 0003                427          CMP.B   #3, D1              ; When 011 in destination mode
000013F8  6700 04EE                428          BEQ     OP_DIVU             ; Go to opcode DIVU word
000013FC  6000 050A                429          BRA     OP_OR               ; Otherwise, go to opcode OR
00001400                           430  
00001400                           431  code1001:                           ; Opcode SUB.B/W/L
00001400  6000 051E                432          BRA     OP_SUB              ; Go to opcode SUB   
00001404                           433  
00001404                           434  code1010:                           ; Opcode not supported 
00001404  6000 02CA                435          BRA     OP_UNSUPPORTED      ; Go to opcode unsupported   
00001408                           436       
00001408                           437  code1011:                           ; Opcode CMP.B/W/L
00001408  6000 0532                438          BRA     OP_CMP              ; Go to opcode CMP
0000140C                           439  
0000140C                           440  code1100:                           ; Opcodes MULS, MULU, AND.B/W/L
0000140C  220D                     441          MOVE.L  A5,D1               ; A5 is current instruction word
0000140E  0241 00C0                442          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
00001412  143C 0006                443          MOVE.B  #right6,D2          ; Used to shift 6 times to right
00001416  E469                     444          LSR.W   D2,D1               ; Shift dst mode into LSB position
00001418  C2FC 0006                445          MULU    #6, D1              ; Set displacement 
0000141C  41F9 00001582            446          LEA     OP_1100_TABLE,A0    ; Load table into A0
00001422  4EF0 1000                447          JMP     0(A0,D1)            ; go to displacement (A0 + xxxx * 6)
00001426                           448  
00001426                           449  code1101:                           ; Opcodes ADD.B/W/L, ADDA.B/W/L
00001426  220D                     450          MOVE.L  A5,D1               ; A5 is current instruction word
00001428  0241 00C0                451          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
0000142C  143C 0006                452          MOVE.B  #right6,D2          ; Used to shift 6 times to right
00001430  E469                     453          LSR.W   D2,D1               ; Shift dst mode into LSB position
00001432  C2FC 0006                454          MULU    #6, D1              ; Set displacement 
00001436  41F9 000015E2            455          LEA     OP_1101_TABLE,A0    ; Load table into A0
0000143C  4EF0 1000                456          JMP     0(A0,D1)            ; go to displacement (A0 + xxxx * 6)
00001440                           457  
00001440                           458  code1110:                           ; Opcodes ASL.B/W/L, ASR.B/W/L, LSL.B/W/L, LSR.B/W/L, ROL.B/W/L, ROR.B/W/L   
00001440  220D                     459          MOVE.L  A5,D1               ; A5 is current instruction word
00001442  0241 00C0                460          ANDI.W  #dst_mode,D1        ; Extract 8-6 bits from instruction word
00001446  143C 0006                461          MOVE.B  #right6,D2          ; Used to shift 6 times to right
0000144A  E469                     462          LSR.W   D2,D1               ; Shift dst mode into LSB position
0000144C                           463     
0000144C                           464          ; Check Memory Shifts
0000144C  B23C 0007                465          CMP.B   #7, D1              ; When 111
00001450  6700 0024                466          BEQ     MEMORY_1110_LEFT    ; Go to Memory Shift Left Side
00001454                           467      
00001454  B23C 0003                468          CMP.B   #3, D1              ; When 011
00001458  6700 0040                469          BEQ     MEMORY_1110_RIGHT   ; Go Memory Shift Right Side
0000145C                           470      
0000145C                           471          ; Check Register Shifts
0000145C  220D                     472          MOVE.L  A5,D1                       ; A5 is current instruction word
0000145E  0241 0018                473          ANDI.W  #src_mode,D1                ; Extract 5-3 bits from instruction word
00001462  143C 0003                474          MOVE.B  #right3,D2                  ; Used to shift 3 times to right
00001466  E469                     475          LSR.W   D2,D1                       ; Shift 5-3 bits into LSB position
00001468  C2FC 0006                476          MULU    #6, D1                      ; Set displacement 
0000146C  41F9 00001642            477          LEA     OP_1110_TABLE_REGISTER,A0   ; Load table into A0
00001472  4EF0 1000                478          JMP     0(A0,D1)                    ; go to displacement (A0 + xxxx * 6)
00001476                           479  
00001476                           480  MEMORY_1110_LEFT:    
00001476  220D                     481          MOVE.L  A5,D1               ; A5 is current instruction word
00001478  0241 0E00                482          ANDI.W  #dst_reg,D1         ; Extract 11-9 position from instruction word
0000147C  143C 0009                483          MOVE.B  #right9,D2          ; Used to shift 9 times to right
00001480  E469                     484          LSR.W   D2,D1               ; Shift dst reg into LSB position
00001482  B23C 0000                485          CMP.B   #0,D1               ; When D1 is 0
00001486  6700 0584                486          BEQ     OP_ASL              ; Go to opcode ASL
0000148A  B23C 0001                487          CMP.B   #1, D1              ; when D1 is 1
0000148E  6700 05B4                488          BEQ     OP_LSL              ; Go to opcode LSL
00001492  B23C 0002                489          CMP.B   #2, D1              ; When D1 is 2
00001496  6700 05E4                490          BEQ     OP_ROL              ; Go to opcode ROL
0000149A                           491  
0000149A                           492  MEMORY_1110_RIGHT:
0000149A  220D                     493          MOVE.L  A5,D1               ; A5 is current instruction word
0000149C  0241 0E00                494          ANDI.W  #dst_reg,D1         ; Extract 11-9 position from instruction word
000014A0  143C 0009                495          MOVE.B  #right9,D2          ; Used to shift 9 times to right
000014A4  E469                     496          LSR.W   D2,D1               ; Shift dst reg into LSB position
000014A6  B23C 0000                497          CMP.B   #0,D1               ; When D1 is 0
000014AA  6700 0544                498          BEQ     OP_ASR              ; Go to opcode ASR
000014AE  B23C 0001                499          CMP.B   #1, D1              ; when D1 is 1
000014B2  6700 0574                500          BEQ     OP_LSR              ; Go to opcode LSR
000014B6  B23C 0002                501          CMP.B   #2, D1              ; When D1 is 2
000014BA  6700 05A4                502          BEQ     OP_ROR              ; Go to opcode ROR
000014BE                           503  
000014BE                           504  code1111:                           ; Opcode not supported 
000014BE  6000 0210                505          BRA     OP_UNSUPPORTED      ; Go to opcode unsupported   
000014C2                           506           
000014C2                           507  OP_0000_TABLE:
000014C2  4EF9 000016D0            508      JMP     OP_UNSUPPORTED  ; 0 Go to opcode unsupported  
000014C8  4EF9 000016D0            509      JMP     OP_UNSUPPORTED  ; 1 Go to opcode unsupported  
000014CE  4EF9 000016D0            510      JMP     OP_UNSUPPORTED  ; 2 Go to opcode unsupported  
000014D4  4EF9 000016D0            511      JMP     OP_UNSUPPORTED  ; 3 Go to opcode unsupported  
000014DA  4EF9 000016E0            512      JMP     OP_SUBI         ; 4 Go to opcode SUBI
000014E0  4EF9 000016D0            513      JMP     OP_UNSUPPORTED  ; 5 Go to opcode unsupported  
000014E6  4EF9 00001700            514      JMP     OP_ADDI         ; 6 Go to opcode ADDI
000014EC  4EF9 000016D0            515      JMP     OP_UNSUPPORTED  ; 7 Go to opcode unsupported  
000014F2  4EF9 000016D0            516      JMP     OP_UNSUPPORTED  ; 8 Go to opcode unsupported  
000014F8  4EF9 000016D0            517      JMP     OP_UNSUPPORTED  ; 9 Go to opcode unsupported  
000014FE  4EF9 000016D0            518      JMP     OP_UNSUPPORTED  ; A Go to opcode unsupported  
00001504  4EF9 000016D0            519      JMP     OP_UNSUPPORTED  ; B Go to opcode unsupported  
0000150A  4EF9 000016D0            520      JMP     OP_UNSUPPORTED  ; C Go to opcode unsupported  
00001510  4EF9 000016D0            521      JMP     OP_UNSUPPORTED  ; D Go to opcode unsupported  
00001516  4EF9 000016D0            522      JMP     OP_UNSUPPORTED  ; E Go to opcode unsupported  
0000151C  4EF9 000016D0            523      JMP     OP_UNSUPPORTED  ; F Go to opcode unsupported  
00001522                           524      
00001522                           525  OP_0100_TABLE:
00001522  4EF9 000016D0            526      JMP     OP_UNSUPPORTED      ; 0 Go to opcode unsupported  
00001528  4EF9 000017F8            527      JMP     OP_LEA              ; 1 Go to opcode LEA
0000152E  4EF9 00001764            528      JMP     OP_CLR              ; 2 Go to opcode CLR
00001534  4EF9 000017F8            529      JMP     OP_LEA              ; 3 Go to opcode LEA
0000153A  4EF9 000016D0            530      JMP     OP_UNSUPPORTED      ; 4 Go to opcode unsupported  
00001540  4EF9 000017F8            531      JMP     OP_LEA              ; 5 Go to opcode LEA
00001546  4EF9 00001700            532      JMP     OP_ADDI             ; 6 Go to opcode ADDI
0000154C  4EF9 000017F8            533      JMP     OP_LEA              ; 7 Go to opcode LEA
00001552  4EF9 000017D4            534      JMP     OP_MOVEM            ; 8 Go to opcode MOVEM
00001558  4EF9 000017F8            535      JMP     OP_LEA              ; 9 Go to opcode LEA
0000155E  4EF9 000016D0            536      JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
00001564  4EF9 000017F8            537      JMP     OP_LEA              ; B Go to opcode LEA
0000156A  4EF9 000017D4            538      JMP     OP_MOVEM            ; C Go to opcode MOVEM
00001570  4EF9 000017F8            539      JMP     OP_LEA              ; D Go to opcode LEA
00001576  4EF9 000016A2            540      JMP     JSR_NOP_RTS         ; E Go to opcode JSR, NOP, or RTS
0000157C  4EF9 000016D0            541      JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
00001582                           542      
00001582                           543  OP_1100_TABLE:
00001582  4EF9 00001998            544      JMP     OP_AND              ; 0 Go to opcode AND 
00001588  4EF9 00001998            545      JMP     OP_AND              ; 1 Go to opcode AND
0000158E  4EF9 00001998            546      JMP     OP_AND              ; 2 Go to opcode AND
00001594  4EF9 00001958            547      JMP     OP_MULU             ; 3 Go to opcode MULU
0000159A  4EF9 00001998            548      JMP     OP_AND              ; 4 Go to opcode AND 
000015A0  4EF9 00001998            549      JMP     OP_AND              ; 5 Go to opcode AND
000015A6  4EF9 00001998            550      JMP     OP_AND              ; 6 Go to opcode AND
000015AC  4EF9 00001978            551      JMP     OP_MULS             ; 7 Go to opcode MULS
000015B2  4EF9 000016D0            552      JMP     OP_UNSUPPORTED      ; 8 Go to opcode unsupported  
000015B8  4EF9 000016D0            553      JMP     OP_UNSUPPORTED      ; 9 Go to opcode unsupported  
000015BE  4EF9 000016D0            554      JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
000015C4  4EF9 000016D0            555      JMP     OP_UNSUPPORTED      ; B Go to opcode unsupported  
000015CA  4EF9 000016D0            556      JMP     OP_UNSUPPORTED      ; C Go to opcode unsupported  
000015D0  4EF9 000016D0            557      JMP     OP_UNSUPPORTED      ; D Go to opcode unsupported  
000015D6  4EF9 000016D0            558      JMP     OP_UNSUPPORTED      ; E Go to opcode unsupported  
000015DC  4EF9 000016D0            559      JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
000015E2                           560      
000015E2                           561  OP_1101_TABLE:
000015E2  4EF9 000019B4            562      JMP     OP_ADD              ; 0 Go to opcode ADD 
000015E8  4EF9 000019B4            563      JMP     OP_ADD              ; 1 Go to opcode ADD
000015EE  4EF9 000019B4            564      JMP     OP_ADD              ; 2 Go to opcode ADD
000015F4  4EF9 000019D0            565      JMP     OP_ADDA             ; 3 Go to opcode ADDA
000015FA  4EF9 000019B4            566      JMP     OP_ADD              ; 4 Go to opcode ADD 
00001600  4EF9 000019B4            567      JMP     OP_ADD              ; 5 Go to opcode ADD
00001606  4EF9 000019B4            568      JMP     OP_ADD              ; 6 Go to opcode ADD
0000160C  4EF9 000019D0            569      JMP     OP_ADDA             ; 7 Go to opcode ADDA
00001612  4EF9 000016D0            570      JMP     OP_UNSUPPORTED      ; 8 Go to opcode unsupported  
00001618  4EF9 000016D0            571      JMP     OP_UNSUPPORTED      ; 9 Go to opcode unsupported  
0000161E  4EF9 000016D0            572      JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
00001624  4EF9 000016D0            573      JMP     OP_UNSUPPORTED      ; B Go to opcode unsupported  
0000162A  4EF9 000016D0            574      JMP     OP_UNSUPPORTED      ; C Go to opcode unsupported  
00001630  4EF9 000016D0            575      JMP     OP_UNSUPPORTED      ; D Go to opcode unsupported  
00001636  4EF9 000016D0            576      JMP     OP_UNSUPPORTED      ; E Go to opcode unsupported  
0000163C  4EF9 000016D0            577      JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
00001642                           578      
00001642                           579  OP_1110_TABLE_REGISTER:
00001642  4EF9 000019F0            580      JMP     OP_ASR              ; 0 Go to opcode ASR
00001648  4EF9 00001A28            581      JMP     OP_LSR              ; 1 Go to opcode LSR
0000164E  4EF9 000016D0            582      JMP     OP_UNSUPPORTED      ; 2 Go to opcode unsupported  
00001654  4EF9 00001A60            583      JMP     OP_ROR              ; 3 Go to opcode ROR
0000165A  4EF9 00001A0C            584      JMP     OP_ASL              ; 4 Go to opcode ASL 
00001660  4EF9 00001A44            585      JMP     OP_LSL              ; 5 Go to opcode LSL
00001666  4EF9 000016D0            586      JMP     OP_UNSUPPORTED      ; 6 Go to opcode unsupported 
0000166C  4EF9 00001A7C            587      JMP     OP_ROL              ; 7 Go to opcode ROL
00001672  4EF9 000016D0            588      JMP     OP_UNSUPPORTED      ; 8 Go to opcode unsupported  
00001678  4EF9 000016D0            589      JMP     OP_UNSUPPORTED      ; 9 Go to opcode unsupported  
0000167E  4EF9 000016D0            590      JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
00001684  4EF9 000016D0            591      JMP     OP_UNSUPPORTED      ; B Go to opcode unsupported  
0000168A  4EF9 000016D0            592      JMP     OP_UNSUPPORTED      ; C Go to opcode unsupported  
00001690  4EF9 000016D0            593      JMP     OP_UNSUPPORTED      ; D Go to opcode unsupported  
00001696  4EF9 000016D0            594      JMP     OP_UNSUPPORTED      ; E Go to opcode unsupported  
0000169C  4EF9 000016D0            595      JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
000016A2                           596  
000016A2                           597  JSR_NOP_RTS:
000016A2  220D                     598      MOVE.L  A5,D1               ; A5 is current instruction word
000016A4  0241 00C0                599      ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000016A8  143C 0006                600      MOVE.B  #right6,D2          ; Used to shift 6 times to right
000016AC  E469                     601      LSR.W   D2,D1               ; Shift dst mode into LSB position
000016AE  B23C 0002                602      CMP.B   #2, D1              ; When 010 in destination mode
000016B2  6700 0104                603      BEQ     OP_JSR              ; Go to opcode JSR
000016B6  220D                     604      MOVE.L  A5,D1               ; A5 is current instruction word
000016B8  0241 0007                605      ANDI.W  #src_reg ,D1        ; Extract src reg position from instruction word
000016BC  B23C 0001                606      CMP.B   #1, D1              ; When 001 in src register
000016C0  6700 00BE                607      BEQ     OP_NOP              ; Go to opcode NOP
000016C4  B23C 0005                608      CMP.B   #5, D1              ; When 005 in src register
000016C8  6700 00D2                609      BEQ     OP_RTS              ; Go to opcode RTS
000016CC  6000 0002                610      BRA     OP_UNSUPPORTED      ; Otherwise, go to opcode unsupported 
000016D0                           611  
000016D0                           612  OP_UNSUPPORTED
000016D0  43F9 00001E13            613      LEA     ERROR_MESSAGE, A1 
000016D6  103C 000E                614      MOVE.B  #14, D0
000016DA  4E4F                     615      TRAP    #15
000016DC  6000 0462                616      BRA     DONE
000016E0                           617          
000016E0                           618  *----------------------------------------------------------------------------------------------*
000016E0                           619  * param D0 the current instruction in word
000016E0                           620  * param D1 the EA type
000016E0                           621  * param A2 a pointer to the decode_buffer
000016E0                           622  * param A5 current address
000016E0                           623  * ea_start(D0, D1, A2, A5){
000016E0                           624  * D2: size
000016E0                           625  * D3: src moe, dst mode
000016E0                           626  * D4: src regs, dst regs
000016E0                           627  * D5: #shifts
000016E0                           628  * D7: immediate data
000016E0                           629  * A0: EA_TYPE_TABLE
000016E0                           630  *       0 = ea_immediate
000016E0                           631  * }
000016E0                           632  
000016E0                           633  *----------------------------------------------------------------------------------------------*
000016E0                           634  * First 4 bits: 0000
000016E0                           635  
000016E0                           636  OP_SUBI
000016E0  14FC 0053                637          MOVE.B  #'S', (A2)+
000016E4  14FC 0055                638          MOVE.B  #'U', (A2)+
000016E8  14FC 0042                639          MOVE.B  #'B', (A2)+
000016EC  14FC 0049                640          MOVE.B  #'I', (A2)+
000016F0  223C 00000000            641          MOVE.L  #ea_type_immediate, D1
000016F6  4EB9 00001A98            642          JSR     EA_START
000016FC  4EF8 12E4                643          JMP     OP_FINISH
00001700                           644          
00001700                           645  OP_ADDI
00001700  14FC 0041                646          MOVE.B  #'A', (A2)+
00001704  14FC 0044                647          MOVE.B  #'D', (A2)+
00001708  14FC 0044                648          MOVE.B  #'D', (A2)+
0000170C  14FC 0049                649          MOVE.B  #'I', (A2)+
00001710  223C 00000000            650          MOVE.L  #ea_type_immediate, D1
00001716  4EB9 00001A98            651          JSR     EA_START
0000171C  4EF8 12E4                652          JMP     OP_FINISH
00001720                           653  
00001720                           654  *-----------------------------------------------------------------------------------------------*
00001720                           655  * First 4 bits: 0001
00001720                           656  OP_MOVEA
00001720  14FC 004D                657          MOVE.B  #'M', (A2)+
00001724  14FC 004F                658          MOVE.B  #'O', (A2)+
00001728  14FC 0056                659          MOVE.B  #'V', (A2)+
0000172C  14FC 0041                660          MOVE.B  #'A', (A2)+
00001730  14FC 0041                661          MOVE.B  #'A', (A2)+
00001734  223C 00000000            662          MOVE.L  #ea_type_immediate, D1
0000173A  4EB9 00001A98            663          JSR     EA_START
00001740  4EF8 12E4                664          JMP     OP_FINISH
00001744                           665  
00001744                           666  *------------------------------------------------------------------------------------------------*
00001744                           667  * First 4 bits: 0011
00001744                           668  OP_MOVE
00001744  14FC 004D                669          MOVE.B  #'M', (A2)+
00001748  14FC 004F                670          MOVE.B  #'O', (A2)+
0000174C  14FC 0056                671          MOVE.B  #'V', (A2)+
00001750  14FC 0045                672          MOVE.B  #'E', (A2)+
00001754  223C 00000000            673          MOVE.L  #ea_type_immediate, D1
0000175A  4EB9 00001A98            674          JSR     EA_START
00001760  4EF8 12E4                675          JMP     OP_FINISH
00001764                           676  
00001764                           677  *------------------------------------------------------------------------------------------------*
00001764                           678  * First 4 bits: 0100
00001764                           679  OP_CLR
00001764  14FC 0043                680          MOVE.B  #'C', (A2)+
00001768  14FC 004C                681          MOVE.B  #'L', (A2)+
0000176C  14FC 0052                682          MOVE.B  #'R', (A2)+
00001770  223C 00000000            683          MOVE.L  #ea_type_immediate, D1
00001776  4EB9 00001A98            684          JSR     EA_START
0000177C  4EF8 12E4                685          JMP     OP_FINISH
00001780                           686          
00001780                           687  OP_NOP
00001780  14FC 004E                688          MOVE.B  #'N', (A2)+
00001784  14FC 004F                689          MOVE.B  #'O', (A2)+
00001788  14FC 0050                690          MOVE.B  #'P', (A2)+
0000178C  223C 00000000            691          MOVE.L  #ea_type_immediate, D1
00001792  4EB9 00001A98            692          JSR     EA_START
00001798  4EF8 12E4                693          JMP     OP_FINISH
0000179C                           694          
0000179C                           695  OP_RTS
0000179C  14FC 0052                696          MOVE.B  #'R', (A2)+
000017A0  14FC 0054                697          MOVE.B  #'T', (A2)+
000017A4  14FC 0053                698          MOVE.B  #'S', (A2)+
000017A8  223C 00000000            699          MOVE.L  #ea_type_immediate, D1
000017AE  4EB9 00001A98            700          JSR     EA_START
000017B4  4EF8 12E4                701          JMP     OP_FINISH
000017B8                           702          
000017B8                           703  OP_JSR
000017B8  14FC 004A                704          MOVE.B  #'J', (A2)+
000017BC  14FC 0053                705          MOVE.B  #'S', (A2)+
000017C0  14FC 0052                706          MOVE.B  #'R', (A2)+
000017C4  223C 00000000            707          MOVE.L  #ea_type_immediate, D1
000017CA  4EB9 00001A98            708          JSR     EA_START
000017D0  4EF8 12E4                709          JMP     OP_FINISH
000017D4                           710  
000017D4                           711  OP_MOVEM
000017D4  14FC 004D                712          MOVE.B  #'M', (A2)+
000017D8  14FC 004F                713          MOVE.B  #'O', (A2)+
000017DC  14FC 0056                714          MOVE.B  #'V', (A2)+
000017E0  14FC 0045                715          MOVE.B  #'E', (A2)+
000017E4  14FC 004D                716          MOVE.B  #'M', (A2)+
000017E8  223C 00000000            717          MOVE.L  #ea_type_immediate, D1
000017EE  4EB9 00001A98            718          JSR     EA_START
000017F4  4EF8 12E4                719          JMP     OP_FINISH
000017F8                           720          
000017F8                           721  OP_LEA
000017F8  14FC 004C                722          MOVE.B  #'L', (A2)+
000017FC  14FC 0045                723          MOVE.B  #'E', (A2)+
00001800  14FC 0041                724          MOVE.B  #'A', (A2)+
00001804  223C 00000000            725          MOVE.L  #ea_type_immediate, D1
0000180A  4EB9 00001A98            726          JSR     EA_START
00001810  4EF8 12E4                727          JMP     OP_FINISH
00001814                           728  
00001814                           729  *------------------------------------------------------------------------------------------------*
00001814                           730  * First 4 bits: 0101
00001814                           731  OP_ADDQ
00001814  14FC 0041                732          MOVE.B  #'A', (A2)+
00001818  14FC 0044                733          MOVE.B  #'D', (A2)+
0000181C  14FC 0044                734          MOVE.B  #'D', (A2)+
00001820  14FC 0051                735          MOVE.B  #'Q', (A2)+
00001824  223C 00000000            736          MOVE.L  #ea_type_immediate, D1
0000182A  4EB9 00001A98            737          JSR     EA_START
00001830  4EF8 12E4                738          JMP     OP_FINISH
00001834                           739          
00001834                           740  *------------------------------------------------------------------------------------------------*
00001834                           741  * First 4 bits: 0110
00001834                           742  OP_BRA
00001834  14FC 0042                743          MOVE.B  #'B', (A2)+
00001838  14FC 0052                744          MOVE.B  #'R', (A2)+
0000183C  14FC 0041                745          MOVE.B  #'A', (A2)+
00001840  223C 00000000            746          MOVE.L  #ea_type_immediate, D1
00001846  4EB9 00001A98            747          JSR     EA_START
0000184C  4EF8 12E4                748          JMP     OP_FINISH
00001850                           749  
00001850                           750  OP_BCC
00001850  14FC 0042                751          MOVE.B  #'B', (A2)+
00001854  14FC 0043                752          MOVE.B  #'C', (A2)+
00001858  14FC 0043                753          MOVE.B  #'C', (A2)+
0000185C  223C 00000000            754          MOVE.L  #ea_type_immediate, D1
00001862  4EB9 00001A98            755          JSR     EA_START
00001868  4EF8 12E4                756          JMP     OP_FINISH
0000186C                           757          
0000186C                           758  OP_BGT
0000186C  14FC 0042                759          MOVE.B  #'B', (A2)+
00001870  14FC 0047                760          MOVE.B  #'G', (A2)+
00001874  14FC 0054                761          MOVE.B  #'T', (A2)+
00001878  223C 00000000            762          MOVE.L  #ea_type_immediate, D1
0000187E  4EB9 00001A98            763          JSR     EA_START
00001884  4EF8 12E4                764          JMP     OP_FINISH
00001888                           765  
00001888                           766  OP_BLE
00001888  14FC 0042                767          MOVE.B  #'B', (A2)+
0000188C  14FC 004C                768          MOVE.B  #'L', (A2)+
00001890  14FC 0045                769          MOVE.B  #'E', (A2)+
00001894  223C 00000000            770          MOVE.L  #ea_type_immediate, D1
0000189A  4EB9 00001A98            771          JSR     EA_START
000018A0  4EF8 12E4                772          JMP     OP_FINISH
000018A4                           773          
000018A4                           774  OP_BSR
000018A4  14FC 0042                775          MOVE.B  #'B', (A2)+
000018A8  14FC 0053                776          MOVE.B  #'S', (A2)+
000018AC  14FC 0052                777          MOVE.B  #'R', (A2)+
000018B0  223C 00000000            778          MOVE.L  #ea_type_immediate, D1
000018B6  4EB9 00001A98            779          JSR     EA_START
000018BC  4EF8 12E4                780          JMP     OP_FINISH
000018C0                           781  *------------------------------------------------------------------------------------------------*
000018C0                           782  * First 4 bits: 0111
000018C0                           783  OP_MOVEQ
000018C0  14FC 004D                784          MOVE.B  #'M', (A2)+
000018C4  14FC 004F                785          MOVE.B  #'O', (A2)+
000018C8  14FC 0056                786          MOVE.B  #'V', (A2)+
000018CC  14FC 0056                787          MOVE.B  #'V', (A2)+
000018D0  14FC 0045                788          MOVE.B  #'E', (A2)+
000018D4  14FC 0051                789          MOVE.B  #'Q', (A2)+
000018D8  223C 00000000            790          MOVE.L  #ea_type_immediate, D1
000018DE  4EB9 00001A98            791          JSR     EA_START
000018E4  4EF8 12E4                792          JMP     OP_FINISH
000018E8                           793          
000018E8                           794  *------------------------------------------------------------------------------------------------*
000018E8                           795  * First 4 bits: 1000
000018E8                           796  OP_DIVU
000018E8  14FC 0044                797          MOVE.B  #'D', (A2)+
000018EC  14FC 0049                798          MOVE.B  #'I', (A2)+
000018F0  14FC 0056                799          MOVE.B  #'V', (A2)+
000018F4  14FC 0055                800          MOVE.B  #'U', (A2)+
000018F8  223C 00000000            801          MOVE.L  #ea_type_immediate, D1
000018FE  4EB9 00001A98            802          JSR     EA_START
00001904  4EF8 12E4                803          JMP     OP_FINISH
00001908                           804    
00001908                           805  OP_OR
00001908  14FC 004F                806          MOVE.B  #'O', (A2)+
0000190C  14FC 0052                807          MOVE.B  #'R', (A2)+
00001910  223C 00000000            808          MOVE.L  #ea_type_immediate, D1
00001916  4EB9 00001A98            809          JSR     EA_START
0000191C  4EF8 12E4                810          JMP     OP_FINISH
00001920                           811  
00001920                           812  *------------------------------------------------------------------------------------------------*
00001920                           813  * First 4 bits: 1001
00001920                           814  OP_SUB
00001920  14FC 0053                815          MOVE.B  #'S', (A2)+
00001924  14FC 0055                816          MOVE.B  #'U', (A2)+
00001928  14FC 0042                817          MOVE.B  #'B', (A2)+
0000192C  223C 00000000            818          MOVE.L  #ea_type_immediate, D1
00001932  4EB9 00001A98            819          JSR     EA_START
00001938  4EF8 12E4                820          JMP     OP_FINISH
0000193C                           821          
0000193C                           822  *------------------------------------------------------------------------------------------------*
0000193C                           823  * First 4 bits: 1011
0000193C                           824  OP_CMP
0000193C  14FC 0043                825          MOVE.B  #'C', (A2)+
00001940  14FC 004D                826          MOVE.B  #'M', (A2)+
00001944  14FC 0050                827          MOVE.B  #'P', (A2)+
00001948  223C 00000000            828          MOVE.L  #ea_type_immediate, D1
0000194E  4EB9 00001A98            829          JSR     EA_START
00001954  4EF8 12E4                830          JMP     OP_FINISH
00001958                           831          
00001958                           832  *------------------------------------------------------------------------------------------------*
00001958                           833  * First 4 bits: 1100
00001958                           834  OP_MULU
00001958  14FC 004D                835          MOVE.B  #'M', (A2)+
0000195C  14FC 0055                836          MOVE.B  #'U', (A2)+
00001960  14FC 004C                837          MOVE.B  #'L', (A2)+
00001964  14FC 0055                838          MOVE.B  #'U', (A2)+
00001968  223C 00000000            839          MOVE.L  #ea_type_immediate, D1
0000196E  4EB9 00001A98            840          JSR     EA_START
00001974  4EF8 12E4                841          JMP     OP_FINISH
00001978                           842          
00001978                           843  OP_MULS
00001978  14FC 004D                844          MOVE.B  #'M', (A2)+
0000197C  14FC 0055                845          MOVE.B  #'U', (A2)+
00001980  14FC 004C                846          MOVE.B  #'L', (A2)+
00001984  14FC 0053                847          MOVE.B  #'S', (A2)+
00001988  223C 00000000            848          MOVE.L  #ea_type_immediate, D1
0000198E  4EB9 00001A98            849          JSR     EA_START
00001994  4EF8 12E4                850          JMP     OP_FINISH
00001998                           851          
00001998                           852  OP_AND
00001998  14FC 0041                853          MOVE.B  #'A', (A2)+
0000199C  14FC 004E                854          MOVE.B  #'N', (A2)+
000019A0  14FC 0044                855          MOVE.B  #'D', (A2)+
000019A4  223C 00000000            856          MOVE.L  #ea_type_immediate, D1
000019AA  4EB9 00001A98            857          JSR     EA_START
000019B0  4EF8 12E4                858          JMP     OP_FINISH
000019B4                           859          
000019B4                           860  *------------------------------------------------------------------------------------------------*
000019B4                           861  * First 4 bits: 1101
000019B4                           862  OP_ADD
000019B4  14FC 0041                863          MOVE.B  #'A', (A2)+
000019B8  14FC 0044                864          MOVE.B  #'D', (A2)+
000019BC  14FC 0044                865          MOVE.B  #'D', (A2)+
000019C0  223C 00000000            866          MOVE.L  #ea_type_immediate, D1
000019C6  4EB9 00001A98            867          JSR     EA_START
000019CC  4EF8 12E4                868          JMP     OP_FINISH
000019D0                           869  
000019D0                           870  OP_ADDA
000019D0  14FC 0041                871          MOVE.B  #'A', (A2)+
000019D4  14FC 0044                872          MOVE.B  #'D', (A2)+
000019D8  14FC 0044                873          MOVE.B  #'D', (A2)+
000019DC  14FC 0041                874          MOVE.B  #'A', (A2)+
000019E0  223C 00000000            875          MOVE.L  #ea_type_immediate, D1
000019E6  4EB9 00001A98            876          JSR     EA_START
000019EC  4EF8 12E4                877          JMP     OP_FINISH
000019F0                           878          
000019F0                           879  *------------------------------------------------------------------------------------------------*
000019F0                           880  * First 4 bits: 1110
000019F0                           881  OP_ASR
000019F0  14FC 0041                882          MOVE.B  #'A', (A2)+
000019F4  14FC 0053                883          MOVE.B  #'S', (A2)+
000019F8  14FC 0052                884          MOVE.B  #'R', (A2)+
000019FC  223C 00000000            885          MOVE.L  #ea_type_immediate, D1
00001A02  4EB9 00001A98            886          JSR     EA_START
00001A08  4EF8 12E4                887          JMP     OP_FINISH
00001A0C                           888  OP_ASL
00001A0C  14FC 0041                889          MOVE.B  #'A', (A2)+
00001A10  14FC 0053                890          MOVE.B  #'S', (A2)+
00001A14  14FC 004C                891          MOVE.B  #'L', (A2)+
00001A18  223C 00000000            892          MOVE.L  #ea_type_immediate, D1
00001A1E  4EB9 00001A98            893          JSR     EA_START
00001A24  4EF8 12E4                894          JMP     OP_FINISH
00001A28                           895          
00001A28                           896  OP_LSR
00001A28  14FC 004C                897          MOVE.B  #'L', (A2)+
00001A2C  14FC 0053                898          MOVE.B  #'S', (A2)+
00001A30  14FC 0052                899          MOVE.B  #'R', (A2)+
00001A34  223C 00000000            900          MOVE.L  #ea_type_immediate, D1
00001A3A  4EB9 00001A98            901          JSR     EA_START
00001A40  4EF8 12E4                902          JMP     OP_FINISH
00001A44                           903         
00001A44                           904  OP_LSL
00001A44  14FC 004C                905          MOVE.B  #'L', (A2)+
00001A48  14FC 0053                906          MOVE.B  #'S', (A2)+
00001A4C  14FC 004C                907          MOVE.B  #'L', (A2)+
00001A50  223C 00000000            908          MOVE.L  #ea_type_immediate, D1
00001A56  4EB9 00001A98            909          JSR     EA_START
00001A5C  4EF8 12E4                910          JMP     OP_FINISH
00001A60                           911          
00001A60                           912  OP_ROR
00001A60  14FC 0052                913          MOVE.B  #'R', (A2)+
00001A64  14FC 004F                914          MOVE.B  #'O', (A2)+
00001A68  14FC 0052                915          MOVE.B  #'R', (A2)+
00001A6C  223C 00000000            916          MOVE.L  #ea_type_immediate, D1
00001A72  4EB9 00001A98            917          JSR     EA_START
00001A78  4EF8 12E4                918          JMP     OP_FINISH
00001A7C                           919          
00001A7C                           920  OP_ROL
00001A7C  14FC 0052                921          MOVE.B  #'R', (A2)+
00001A80  14FC 004F                922          MOVE.B  #'O', (A2)+
00001A84  14FC 004C                923          MOVE.B  #'L', (A2)+
00001A88  223C 00000000            924          MOVE.L  #ea_type_immediate, D1
00001A8E  4EB9 00001A98            925          JSR     EA_START
00001A94  4EF8 12E4                926          JMP     OP_FINISH
00001A98                           927          
00001A98                           928  *-----------------------------------------------------------------------*
00001A98                           929          
00001A98                           930  EA_START
00001A98  48E7 38C0                931          MOVEM.L D2-D4/A0-A1, -(SP)
00001A9C                           932          
00001A9C  41F9 00001AB0            933          LEA     EA_TYPE_TABLE, A0
00001AA2  C2FC 0006                934          MULU    #6, D1
00001AA6  4EF0 1000                935          JMP     0(A0, D1)
00001AAA                           936          
00001AAA                           937  EA_FINISH
00001AAA  4CDF 031C                938          MOVEM.L (SP)+, D2-D4/A0-A1
00001AAE  4E75                     939          RTS
00001AB0                           940          
00001AB0                           941  EA_TYPE_TABLE
00001AB0  4EF9 00001B2E            942          JMP     EA_IMMEDIATE    ; 0: ea_immediate
00001AB6  4EF9 00001B40            943          JMP     EA_MOVE         ; 1: ea_move
00001ABC  4EF9 00001B40            944          JMP     EA_MOVEA        ; 2: ea_movea
00001AC2  4EF9 00001B40            945          JMP     EA_LEA          ; 3: ea_lea
00001AC8  4EF9 00001B40            946          JMP     EA_DSTONLY      ; 4: ea_dstonly
00001ACE  4EF9 00001B40            947          JMP     EA_EXT          ; 5: ea_ext
00001AD4  4EF9 00001B40            948          JMP     EA_MOVEM        ; 6: ea_movem
00001ADA  4EF9 00001B40            949          JMP     EA_TRAP         ; 7: ea_trap
00001AE0  4EF9 00001B40            950          JMP     EA_QUICK        ; 8: ea_quick
00001AE6  4EF9 00001B40            951          JMP     EA_branch       ; 9: ea_branch
00001AEC  4EF8 1AAA                952          JMP     EA_FINISH
00001AF0                           953          
00001AF0                           954  EA_SIZE
00001AF0  B43C 0000                955          CMP.B   #%00, D2        ; .b
00001AF4  6700 0018                956          BEQ     EA_SIZE_B       
00001AF8  B43C 0001                957          CMP.B   #%01, D2        ; .w
00001AFC  6700 001A                958          BEQ     EA_SIZE_W       
00001B00  B43C 0002                959          CMP.B   #%10, D2        ; .l
00001B04  6700 001C                960          BEQ     EA_SIZE_L
00001B08  4EF9 00001B45            961          JMP     EA_WRONGSIZE    ; wrong size
00001B0E                           962  EA_SIZE_B
00001B0E  14FC 002E                963          MOVE.B  #'.', (A2)+
00001B12  14FC 0042                964          MOVE.B  #'B', (A2)+
00001B16  4E75                     965          RTS
00001B18                           966  EA_SIZE_W
00001B18  14FC 002E                967          MOVE.B  #'.', (A2)+
00001B1C  14FC 0057                968          MOVE.B  #'W', (A2)+
00001B20  4E75                     969          RTS
00001B22                           970  EA_SIZE_L
00001B22  14FC 002E                971          MOVE.B  #'.', (A2)+
00001B26  14FC 004C                972          MOVE.B  #'L', (A2)+
00001B2A  4E75                     973          RTS
00001B2C                           974  EA_SIZE_DONE
00001B2C  4E75                     975          RTS
00001B2E                           976          
00001B2E                           977  EA_IMMEDIATE
00001B2E  220D                     978          MOVE.L  A5, D1
00001B30  0241 00C0                979          ANDI.W  #dst_mode, D1
00001B34  143C 0006                980          MOVE.B  #right6, D2
00001B38  E469                     981          LSR.W   D2, D1
00001B3A  5601                     982          ADDI.B  #3, D1
00001B3C  1401                     983          MOVE.B  D1, D2
00001B3E  60B0                     984          BRA     EA_SIZE
00001B40                           985          
00001B40                           986  EA_MOVE         ; 1: ea_move
00001B40                           987  EA_MOVEA        ; 2: ea_movea
00001B40                           988  EA_LEA          ; 3: ea_lea
00001B40                           989  EA_DSTONLY      ; 4: ea_dstonly
00001B40                           990  EA_EXT          ; 5: ea_ext
00001B40                           991  EA_MOVEM        ; 6: ea_movem
00001B40                           992  EA_TRAP         ; 7: ea_trap
00001B40                           993  EA_QUICK        ; 8: ea_quick
00001B40                           994  EA_branch       ; 9: ea_branch
00001B40                           995  
00001B40                           996  
00001B40                           997          
00001B40                           998  DONE        
00001B40  FFFF FFFF                999      SIMHALT             ; halt simulator
00001B44                          1000  
00001B44                          1001  * Put variables and constants here
00001B44                          1002     
00001B44  =0000000D               1003  CR              EQU         $0D
00001B44  =0000000A               1004  LF              EQU         $0A
00001B44  =00002000               1005  stack           EQU         $2000
00001B44  =00000040               1006  buffer_size     EQU         64 
00001B44  =00000040               1007  decoded_buffer  EQU         64
00001B44  =00000014               1008  lines_p_screen  EQU         20
00001B44  =00000003               1009  right3          EQU         3
00001B44  =00000004               1010  right4          EQU         4
00001B44  =00000006               1011  right6          EQU         6
00001B44  =00000008               1012  right8          EQU         8
00001B44  =00000009               1013  right9          EQU         9
00001B44  =0000000C               1014  right12         EQU         12
00001B44  =00000010               1015  right16         EQU         16
00001B44  =00000018               1016  right24         EQU         24
00001B44= 20                      1017  ascii_y_n       DC.B        32
00001B45  =00000059               1018  y_uppercase     EQU         $59         
00001B45  =00000079               1019  y_lowercase     EQU         $79
00001B45  =0000004E               1020  n_uppercase     EQU         $4E
00001B45  =0000006E               1021  n_lowercase     EQU         $6E
00001B45  =00000002               1022  task2           EQU         $02
00001B45  =00000005               1023  task5           EQU         $05
00001B45  =00000009               1024  task9           EQU         $09
00001B45  =0000000D               1025  task13          EQU         $0D
00001B45  =0000000E               1026  task14          EQU         $0E
00001B45  =0000F000               1027  first_nibble    EQU         $F000
00001B45  =00000F00               1028  second_nibble   EQU         $0F00   
00001B45  =000000F0               1029  third_nibble    EQU         $00F0
00001B45  =0000000F               1030  fourth_nibble   EQU         $000F
00001B45  =000000C0               1031  dst_mode        EQU         $00C0
00001B45  =00000E00               1032  dst_reg         EQU         $0E00
00001B45  =00000018               1033  src_mode        EQU         $0018
00001B45  =00000007               1034  src_reg         EQU         $0007
00001B45  =00000100               1035  bit8            EQU         $0100
00001B45                          1036  
00001B45  =00000000               1037  ea_type_immediate   EQU     0       ; EA Type = immediate
00001B45  =00000001               1038  ea_type_move        EQU     1       ; EA Type = move
00001B45  =00000002               1039  ea_type_movea       EQU     2       ; EA Type = movea
00001B45  =0000000C               1040  ea_type_movea6      EQU     12      ; EA Type = movea * 6
00001B45  =00000003               1041  ea_type_lea         EQU     3       ; EA Type = lea
00001B45  =00000004               1042  ea_type_dstonly     EQU     4       ; EA Type = clr, neg, not, jsr, jmp
00001B45  =00000005               1043  ea_type_ext         EQU     5       ; EA Type = ext
00001B45  =00000006               1044  ea_type_movem       EQU     6       ; EA Type = movem
00001B45  =00000007               1045  ea_type_trap        EQU     7       ; EA Type = trap
00001B45  =00000008               1046  ea_type_quick       EQU     8       ; EA Type = addq, subq
00001B45  =00000009               1047  ea_type_branch      EQU     9       ; EA Type = bra, bsr, bcc
00001B45  =00000000               1048  ea_bcc_flag         EQU     0       ; EA Type = branch, flag = bcc
00001B45  =00000001               1049  ea_dbcc_flag        EQU     1       ; EA Type = branch, flag = dbcc
00001B45  =00000002               1050  ea_scc_flag         EQU     2       ; EA Type = branch, flag = scc
00001B45                          1051  EA_WRONGSIZE
00001B45                          1052  
00001B45                          1053  
00001B45                          1054  
00001B45= 57 65 6C 63 6F 6D ...   1055  WELCOME         DC.B        'Welcome to the 68k Disassembler of Avery and Alan',CR,LF,CR,LF,0
00001B7B                          1056  
00001B7B= 50 6C 65 61 73 65 ...   1057  USER_INST       DC.B        'Please follow the proper input instructions below: ',CR,LF
00001BB0= 2D 20 53 74 61 72 ...   1058                  DC.B        '- Starting address must be lower than ending address.',CR,LF
00001BE7= 2D 20 54 68 65 20 ...   1059                  DC.B        '- The values for the starting and ending address must be an even value.',CR,LF
00001C30= 2D 20 53 74 61 72 ...   1060                  DC.B        '- Starting and ending address must be inputted as hexadecimal value.',CR,LF
00001C76= 2D 20 44 6F 20 6E ...   1061                  DC.B        '- Do not put spaces in between input characters.',CR,LF
00001CA8= 2D 20 56 61 6C 69 ...   1062                  DC.B        '- Valid characters include: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F',CR,LF,0
00001CF5                          1063                  
00001CF5= 50 72 65 73 73 20 ...   1064  ENTER_PROMPT    DC.B        'Press enter to continue...',CR,LF,0
00001D12= 50 72 65 73 73 20 ...   1065  PROMPT_AGAIN    DC.B        'Press Y to continue / N to exit.',CR,LF,0
00001D35= 50 72 6F 67 72 61 ...   1066  EXIT_PROMPT     DC.B        'Program has execution has stopped.',CR,LF,0
00001D5A                          1067        
00001D5A= 45 6E 74 65 72 20 ...   1068  START_IN        DC.B        'Enter a starting address: ',CR,LF,0 
00001D77= 45 6E 74 65 72 20 ...   1069  END_IN          DC.B        'Enter an ending address: ',CR,LF,0 
00001D93                          1070  START_ADDRESS   DS.B        64     
00001DD3                          1071  END_ADDRESS     DS.B        64 
00001E13= 45 72 72 6F 72 2C ...   1072  ERROR_MESSAGE   DC.B        'Error, the input is Invalid.',CR,LF,0       
00001E32                          1073  
00001E32                          1074  
00001E32                          1075      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_TO_HEX_LETTER  1096
ASCII_Y_N           1B44
ATOI                1070
BIT8                100
BUFFER_SIZE         40
CODE0000            1360
CODE0001            137A
CODE0010            137E
CODE0011            1396
CODE0100            13AE
CODE0101            13C8
CODE0110            13CC
CODE0111            13E4
CODE1000            13E8
CODE1001            1400
CODE1010            1404
CODE1011            1408
CODE1100            140C
CODE1101            1426
CODE1110            1440
CODE1111            14BE
COMPLETE_ENDA       10E8
COMPLETE_STARTA     10E0
CONTINUE_OR_END     1254
CR                  D
DECODED_BUFFER      40
DECODE_MEMORY       12A6
DECODE_PAUSE        1240
DECODING_ITERATION  121A
DISP_UI             101E
DISP_W              1012
DO                  12C6
DONE                1B40
DST_MODE            C0
DST_REG             E00
EA_BCC_FLAG         0
EA_BRANCH           1B40
EA_DBCC_FLAG        1
EA_DSTONLY          1B40
EA_EXT              1B40
EA_FINISH           1AAA
EA_IMMEDIATE        1B2E
EA_LEA              1B40
EA_MOVE             1B40
EA_MOVEA            1B40
EA_MOVEM            1B40
EA_QUICK            1B40
EA_SCC_FLAG         2
EA_SIZE             1AF0
EA_SIZE_B           1B0E
EA_SIZE_DONE        1B2C
EA_SIZE_L           1B22
EA_SIZE_W           1B18
EA_START            1A98
EA_TRAP             1B40
EA_TYPE_BRANCH      9
EA_TYPE_DSTONLY     4
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_TABLE       1AB0
EA_TYPE_TRAP        7
EA_WRONGSIZE        1B45
END_ADDRESS         1DD3
END_IN              1D77
ENTER_PROMPT        1CF5
ERROR_MESSAGE       1E13
EXIT                1294
EXIT_PROMPT         1D35
FIRST_NIBBLE        F000
FOURTH_NIBBLE       F
INVALID             10B8
ITOA                10FC
ITOA_BYTE           1140
ITOA_BYTE_CONVERT   11D4
ITOA_CONVERT_A_TO_F  1204
ITOA_DONE           1210
ITOA_LONG           116A
ITOA_LONGADDRESS    119C
ITOA_MOVE           111E
ITOA_NIBBLE_CONVERT  11F4
ITOA_WORD           114E
JSR_NOP_RTS         16A2
LASTDIGITCHECK      10C6
LF                  A
LINES_P_SCREEN      14
MEMORY_1110_LEFT    1476
MEMORY_1110_RIGHT   149A
N_LOWERCASE         6E
N_UPPERCASE         4E
ODD                 10F0
OP_0000_TABLE       14C2
OP_0100_TABLE       1522
OP_1100_TABLE       1582
OP_1101_TABLE       15E2
OP_1110_TABLE_REGISTER  1642
OP_ADD              19B4
OP_ADDA             19D0
OP_ADDI             1700
OP_ADDQ             1814
OP_AND              1998
OP_ASL              1A0C
OP_ASR              19F0
OP_BCC              1850
OP_BGT              186C
OP_BLE              1888
OP_BRA              1834
OP_BSR              18A4
OP_CLEAR_DATA       12EA
OP_CLEAR_DATA_LOOP  12F6
OP_CLR              1764
OP_CMP              193C
OP_DIVU             18E8
OP_FINISH           12E4
OP_JSR              17B8
OP_LEA              17F8
OP_LSL              1A44
OP_LSR              1A28
OP_MOVE             1744
OP_MOVEA            1720
OP_MOVEM            17D4
OP_MOVEQ            18C0
OP_MULS             1978
OP_MULU             1958
OP_NOP              1780
OP_OR               1908
OP_ROL              1A7C
OP_ROR              1A60
OP_RTS              179C
OP_SUB              1920
OP_SUBI             16E0
OP_TABLE            1300
OP_UNSUPPORTED      16D0
PROMPT_AGAIN        1D12
PROMPT_END          1050
PROMPT_START        102A
READ_END            105C
READ_START          103C
RIGHT12             C
RIGHT16             10
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT6              6
RIGHT8              8
RIGHT9              9
SECOND_NIBBLE       F00
SRC_MODE            18
SRC_REG             7
STACK               2000
START               1000
START_ADDRESS       1D93
START_DECODING      1218
START_IN            1D5A
TASK13              D
TASK14              E
TASK2               2
TASK5               5
TASK9               9
THIRD_NIBBLE        F0
USER_INST           1B7B
VALIDATE_END        106C
VALIDATE_START      104C
WELCOME             1B45
Y_LOWERCASE         79
Y_UPPERCASE         59
