00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/8/2020 1:54:18 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler for the Motorola MC68000 Microprocessor
00000000                             3  * Written by :  Avery Mortenson & Alan Luu
00000000                             4  * Date       :  2/12/2020
00000000                             5  * Description:  An inverse assembler (disassembler) that will 
00000000                             6  * convert a memory image of instructions and data back 
00000000                             7  * to the MC68000 assembly code and that will output the 
00000000                             8  * disassembled code to the display.
00000000                             9  *-----------------------------------------------------------
00001000                            10      ORG    $1000
00001000                            11  START:            
00001000                            12  *------------------------------------------------------------*
00001000                            13  * D0: used for the tasks
00001000                            14  * D1: used to hold the size of the input obtained. 
00001000                            15  * D5: used to store the starting and ending address 
00001000                            16  * temporarily before moving them to A4 and A6 correspondingly. 
00001000                            17  * D6: used to check the last digit to see if the input 
00001000                            18  * for the starting and ending address causes a bus error. 
00001000                            19  * A1: a pointer to the message to print out. 
00001000                            20  *------------------------------------------------------------*
00001000                            21  
00001000  103C 000E                 22  DISP_W      MOVE.B  #14,D0                  ; Display Welcome Message. 
00001004  43F9 000022EE             23              LEA     WELCOME,A1
0000100A  4E4F                      24              TRAP    #15
0000100C                            25  
0000100C                            26  * Put program code here
0000100C                            27  
0000100C  103C 000E                 28  DISP_UI         MOVE.B  #14,D0              ; Display User Instructions. 
00001010  43F9 00002324             29                  LEA     USER_INST,A1
00001016  4E4F                      30                  TRAP    #15    
00001018                            31  
00001018  4FF9 0000A000             32  PROMPT_START    LEA     stack, SP           ; SP = stack ($A0000)
0000101E  43F9 00002503             33                  LEA     START_IN,A1         ; Display starting address message
00001024  103C 000E                 34                  MOVE.B  #14,D0
00001028  4E4F                      35                  TRAP    #15       
0000102A                            36       
0000102A  43F9 0000253C             37  READ_START      LEA     START_ADDRESS,A1    ; Store user's starting address input
00001030  103C 0002                 38                  MOVE.B  #2,D0               ; Read user's input into A1; length is stored into D1
00001034  4E4F                      39                  TRAP    #15
00001036  1C3C 0000                 40                  MOVE.B  #0,D6               ; Used to indicate we are at start address
0000103A                            41  
0000103A  6000 0022                 42  VALIDATE_START  BRA     ATOI
0000103E                            43  
0000103E  43F9 00002520             44  PROMPT_END      LEA     END_IN,A1           ; Display starting address message
00001044  103C 000E                 45                  MOVE.B  #14,D0
00001048  4E4F                      46                  TRAP    #15            
0000104A  43F9 0000255C             47  READ_END        LEA     END_ADDRESS,A1      ; Store user's starting address input
00001050  103C 0002                 48                  MOVE.B  #2,D0               ; Read user's input into A1; length is stored into D1
00001054  4E4F                      49                  TRAP    #15
00001056  1C3C 0001                 50                  MOVE.B  #1,D6               ; Used to indicate we are at end address
0000105A                            51  
0000105A  6000 0002                 52  VALIDATE_END    BRA     ATOI
0000105E                            53                 
0000105E                            54  * D0 stores the value to pushed from A1.
0000105E                            55  
0000105E  1019                      56  ATOI            MOVE.B  (A1)+,D0    ; Move to next character in A1 and store in D0          
00001060  B03C 0030                 57                  CMP.B   #$30,D0
00001064  6D00 0040                 58                  BLT     INPUT_INVALID
00001068  B03C 0039                 59                  CMP.B   #$39,D0
0000106C  6E00 0016                 60                  BGT     ASCII_TO_HEX_LETTER
00001070  0400 0030                 61                  SUB.B   #$30,D0     ; Subtract by 30 to get the numbers 0-9
00001074  DA80                      62                  ADD.L   D0,D5
00001076  5341                      63                  SUBI    #1,D1       ; Decrement input's length to move to next character          
00001078  B23C 0000                 64                  CMP.B   #0,D1       ; Compare to see if we're at the last digit
0000107C  6700 0046                 65                  BEQ     LAST_DIGIT_CHECK
00001080  E98D                      66                  LSL.L   #4,D5
00001082  60DA                      67                  BRA     ATOI
00001084                            68  
00001084                            69    
00001084  B03C 0041                 70  ASCII_TO_HEX_LETTER     CMP.B   #$41,D0
00001088  6D00 001C                 71                          BLT     INPUT_INVALID
0000108C  B03C 0046                 72                          CMP.B   #$46, D0
00001090  6E00 0014                 73                          BGT     INPUT_INVALID 
00001094  0400 0031                 74                          SUB.B   #$31,D0     ; Subtract by 31 to get the numbers A-F
00001098  5D00                      75                          SUB.B   #6,D0
0000109A  DA80                      76                          ADD.L   D0,D5
0000109C  5341                      77                          SUBI    #1,D1
0000109E  6700 0024                 78                          BEQ     LAST_DIGIT_CHECK
000010A2  E98D                      79                          LSL.L   #4,D5
000010A4  60B8                      80                          BRA     ATOI     
000010A6                            81  
000010A6                            82                      
000010A6  43F9 00002290             83  INPUT_INVALID   LEA     ERROR_MESSAGE, A1   ; Display error message
000010AC  103C 000E                 84                  MOVE.B  #14, D0
000010B0  4E4F                      85                  TRAP    #15
000010B2  4206                      86                  CLR.B   D6
000010B4                            87                  
000010B4  BC3C 0000                 88                  CMP.B   #0,D6           ; When D6 is 0
000010B8  6700 FF5E                 89                  BEQ     PROMPT_START    ; Go back to start prompt
000010BC  BC3C 0001                 90                  CMP.B   #1,D6           ; When D6 is 1
000010C0  6700 FF7C                 91                  BEQ     PROMPT_END      ; Go back to end prompt
000010C4                            92  
000010C4                            93                            
000010C4  2E05                      94  LAST_DIGIT_CHECK    MOVE.L  D5, D7          ; D7 used as temporary storage
000010C6  E20F                      95                      LSR.B   #1, D7          ; Check for carry bit to see if last digit is odd
000010C8  6500 002E                 96                      BCS     LAST_DIGIT_ODD  ; branch when there is a carry; this indicates odd last digit 
000010CC  4287                      97                      CLR.L   D7
000010CE  BC3C 0000                 98                      CMP.B   #0,D6
000010D2  6700 000A                 99                      BEQ     COMPLETE_START  
000010D6  BC3C 0001                100                      CMP.B   #1,D6
000010DA  6700 000A                101                      BEQ     COMPLETE_END
000010DE                           102  
000010DE  2845                     103  COMPLETE_START      MOVEA.L D5, A4  ; A4 holds the starting address
000010E0  4285                     104                      CLR.L   D5 
000010E2  6000 FF5A                105                      BRA PROMPT_END
000010E6                           106  
000010E6  2C45                     107  COMPLETE_END        MOVEA.L D5, A6  ; A6 holds the ending address
000010E8  2A4C                     108                      MOVEA.L A4, A5  ; Store starting address into current address
000010EA                           109                      
000010EA                           110                      *Clear the data and address registers used to obtain the starting and ending address 
000010EA  4280                     111                      CLR.L   D0
000010EC  4285                     112                      CLR.L   D5
000010EE  4286                     113                      CLR.L   D6
000010F0  327C 0000                114                      MOVEA   #0, A1
000010F4  6000 017C                115                      BRA     START_DECODING  ; All inputs are valid, go to the decode process
000010F8                           116                      
000010F8  43F9 000022AE            117  LAST_DIGIT_ODD      LEA     ODD_ERROR_MESSAGE, A1 
000010FE  103C 000E                118                      MOVE.B  #14, D0
00001102  4E4F                     119                      TRAP    #15
00001104                           120                      
00001104  BC3C 0000                121                      CMP.B   #0,D6           ; When D6 is 0
00001108  6700 FF0E                122                      BEQ     PROMPT_START    ; Go back to start prompt
0000110C  BC3C 0001                123                      CMP.B   #1,D6           ; When D6 is 1
00001110  6700 FF2C                124                      BEQ     PROMPT_END      ; Go back to end prompt
00001114                           125  
00001114                           126  *--------------------------------------------------------------------------------------
00001114                           127  * param D2 data size to convert into ASCII
00001114                           128  * param A2 a pointer to decode_buf
00001114                           129  * param A5 the current address
00001114                           130  * itoa (D2, A2, A5) {
00001114                           131  * D0 byte data in ACII
00001114                           132  * D1 #sfhit
00001114                           133  * D7 long data to convert into ASCII
00001114                           134  * }
00001114                           135          
00001114                           136  ITOA                                ; convert integer to ASCII  
00001114  48E7 C000                137          MOVEM.L D0-D1,-(SP) 
00001118  B43C 0000                138          CMP.B   #%00, D2            ; byte
0000111C  6700 007E                139          BEQ     ITOA_BYTE
00001120  B43C 0001                140          CMP.B   #%01, D2            ; word
00001124  6700 0084                141          BEQ     ITOA_WORD
00001128  B43C 0002                142          CMP.B   #%10, D2            ; long
0000112C  6700 0098                143          BEQ     ITOA_LONG
00001130  4EF9 000011F8            144          JMP     ITOA_LONGADDRESS    ; long address
00001136                           145          
00001136                           146  ITOA_MOVE                           ; convert integer to ASCII
00001136  48E7 C000                147          MOVEM.L D0-D1,-(SP) 
0000113A  B43C 0001                148          CMP.B   #%01, D2            ; byte
0000113E  6700 005C                149          BEQ     ITOA_BYTE
00001142  B43C 0003                150          CMP.B   #%11, D2            ; word
00001146  6700 0062                151          BEQ     ITOA_WORD
0000114A  B43C 0002                152          CMP.B   #%10,D2             ; long
0000114E  6700 0076                153          BEQ     ITOA_LONG
00001152  4EF9 000011F8            154          JMP     ITOA_LONGADDRESS    ; long address
00001158                           155          
00001158                           156  ITOA_OPMODE                         ; convert integer to ASCII
00001158  48E7 C000                157          MOVEM.L D0-D1,-(SP) 
0000115C  B43C 0000                158          CMP.B   #%000,D2            ; When 0 then byte
00001160  6700 003A                159          BEQ     ITOA_BYTE
00001164  B43C 0004                160          CMP.B   #%100,D2            ; When 4 then byte
00001168  6700 0032                161          BEQ     ITOA_BYTE 
0000116C  B43C 0001                162          CMP.B   #%001,D2            ; When 1 then word
00001170  6700 0038                163          BEQ     ITOA_WORD
00001174  B43C 0003                164          CMP.B   #%011,D2            ; When 3 then word
00001178  6700 0030                165          BEQ     ITOA_WORD
0000117C  B43C 0005                166          CMP.B   #%101,D2            ; When 5 then word
00001180  6700 0028                167          BEQ     ITOA_WORD 
00001184  B43C 0002                168          CMP.B   #%010,D2            ; When 2 then long
00001188  6700 003C                169          BEQ     ITOA_LONG
0000118C  B43C 0006                170          CMP.B   #%110,D2            ; When 6 then long
00001190  6700 0034                171          BEQ     ITOA_LONG
00001194  B43C 0007                172          CMP.B   #%111,D2            ; When 7 then long
00001198  6700 002C                173          BEQ     ITOA_LONG
0000119C                           174          
0000119C                           175  ITOA_BYTE
0000119C  3E1D                     176          MOVE.W  (A5)+,D7
0000119E  4EB9 00001230            177          JSR     ITOA_BYTE_CONVERT
000011A4  4EF9 0000126C            178          JMP     ITOA_DONE
000011AA                           179          
000011AA                           180  ITOA_WORD
000011AA  3E15                     181          MOVE.W  (A5),D7
000011AC  123C 0008                182          MOVE.B  #right8, D1
000011B0  E26F                     183          LSR.W   D1,D7
000011B2  4EB9 00001230            184          JSR     ITOA_BYTE_CONVERT
000011B8  3E1D                     185          MOVE.W  (A5)+, D7
000011BA  4EB9 00001230            186          JSR     ITOA_BYTE_CONVERT
000011C0  4EF9 0000126C            187          JMP     ITOA_DONE
000011C6                           188          
000011C6                           189  ITOA_LONG
000011C6  3E15                     190          MOVE.W  (A5),D7
000011C8  123C 0008                191          MOVE.B  #right8, D1
000011CC  E26F                     192          LSR.W   D1, D7
000011CE  4EB9 00001230            193          JSR     ITOA_BYTE_CONVERT
000011D4  3E1D                     194          MOVE.W  (A5)+, D7
000011D6  4EB9 00001230            195          JSR     ITOA_BYTE_CONVERT
000011DC                           196          
000011DC  3E15                     197          MOVE.W  (A5),D7
000011DE  123C 0008                198          MOVE.B  #right8, D1
000011E2  E26F                     199          LSR.W   D1, D7
000011E4  4EB9 00001230            200          JSR     ITOA_BYTE_CONVERT
000011EA  3E1D                     201          MOVE.W  (A5)+, D7
000011EC  4EB9 00001230            202          JSR     ITOA_BYTE_CONVERT
000011F2  4EF9 0000126C            203          JMP     ITOA_DONE
000011F8                           204  
000011F8                           205  ITOA_LONGADDRESS
000011F8  3E0D                     206          MOVE.W  A5,D7
000011FA  123C 0018                207          MOVE.B  #right24,D1
000011FE  E26F                     208          LSR.W   D1,D7
00001200  4EB9 00001230            209          JSR     ITOA_BYTE_CONVERT
00001206  3E0D                     210          MOVE.W  A5,D7
00001208  123C 0010                211          MOVE.B  #right16,D1
0000120C  E26F                     212          LSR.W   D1,D7
0000120E  4EB9 00001230            213          JSR     ITOA_BYTE_CONVERT
00001214  3E0D                     214          MOVE.W  A5,D7
00001216  123C 0008                215          MOVE.B  #right8,D1
0000121A  E26F                     216          LSR.W   D1,D7
0000121C  4EB9 00001230            217          JSR     ITOA_BYTE_CONVERT
00001222  3E0D                     218          MOVE.W  A5,D7
00001224  4EB9 00001230            219          JSR     ITOA_BYTE_CONVERT   
0000122A  4EF9 0000126C            220          JMP     ITOA_DONE   
00001230                           221  
00001230                           222  ITOA_BYTE_CONVERT
00001230  3007                     223          MOVE.W  D7, D0 
00001232  0240 00F0                224          ANDI.W  #$F0, D0
00001236  123C 0004                225          MOVE.B  #right4, D1
0000123A  E268                     226          LSR.W   D1, D0
0000123C  4EB9 00001250            227          JSR     ITOA_NIBBLE_CONVERT
00001242                           228          
00001242  3007                     229          MOVE.W  D7, D0
00001244  0240 000F                230          ANDI.W  #$0F, D0
00001248  4EB9 00001250            231          JSR     ITOA_NIBBLE_CONVERT
0000124E  4E75                     232          RTS
00001250                           233          
00001250                           234  ITOA_NIBBLE_CONVERT
00001250  B03C 0009                235          CMP.B   #9, D0
00001254  6E00 000A                236          BGT     ITOA_CONVERT_A_TO_F
00001258  0600 0030                237          ADD.B   #$30, D0
0000125C  14C0                     238          MOVE.B  D0, (A2)+   ; store D0 into decode buffer
0000125E  4E75                     239          RTS
00001260                           240          
00001260                           241  ITOA_CONVERT_A_TO_F
00001260  0400 000A                242          SUBI.B  #10, D0
00001264  0600 0041                243          ADDI.B  #$41, D0
00001268  14C0                     244          MOVE.B  D0, (A2)+   ; store D0 into decode buffer
0000126A  4E75                     245          RTS
0000126C                           246  
0000126C                           247  ITOA_DONE
0000126C  4CDF 0003                248          MOVEM.L (SP)+, D0-D1
00001270  4E75                     249          RTS
00001272                           250  
00001272                           251  *-------------------------------------------------------------------------------*
00001272                           252  START_DECODING
00001272  4282                     253          CLR.L   D2
00001274                           254          
00001274                           255  DECODING_ITERATION
00001274                           256          ;decoding the current address
00001274  4EB9 000012FC            257          JSR     DECODE_MEMORY
0000127A  103C 000D                258          MOVE.B  #task13, D0
0000127E  43F9 00005000            259          LEA     decoded_buffer, A1
00001284  4E4F                     260          TRAP    #15
00001286                           261          
00001286                           262          ;check if decoding has finished or if the screen is filled 
00001286  BDCD                     263          CMP.L   A5, A6
00001288  6F00 0022                264          BLE     CONTINUE_OR_END     ; If A6-A5 <= 0, go to CONTINUE_OR_END 
0000128C                           265          
0000128C                           266          ;have yet to reach the ending address
0000128C  5202                     267          ADDQ.B  #1, D2              ; D2 (screen_line_counter)++
0000128E  B43C 0014                268          CMP.B   #lines_p_screen, D2
00001292  6C00 0004                269          BGE     DECODE_PAUSE
00001296                           270          ;not yet reached the maximum lines per screen. 
00001296  60DC                     271          BRA     DECODING_ITERATION
00001298                           272  
00001298                           273  DECODE_PAUSE
00001298  103C 000E                274          MOVE.B  #task14, D0
0000129C  43F9 0000249E            275          LEA     ENTER_PROMPT, A1
000012A2  4E4F                     276          TRAP    #15
000012A4  103C 0005                277          MOVE.B  #task5, D0
000012A8  4E4F                     278          TRAP    #15
000012AA  60C6                     279          BRA     START_DECODING
000012AC                           280  
000012AC                           281  CONTINUE_OR_END
000012AC  103C 000E                282          MOVE.B  #task14, D0
000012B0  43F9 000024BB            283          LEA     PROMPT_AGAIN, A1
000012B6  4E4F                     284          TRAP    #15
000012B8                           285          
000012B8  103C 0002                286          MOVE.B  #task2, D0
000012BC  43F9 00002188            287          LEA     ascii_y_n, A1
000012C2  4E4F                     288          TRAP    #15
000012C4                           289          
000012C4  1639 00002188            290          MOVE.B  ascii_y_n, D3
000012CA  0C03 0059                291          CMPI.B  #y_uppercase, D3
000012CE  6700 FD48                292          BEQ     PROMPT_START
000012D2  0C03 0079                293          CMPI.B  #y_lowercase, D3
000012D6  6700 FD40                294          BEQ     PROMPT_START
000012DA  0C03 004E                295          CMPI.B  #n_uppercase, D3
000012DE  6700 000C                296          BEQ     EXIT
000012E2  0C03 006E                297          CMPI.B  #n_lowercase, D3
000012E6  6700 0004                298          BEQ     EXIT
000012EA  60C0                     299          BRA     CONTINUE_OR_END 
000012EC                           300          
000012EC                           301  EXIT
000012EC  103C 000E                302          MOVE.B  #task14, D0
000012F0  43F9 000024DE            303          LEA     EXIT_PROMPT, A1
000012F6  4E4F                     304          TRAP    #15  
000012F8  6000 0E8A                305          BRA     DONE             
000012FC                           306  *---------------------------------------------------------------------------------*
000012FC                           307  * D0: the current instruction. 
000012FC                           308  * D1: used as temp storage
000012FC                           309  * D2: data size 
000012FC                           310  * D3: loop counter for the amount of lines per screen. 
000012FC                           311  * D4: 
000012FC                           312  * D5: #shifts
000012FC                           313  * D6: store first nibble
000012FC                           314  * D7: 
000012FC                           315  * A0: 
000012FC                           316  * A1: A pointer to the message to print out. 
000012FC                           317  * A2: A pointer to the decode_buffer. 
000012FC                           318  * A3: 
000012FC                           319  * A4: Store the starting address and increment to the ending address. 
000012FC                           320  * A5: The current address. 
000012FC                           321  * A6: Store the ending address. 
000012FC                           322  * A7: Stack pointer. 
000012FC                           323  *---------------------------------------------------------------------------------*                             
000012FC                           324  DECODE_MEMORY       
000012FC  48E7 2002                325          MOVEM.L D2/A6, -(SP)
00001300                           326                  
00001300                           327          ;zero clear the decode_buffer
00001300  4EB9 00001338            328          JSR     OP_CLEAR_DATA
00001306  45F9 00005000            329          LEA     decoded_buffer, A2  Load decode buffer into A2
0000130C                           330                  
0000130C                           331          ;print out the current address
0000130C  7403                     332          MOVE.L  #$0003, D2
0000130E  4EB8 1114                333          JSR      ITOA
00001312                           334          
00001312  14FC 0009                335          MOVE.B  #$9, (A2)+  ; Add space after long address
00001316                           336                  
00001316                           337          ;load the next instruction and jump to the opcode table entry
00001316  41F9 0000134E            338          LEA     OP_TABLE, A0
0000131C  4280                     339          CLR.L   D0
0000131E  301D                     340          MOVE.W  (A5)+, D0       ; Store A5's value into D0, then increment A5
00001320  2200                     341          MOVE.L  D0, D1          ; Store A5's value from D0 into D1
00001322  1A3C 000C                342          MOVE.B  #right12, D5    ; Store 12 into D5
00001326  EA69                     343          LSR.W   D5, D1          ; Shift first nibble into LSB position
00001328  2C01                     344          MOVE.L  D1, D6          ; Store first nibble into D6
0000132A  C2FC 0006                345          MULU    #6, D1          ; Multiply 6 to D1
0000132E  4EF0 1000                346          JMP     0(A0, D1)       ; Go to displacement (A0 + D1 * 6)      
00001332                           347  OP_FINISH
00001332  4CDF 4004                348          MOVEM.L (SP)+, D2/A6,
00001336  4E75                     349          RTS
00001338                           350  
00001338                           351  *------------------------------------------------------------------------------------*
00001338                           352  *Clear the 32 bits within the decoded_buffer       
00001338                           353  OP_CLEAR_DATA
00001338  4283                     354          CLR.L   D3
0000133A  163C 0040                355          MOVE.B  #buffer_size, D3
0000133E  45F9 00005000            356          LEA     decoded_buffer, A2
00001344                           357          
00001344                           358  OP_CLEAR_DATA_LOOP
00001344  14FC 0000                359          MOVE.B  #0, (A2)+
00001348  5343                     360          SUBI    #1, D3
0000134A  6EF8                     361          BGT     OP_CLEAR_DATA_LOOP
0000134C  4E75                     362          RTS
0000134E                           363  
0000134E                           364  *------------------------------------------------------------------------------------*
0000134E                           365  OP_TABLE
0000134E  4EF9 000013AE            366          JMP     code0000    ; ADDI.bwl/ ANDI.bwl / CMPI.bwl / EORI.bwl / ORI.bwl / SUBI.bwl 
00001354  4EF9 000013C8            367          JMP     code0001    ; MOVE.b
0000135A  4EF9 000013CC            368          JMP     code0010    ; MOVE.l / MOVEA.l
00001360  4EF9 000013E4            369          JMP     code0011    ; MOVE.w / MOVEA.w
00001366  4EF9 000013FC            370          JMP     code0100    ; CLR.bwl / JMP / JSR / LEA / MOVEM.wl / NOP / NOT.bwl / RTS / STOP / TRAP
0000136C  4EF9 00001416            371          JMP     code0101    ; ADDQ.bwl / SUBQ.bwl / Scc / Dbcc
00001372  4EF9 0000141A            372          JMP     code0110    ; BRA.bw / BSR.bw / Bcc.bw
00001378  4EF9 00001432            373          JMP     code0111    ; MOVEQ
0000137E  4EF9 00001436            374          JMP     code1000    ; DIVS / DIVU / CR.bwl
00001384  4EF9 0000144E            375          JMP     code1001    ; SUB.bwl / SUBA.wl
0000138A  4EF9 00001452            376          JMP     code1010    ;   [unassigned]
00001390  4EF9 00001456            377          JMP     code1011    ; CMP.bwl / CMPA.wl / EOR.bwl
00001396  4EF9 0000145A            378          JMP     code1100    ; MULS / MULU / AND.bwl
0000139C  4EF9 00001474            379          JMP     code1101    ; ADD.bwl / ADDA.wl / ADDX.bwl
000013A2  4EF9 0000148E            380          JMP     code1110    ; ASL.bwl / ASR.bwl / LSL.bwl / LSR.bwl / ROR.bwl / ROL.bwl
000013A8  4EF9 0000150C            381          JMP     code1111    ;   [unassigned]
000013AE                           382          
000013AE                           383  code0000                            ; Opcodes ADDI and SUBI
000013AE  2200                     384          MOVE.L  D0,D1               ; D0 is current instruction word
000013B0  0241 0F00                385          ANDI.W  #second_nibble,D1   ; Extract 2nd nibble from instruction word
000013B4  1A3C 0008                386          MOVE.B  #right8,D5          ; Used to shift 8 times to right
000013B8  EA69                     387          LSR.W   D5,D1               ; Shift nibble into LSB position
000013BA  C2FC 0006                388          MULU    #6, D1              ; Set displacement 
000013BE  41F9 00001510            389          LEA     OP_0000_TABLE,A0    ; Load table into A0
000013C4  4EF0 1000                390          JMP     0(A0,D1)            ; go to displacement (A0 + D1 * 6)
000013C8                           391  
000013C8                           392  code0001                            ; Opcode MOVE.B
000013C8  6000 03C8                393          BRA     OP_MOVE             ; Go to opcode MOVE
000013CC                           394  
000013CC                           395  code0010                            ; Opcodes MOVE.L and MOVEA.L 
000013CC  2200                     396          MOVE.L  D0,D1               ; D0 is current instruction word
000013CE  0241 01C0                397          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000013D2  1A3C 0006                398          MOVE.B  #right6,D5          ; Used to shift 6 times to right
000013D6  EA69                     399          LSR.W   D5,D1               ; Shift dst mode into LSB position
000013D8  B23C 0001                400          CMP.B   #1, D1              ; When 001 in destination mode
000013DC  6700 0390                401          BEQ     OP_MOVEA            ; Go to opcode MOVEA
000013E0  6000 03B0                402          BRA     OP_MOVE             ; Otherwise, go to opcode MOVE
000013E4                           403  
000013E4                           404  code0011                            ; Opcodes MOVE.W and MOVEA.W 
000013E4  2200                     405          MOVE.L  D0,D1               ; D0 is current instruction word
000013E6  0241 01C0                406          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000013EA  1A3C 0006                407          MOVE.B  #right6,D5          ; Used to shift 6 times to right
000013EE  EA69                     408          LSR.W   D5,D1               ; Shift dst mode into LSB position
000013F0  B23C 0001                409          CMP.B   #1, D1              ; When 001 in destination mode
000013F4  6700 0378                410          BEQ     OP_MOVEA            ; Go to opcode MOVEA
000013F8  6000 0398                411          BRA     OP_MOVE             ; Otherwise, go to opcode MOVE
000013FC                           412  
000013FC                           413  code0100                            ; Opcodes CLR, JSR, LEA, MOVEM, NOP, RTS
000013FC  2200                     414          MOVE.L  D0,D1               ; D0 is current instruction word
000013FE  0241 0F00                415          ANDI.W  #second_nibble,D1   ; Extract 2nd nibble from instruction word
00001402  1A3C 0008                416          MOVE.B  #right8,D5          ; Used to shift 8 times to right
00001406  EA69                     417          LSR.W   D5,D1               ; Shift nibble into LSB position
00001408  C2FC 0006                418          MULU    #6, D1              ; Set displacement 
0000140C  41F9 00001570            419          LEA     OP_0100_TABLE,A0    ; Load table into A0
00001412  4EF0 1000                420          JMP     0(A0,D1)            ; go to displacement (A0 + D1 * 6)
00001416                           421  
00001416                           422  code0101                            ; Opcode ADDQ.B/W/L
00001416  6000 043E                423          BRA     OP_ADDQ             ; Go to opcode ADDQ
0000141A                           424  
0000141A                           425  code0110                            ; Opcodes BRA and BSR
0000141A  2200                     426          MOVE.L  D0,D1               ; D0 is current instruction word
0000141C  0241 0F00                427          ANDI.W  #second_nibble,D1   ; Extract 2nd 4 bits from instruction word
00001420  1A3C 0008                428          MOVE.B  #right8,D5          ; Used to shift 8 times to right
00001424  EA69                     429          LSR.W   D5,D1               ; Shift nibble into LSB position
00001426  B23C 0000                430          CMP.B   #0, D1              ; When 0000 in destination mode
0000142A  6700 044A                431          BEQ     OP_BRA              ; Go to opcode BRA
0000142E  6000 04B6                432          BRA     OP_BSR              ; Otherwise, go to opcode BSR
00001432                           433  
00001432                           434  code0111                            ; Opcode MOVEQ
00001432  6000 04CE                435          BRA     OP_MOVEQ            ; Go to opcode MOVEQ
00001436                           436  
00001436                           437  code1000                            ; Opcodes DIVU word and OR.B/W/L
00001436  2200                     438          MOVE.L  D0,D1               ; D0 is current instruction word
00001438  0241 01C0                439          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
0000143C  1A3C 0006                440          MOVE.B  #right6,D5          ; Used to shift 6 times to right
00001440  EA69                     441          LSR.W   D5,D1               ; Shift dst mode into LSB position
00001442  B23C 0003                442          CMP.B   #3, D1              ; When 011 in destination mode
00001446  6700 04E2                443          BEQ     OP_DIVU             ; Go to opcode DIVU word
0000144A  6000 04FE                444          BRA     OP_OR               ; Otherwise, go to opcode OR
0000144E                           445  
0000144E                           446  code1001                            ; Opcode SUB.B/W/L
0000144E  6000 0512                447          BRA     OP_SUB              ; Go to opcode SUB   
00001452                           448  
00001452                           449  code1010                            ; Opcode not supported 
00001452  6000 02CA                450          BRA     OP_UNSUPPORTED      ; Go to opcode unsupported   
00001456                           451       
00001456                           452  code1011                            ; Opcode CMP.B/W/L
00001456  6000 0526                453          BRA     OP_CMP              ; Go to opcode CMP
0000145A                           454  
0000145A                           455  code1100                            ; Opcodes MULS, MULU, AND.B/W/L
0000145A  2200                     456          MOVE.L  D0,D1               ; D0 is current instruction word
0000145C  0241 01C0                457          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
00001460  1A3C 0006                458          MOVE.B  #right6,D5          ; Used to shift 6 times to right
00001464  EA69                     459          LSR.W   D5,D1               ; Shift dst mode into LSB position
00001466  C2FC 0006                460          MULU    #6, D1              ; Set displacement 
0000146A  41F9 000015D0            461          LEA     OP_1100_TABLE,A0    ; Load table into A0
00001470  4EF0 1000                462          JMP     0(A0,D1)            ; Go to displacement (A0 + D1 * 6)
00001474                           463  
00001474                           464  code1101                            ; Opcodes ADD.B/W/L, ADDA.B/W/L
00001474  2200                     465          MOVE.L  D0,D1               ; D0 is current instruction word
00001476  0241 01C0                466          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
0000147A  1A3C 0006                467          MOVE.B  #right6,D5          ; Used to shift 6 times to right
0000147E  EA69                     468          LSR.W   D5,D1               ; Shift dst mode into LSB position
00001480  C2FC 0006                469          MULU    #6, D1              ; Set displacement 
00001484  41F9 00001630            470          LEA     OP_1101_TABLE,A0    ; Load table into A0
0000148A  4EF0 1000                471          JMP     0(A0,D1)            ; Go to displacement (A0 + D1 * 6)
0000148E                           472  
0000148E                           473  code1110                            ; Opcodes ASL.B/W/L, ASR.B/W/L, LSL.B/W/L, LSR.B/W/L, ROL.B/W/L, ROR.B/W/L   
0000148E  2200                     474          MOVE.L  D0,D1               ; D0 is current instruction word
00001490  0241 01C0                475          ANDI.W  #dst_mode,D1        ; Extract 8-6 bits from instruction word
00001494  1A3C 0006                476          MOVE.B  #right6,D5          ; Used to shift 6 times to right
00001498  EA69                     477          LSR.W   D5,D1               ; Shift dst mode into LSB position
0000149A                           478     
0000149A                           479          ; Check Memory Shifts
0000149A  B23C 0007                480          CMP.B   #7, D1              ; When 111
0000149E  6700 0024                481          BEQ     MEMORY_1110_LEFT    ; Go to Memory Shift Left Side
000014A2                           482      
000014A2  B23C 0003                483          CMP.B   #3, D1              ; When 011
000014A6  6700 0040                484          BEQ     MEMORY_1110_RIGHT   ; Go Memory Shift Right Side
000014AA                           485      
000014AA                           486          ; Check Register Shifts
000014AA  2200                     487          MOVE.L  D0,D1                       ; D0 is current instruction word
000014AC  0241 0038                488          ANDI.W  #src_mode,D1                ; Extract 5-3 bits from instruction word
000014B0  1A3C 0003                489          MOVE.B  #right3,D5                  ; Used to shift 3 times to right
000014B4  EA69                     490          LSR.W   D5,D1                       ; Shift 5-3 bits into LSB position
000014B6  C2FC 0006                491          MULU    #6, D1                      ; Set displacement 
000014BA  41F9 00001690            492          LEA     OP_1110_TABLE_REGISTER,A0   ; Load table into A0
000014C0  4EF0 1000                493          JMP     0(A0,D1)                    ; go to displacement (A0 + xxxx * 6)
000014C4                           494  
000014C4                           495  MEMORY_1110_LEFT    
000014C4  2200                     496          MOVE.L  D0,D1               ; D0 is current instruction word
000014C6  0241 0E00                497          ANDI.W  #dst_reg,D1         ; Extract 11-9 position from instruction word
000014CA  1A3C 0009                498          MOVE.B  #right9,D5          ; Used to shift 9 times to right
000014CE  EA69                     499          LSR.W   D5,D1               ; Shift dst reg into LSB position
000014D0  B23C 0000                500          CMP.B   #0,D1               ; When D1 is 0
000014D4  6700 0578                501          BEQ     OP_ASL              ; Go to opcode ASL
000014D8  B23C 0001                502          CMP.B   #1, D1              ; when D1 is 1
000014DC  6700 05A8                503          BEQ     OP_LSL              ; Go to opcode LSL
000014E0  B23C 0003                504          CMP.B   #3, D1              ; When D1 is 3
000014E4  6700 05D8                505          BEQ     OP_ROL              ; Go to opcode ROL
000014E8                           506  
000014E8                           507  MEMORY_1110_RIGHT
000014E8  2200                     508          MOVE.L  D0,D1               ; D0 is current instruction word
000014EA  0241 0E00                509          ANDI.W  #dst_reg,D1         ; Extract 11-9 position from instruction word
000014EE  1A3C 0009                510          MOVE.B  #right9,D5          ; Used to shift 9 times to right
000014F2  EA69                     511          LSR.W   D5,D1               ; Shift dst reg into LSB position
000014F4  B23C 0000                512          CMP.B   #0,D1               ; When D1 is 0
000014F8  6700 0538                513          BEQ     OP_ASR              ; Go to opcode ASR
000014FC  B23C 0001                514          CMP.B   #1, D1              ; when D1 is 1
00001500  6700 0568                515          BEQ     OP_LSR              ; Go to opcode LSR
00001504  B23C 0003                516          CMP.B   #3, D1              ; When D1 is 3
00001508  6700 0598                517          BEQ     OP_ROR              ; Go to opcode ROR
0000150C                           518  
0000150C                           519  code1111                            ; Opcode not supported 
0000150C  6000 0210                520          BRA     OP_UNSUPPORTED      ; Go to opcode unsupported   
00001510                           521           
00001510                           522  OP_0000_TABLE
00001510  4EF9 0000171E            523          JMP     OP_UNSUPPORTED  ; 0 Go to opcode unsupported  
00001516  4EF9 0000171E            524          JMP     OP_UNSUPPORTED  ; 1 Go to opcode unsupported  
0000151C  4EF9 0000171E            525          JMP     OP_UNSUPPORTED  ; 2 Go to opcode unsupported  
00001522  4EF9 0000171E            526          JMP     OP_UNSUPPORTED  ; 3 Go to opcode unsupported  
00001528  4EF9 0000172E            527          JMP     OP_SUBI         ; 4 Go to opcode SUBI
0000152E  4EF9 0000171E            528          JMP     OP_UNSUPPORTED  ; 5 Go to opcode unsupported  
00001534  4EF9 0000174E            529          JMP     OP_ADDI         ; 6 Go to opcode ADDI
0000153A  4EF9 0000171E            530          JMP     OP_UNSUPPORTED  ; 7 Go to opcode unsupported  
00001540  4EF9 0000171E            531          JMP     OP_UNSUPPORTED  ; 8 Go to opcode unsupported  
00001546  4EF9 0000171E            532          JMP     OP_UNSUPPORTED  ; 9 Go to opcode unsupported  
0000154C  4EF9 0000171E            533          JMP     OP_UNSUPPORTED  ; A Go to opcode unsupported  
00001552  4EF9 0000171E            534          JMP     OP_UNSUPPORTED  ; B Go to opcode unsupported  
00001558  4EF9 0000171E            535          JMP     OP_UNSUPPORTED  ; C Go to opcode unsupported  
0000155E  4EF9 0000171E            536          JMP     OP_UNSUPPORTED  ; D Go to opcode unsupported  
00001564  4EF9 0000171E            537          JMP     OP_UNSUPPORTED  ; E Go to opcode unsupported  
0000156A  4EF9 0000171E            538          JMP     OP_UNSUPPORTED  ; F Go to opcode unsupported  
00001570                           539      
00001570                           540  OP_0100_TABLE
00001570  4EF9 0000171E            541          JMP     OP_UNSUPPORTED      ; 0 Go to opcode unsupported  
00001576  4EF9 0000183A            542          JMP     OP_LEA              ; 1 Go to opcode LEA
0000157C  4EF9 000017B2            543          JMP     OP_CLR              ; 2 Go to opcode CLR
00001582  4EF9 0000183A            544          JMP     OP_LEA              ; 3 Go to opcode LEA
00001588  4EF9 0000171E            545          JMP     OP_UNSUPPORTED      ; 4 Go to opcode unsupported  
0000158E  4EF9 0000183A            546          JMP     OP_LEA              ; 5 Go to opcode LEA
00001594  4EF9 0000174E            547          JMP     OP_ADDI             ; 6 Go to opcode ADDI
0000159A  4EF9 0000183A            548          JMP     OP_LEA              ; 7 Go to opcode LEA
000015A0  4EF9 00001816            549          JMP     OP_MOVEM            ; 8 Go to opcode MOVEM
000015A6  4EF9 0000183A            550          JMP     OP_LEA              ; 9 Go to opcode LEA
000015AC  4EF9 0000171E            551          JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
000015B2  4EF9 0000183A            552          JMP     OP_LEA              ; B Go to opcode LEA
000015B8  4EF9 00001816            553          JMP     OP_MOVEM            ; C Go to opcode MOVEM
000015BE  4EF9 0000183A            554          JMP     OP_LEA              ; D Go to opcode LEA
000015C4  4EF9 000016F0            555          JMP     JSR_NOP_RTS         ; E Go to opcode JSR, NOP, or RTS
000015CA  4EF9 0000171E            556          JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
000015D0                           557      
000015D0                           558  OP_1100_TABLE
000015D0  4EF9 000019DA            559          JMP     OP_AND              ; 0 Go to opcode AND 
000015D6  4EF9 000019DA            560          JMP     OP_AND              ; 1 Go to opcode AND
000015DC  4EF9 000019DA            561          JMP     OP_AND              ; 2 Go to opcode AND
000015E2  4EF9 0000199A            562          JMP     OP_MULU             ; 3 Go to opcode MULU
000015E8  4EF9 000019DA            563          JMP     OP_AND              ; 4 Go to opcode AND 
000015EE  4EF9 000019DA            564          JMP     OP_AND              ; 5 Go to opcode AND
000015F4  4EF9 000019DA            565          JMP     OP_AND              ; 6 Go to opcode AND
000015FA  4EF9 000019BA            566          JMP     OP_MULS             ; 7 Go to opcode MULS
00001600  4EF9 0000171E            567          JMP     OP_UNSUPPORTED      ; 8 Go to opcode unsupported  
00001606  4EF9 0000171E            568          JMP     OP_UNSUPPORTED      ; 9 Go to opcode unsupported  
0000160C  4EF9 0000171E            569          JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
00001612  4EF9 0000171E            570          JMP     OP_UNSUPPORTED      ; B Go to opcode unsupported  
00001618  4EF9 0000171E            571          JMP     OP_UNSUPPORTED      ; C Go to opcode unsupported  
0000161E  4EF9 0000171E            572          JMP     OP_UNSUPPORTED      ; D Go to opcode unsupported  
00001624  4EF9 0000171E            573          JMP     OP_UNSUPPORTED      ; E Go to opcode unsupported  
0000162A  4EF9 0000171E            574          JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
00001630                           575      
00001630                           576  OP_1101_TABLE
00001630  4EF9 000019F6            577          JMP     OP_ADD              ; 0 Go to opcode ADD 
00001636  4EF9 000019F6            578          JMP     OP_ADD              ; 1 Go to opcode ADD
0000163C  4EF9 000019F6            579          JMP     OP_ADD              ; 2 Go to opcode ADD
00001642  4EF9 00001A12            580          JMP     OP_ADDA             ; 3 Go to opcode ADDA
00001648  4EF9 000019F6            581          JMP     OP_ADD              ; 4 Go to opcode ADD 
0000164E  4EF9 000019F6            582          JMP     OP_ADD              ; 5 Go to opcode ADD
00001654  4EF9 000019F6            583          JMP     OP_ADD              ; 6 Go to opcode ADD
0000165A  4EF9 00001A12            584          JMP     OP_ADDA             ; 7 Go to opcode ADDA
00001660  4EF9 0000171E            585          JMP     OP_UNSUPPORTED      ; 8 Go to opcode unsupported  
00001666  4EF9 0000171E            586          JMP     OP_UNSUPPORTED      ; 9 Go to opcode unsupported  
0000166C  4EF9 0000171E            587          JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
00001672  4EF9 0000171E            588          JMP     OP_UNSUPPORTED      ; B Go to opcode unsupported  
00001678  4EF9 0000171E            589          JMP     OP_UNSUPPORTED      ; C Go to opcode unsupported  
0000167E  4EF9 0000171E            590          JMP     OP_UNSUPPORTED      ; D Go to opcode unsupported  
00001684  4EF9 0000171E            591          JMP     OP_UNSUPPORTED      ; E Go to opcode unsupported  
0000168A  4EF9 0000171E            592          JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
00001690                           593      
00001690                           594  OP_1110_TABLE_REGISTER
00001690  4EF9 00001A32            595          JMP     OP_ASR              ; 0 Go to opcode ASR
00001696  4EF9 00001A6A            596          JMP     OP_LSR              ; 1 Go to opcode LSR
0000169C  4EF9 0000171E            597          JMP     OP_UNSUPPORTED      ; 2 Go to opcode unsupported  
000016A2  4EF9 00001AA2            598          JMP     OP_ROR              ; 3 Go to opcode ROR
000016A8  4EF9 00001A4E            599          JMP     OP_ASL              ; 4 Go to opcode ASL 
000016AE  4EF9 00001A86            600          JMP     OP_LSL              ; 5 Go to opcode LSL
000016B4  4EF9 0000171E            601          JMP     OP_UNSUPPORTED      ; 6 Go to opcode unsupported 
000016BA  4EF9 00001ABE            602          JMP     OP_ROL              ; 7 Go to opcode ROL
000016C0  4EF9 0000171E            603          JMP     OP_UNSUPPORTED      ; 8 Go to opcode unsupported  
000016C6  4EF9 0000171E            604          JMP     OP_UNSUPPORTED      ; 9 Go to opcode unsupported  
000016CC  4EF9 0000171E            605          JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
000016D2  4EF9 0000171E            606          JMP     OP_UNSUPPORTED      ; B Go to opcode unsupported  
000016D8  4EF9 0000171E            607          JMP     OP_UNSUPPORTED      ; C Go to opcode unsupported  
000016DE  4EF9 0000171E            608          JMP     OP_UNSUPPORTED      ; D Go to opcode unsupported  
000016E4  4EF9 0000171E            609          JMP     OP_UNSUPPORTED      ; E Go to opcode unsupported  
000016EA  4EF9 0000171E            610          JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
000016F0                           611  
000016F0                           612  JSR_NOP_RTS
000016F0  2200                     613          MOVE.L  D0,D1               ; D0 is current instruction word
000016F2  0241 01C0                614          ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000016F6  1A3C 0006                615          MOVE.B  #right6,D5          ; Used to shift 6 times to right
000016FA  EA69                     616          LSR.W   D5,D1               ; Shift dst mode into LSB position
000016FC  B23C 0002                617          CMP.B   #2, D1              ; When 010 in destination mode
00001700  6700 00F8                618          BEQ     OP_JSR              ; Go to opcode JSR
00001704  2200                     619          MOVE.L  D0,D1               ; D0 is current instruction word
00001706  0241 0007                620          ANDI.W  #src_reg,D1         ; Extract src reg position from instruction word
0000170A  B23C 0001                621          CMP.B   #1,D1               ; When 001 in src register
0000170E  6700 00BE                622          BEQ     OP_NOP              ; Go to opcode NOP
00001712  B23C 0005                623          CMP.B   #5,D1               ; When 005 in src register
00001716  6700 00D2                624          BEQ     OP_RTS              ; Go to opcode RTS
0000171A  6000 0002                625          BRA     OP_UNSUPPORTED      ; Otherwise, go to opcode unsupported 
0000171E                           626  
0000171E                           627  OP_UNSUPPORTED
0000171E  43F9 00002275            628          LEA     OPCODE_INVALID,A1 
00001724  103C 000E                629          MOVE.B  #14,D0
00001728  4E4F                     630          TRAP    #15
0000172A  6000 0A58                631          BRA     DONE
0000172E                           632          
0000172E                           633  *----------------------------------------------------------------------------------------------*
0000172E                           634  * param D0 the current instruction in word
0000172E                           635  * param D1 the EA type
0000172E                           636  * param A2 a pointer to the decode_buffer
0000172E                           637  * param A5 current address
0000172E                           638  * ea_start(D0, D1, A2, A5){
0000172E                           639  * D2: size
0000172E                           640  * D3: src mode, dst mode
0000172E                           641  * D4: src regs, dst regs
0000172E                           642  * D5: #shifts
0000172E                           643  * D7: immediate data
0000172E                           644  * A0: EA_TYPE_TABLE
0000172E                           645  *       0 = ea_immediate
0000172E                           646  * }
0000172E                           647  
0000172E                           648  *----------------------------------------------------------------------------------------------*
0000172E                           649  * First 4 bits: 0000
0000172E                           650  
0000172E                           651  OP_SUBI
0000172E  14FC 0053                652          MOVE.B  #'S',(A2)+
00001732  14FC 0055                653          MOVE.B  #'U',(A2)+
00001736  14FC 0042                654          MOVE.B  #'B',(A2)+
0000173A  14FC 0049                655          MOVE.B  #'I',(A2)+
0000173E  223C 00000000            656          MOVE.L  #ea_type_immediate,D1
00001744  4EB9 00001ADA            657          JSR     EA_START
0000174A  4EF8 1332                658          JMP     OP_FINISH
0000174E                           659          
0000174E                           660  OP_ADDI
0000174E  14FC 0041                661          MOVE.B  #'A',(A2)+
00001752  14FC 0044                662          MOVE.B  #'D',(A2)+
00001756  14FC 0044                663          MOVE.B  #'D',(A2)+
0000175A  14FC 0049                664          MOVE.B  #'I',(A2)+
0000175E  223C 00000000            665          MOVE.L  #ea_type_immediate,D1
00001764  4EB9 00001ADA            666          JSR     EA_START
0000176A  4EF8 1332                667          JMP     OP_FINISH
0000176E                           668  
0000176E                           669  *-----------------------------------------------------------------------------------------------*
0000176E                           670  * First 4 bits: 0001
0000176E                           671  OP_MOVEA
0000176E  14FC 004D                672          MOVE.B  #'M',(A2)+
00001772  14FC 004F                673          MOVE.B  #'O',(A2)+
00001776  14FC 0056                674          MOVE.B  #'V',(A2)+
0000177A  14FC 0045                675          MOVE.B  #'E',(A2)+
0000177E  14FC 0041                676          MOVE.B  #'A',(A2)+
00001782  223C 00000002            677          MOVE.L  #ea_type_movea,D1
00001788  4EB9 00001ADA            678          JSR     EA_START
0000178E  4EF8 1332                679          JMP     OP_FINISH
00001792                           680  
00001792                           681  *------------------------------------------------------------------------------------------------*
00001792                           682  * First 4 bits: 0011
00001792                           683  OP_MOVE
00001792  14FC 004D                684          MOVE.B  #'M',(A2)+
00001796  14FC 004F                685          MOVE.B  #'O',(A2)+
0000179A  14FC 0056                686          MOVE.B  #'V',(A2)+
0000179E  14FC 0045                687          MOVE.B  #'E',(A2)+
000017A2  223C 00000001            688          MOVE.L  #ea_type_move,D1
000017A8  4EB9 00001ADA            689          JSR     EA_START
000017AE  4EF8 1332                690          JMP     OP_FINISH
000017B2                           691  
000017B2                           692  *------------------------------------------------------------------------------------------------*
000017B2                           693  * First 4 bits: 0100
000017B2                           694  OP_CLR
000017B2  14FC 0043                695          MOVE.B  #'C',(A2)+
000017B6  14FC 004C                696          MOVE.B  #'L',(A2)+
000017BA  14FC 0052                697          MOVE.B  #'R',(A2)+
000017BE  223C 00000004            698          MOVE.L  #ea_type_dstonly,D1
000017C4  4EB9 00001ADA            699          JSR     EA_START
000017CA  4EF8 1332                700          JMP     OP_FINISH
000017CE                           701          
000017CE                           702  OP_NOP
000017CE  14FC 004E                703          MOVE.B  #'N',(A2)+
000017D2  14FC 004F                704          MOVE.B  #'O',(A2)+
000017D6  14FC 0050                705          MOVE.B  #'P',(A2)+
000017DA  223C 00000000            706          MOVE.L  #ea_type_immediate,D1
000017E0  4EB9 00001ADA            707          JSR     EA_START
000017E6  4EF8 1332                708          JMP     OP_FINISH
000017EA                           709          
000017EA                           710  OP_RTS
000017EA  14FC 0052                711          MOVE.B  #'R',(A2)+
000017EE  14FC 0054                712          MOVE.B  #'T',(A2)+
000017F2  14FC 0053                713          MOVE.B  #'S',(A2)+
000017F6  4EF8 1332                714          JMP     OP_FINISH
000017FA                           715          
000017FA                           716  OP_JSR
000017FA  14FC 004A                717          MOVE.B  #'J',(A2)+
000017FE  14FC 0053                718          MOVE.B  #'S',(A2)+
00001802  14FC 0052                719          MOVE.B  #'R',(A2)+
00001806  223C 00000004            720          MOVE.L  #ea_type_dstonly,D1
0000180C  4EB9 00001ADA            721          JSR     EA_START
00001812  4EF8 1332                722          JMP     OP_FINISH
00001816                           723  
00001816                           724  OP_MOVEM
00001816  14FC 004D                725          MOVE.B  #'M',(A2)+
0000181A  14FC 004F                726          MOVE.B  #'O',(A2)+
0000181E  14FC 0056                727          MOVE.B  #'V',(A2)+
00001822  14FC 0045                728          MOVE.B  #'E',(A2)+
00001826  14FC 004D                729          MOVE.B  #'M',(A2)+
0000182A  223C 00000000            730          MOVE.L  #ea_type_immediate,D1
00001830  4EB9 00001ADA            731          JSR     EA_START
00001836  4EF8 1332                732          JMP     OP_FINISH
0000183A                           733          
0000183A                           734  OP_LEA
0000183A  14FC 004C                735          MOVE.B  #'L',(A2)+
0000183E  14FC 0045                736          MOVE.B  #'E',(A2)+
00001842  14FC 0041                737          MOVE.B  #'A',(A2)+
00001846  223C 00000003            738          MOVE.L  #ea_type_lea,D1
0000184C  4EB9 00001ADA            739          JSR     EA_START
00001852  4EF8 1332                740          JMP     OP_FINISH
00001856                           741  
00001856                           742  *------------------------------------------------------------------------------------------------*
00001856                           743  * First 4 bits: 0101
00001856                           744  OP_ADDQ
00001856  14FC 0041                745          MOVE.B  #'A',(A2)+
0000185A  14FC 0044                746          MOVE.B  #'D',(A2)+
0000185E  14FC 0044                747          MOVE.B  #'D',(A2)+
00001862  14FC 0051                748          MOVE.B  #'Q',(A2)+
00001866  223C 00000000            749          MOVE.L  #ea_type_immediate,D1
0000186C  4EB9 00001ADA            750          JSR     EA_START
00001872  4EF8 1332                751          JMP     OP_FINISH
00001876                           752          
00001876                           753  *------------------------------------------------------------------------------------------------*
00001876                           754  * First 4 bits: 0110
00001876                           755  OP_BRA
00001876  14FC 0042                756          MOVE.B  #'B',(A2)+
0000187A  14FC 0052                757          MOVE.B  #'R',(A2)+
0000187E  14FC 0041                758          MOVE.B  #'A',(A2)+
00001882  223C 00000000            759          MOVE.L  #ea_type_immediate,D1
00001888  4EB9 00001ADA            760          JSR     EA_START
0000188E  4EF8 1332                761          JMP     OP_FINISH
00001892                           762  
00001892                           763  OP_BCC
00001892  14FC 0042                764          MOVE.B  #'B',(A2)+
00001896  14FC 0043                765          MOVE.B  #'C',(A2)+
0000189A  14FC 0043                766          MOVE.B  #'C',(A2)+
0000189E  223C 00000000            767          MOVE.L  #ea_type_immediate,D1
000018A4  4EB9 00001ADA            768          JSR     EA_START
000018AA  4EF8 1332                769          JMP     OP_FINISH
000018AE                           770          
000018AE                           771  OP_BGT
000018AE  14FC 0042                772          MOVE.B  #'B',(A2)+
000018B2  14FC 0047                773          MOVE.B  #'G',(A2)+
000018B6  14FC 0054                774          MOVE.B  #'T',(A2)+
000018BA  223C 00000000            775          MOVE.L  #ea_type_immediate,D1
000018C0  4EB9 00001ADA            776          JSR     EA_START
000018C6  4EF8 1332                777          JMP     OP_FINISH
000018CA                           778  
000018CA                           779  OP_BLE
000018CA  14FC 0042                780          MOVE.B  #'B',(A2)+
000018CE  14FC 004C                781          MOVE.B  #'L',(A2)+
000018D2  14FC 0045                782          MOVE.B  #'E',(A2)+
000018D6  223C 00000000            783          MOVE.L  #ea_type_immediate,D1
000018DC  4EB9 00001ADA            784          JSR     EA_START
000018E2  4EF8 1332                785          JMP     OP_FINISH
000018E6                           786          
000018E6                           787  OP_BSR
000018E6  14FC 0042                788          MOVE.B  #'B',(A2)+
000018EA  14FC 0053                789          MOVE.B  #'S',(A2)+
000018EE  14FC 0052                790          MOVE.B  #'R',(A2)+
000018F2  223C 00000000            791          MOVE.L  #ea_type_immediate,D1
000018F8  4EB9 00001ADA            792          JSR     EA_START
000018FE  4EF8 1332                793          JMP     OP_FINISH
00001902                           794  *------------------------------------------------------------------------------------------------*
00001902                           795  * First 4 bits: 0111
00001902                           796  OP_MOVEQ
00001902  14FC 004D                797          MOVE.B  #'M',(A2)+
00001906  14FC 004F                798          MOVE.B  #'O',(A2)+
0000190A  14FC 0056                799          MOVE.B  #'V',(A2)+
0000190E  14FC 0056                800          MOVE.B  #'V',(A2)+
00001912  14FC 0045                801          MOVE.B  #'E',(A2)+
00001916  14FC 0051                802          MOVE.B  #'Q',(A2)+
0000191A  223C 00000000            803          MOVE.L  #ea_type_immediate,D1
00001920  4EB9 00001ADA            804          JSR     EA_START
00001926  4EF8 1332                805          JMP     OP_FINISH
0000192A                           806          
0000192A                           807  *------------------------------------------------------------------------------------------------*
0000192A                           808  * First 4 bits: 1000
0000192A                           809  OP_DIVU
0000192A  14FC 0044                810          MOVE.B  #'D',(A2)+
0000192E  14FC 0049                811          MOVE.B  #'I',(A2)+
00001932  14FC 0056                812          MOVE.B  #'V',(A2)+
00001936  14FC 0055                813          MOVE.B  #'U',(A2)+
0000193A  223C 00000005            814          MOVE.L  #ea_type_ext,D1
00001940  4EB9 00001ADA            815          JSR     EA_START
00001946  4EF8 1332                816          JMP     OP_FINISH
0000194A                           817    
0000194A                           818  OP_OR
0000194A  14FC 004F                819          MOVE.B  #'O',(A2)+
0000194E  14FC 0052                820          MOVE.B  #'R',(A2)+
00001952  223C 00000005            821          MOVE.L  #ea_type_ext,D1
00001958  4EB9 00001ADA            822          JSR     EA_START
0000195E  4EF8 1332                823          JMP     OP_FINISH
00001962                           824  
00001962                           825  *------------------------------------------------------------------------------------------------*
00001962                           826  * First 4 bits: 1001
00001962                           827  OP_SUB
00001962  14FC 0053                828          MOVE.B  #'S',(A2)+
00001966  14FC 0055                829          MOVE.B  #'U',(A2)+
0000196A  14FC 0042                830          MOVE.B  #'B',(A2)+
0000196E  223C 00000005            831          MOVE.L  #ea_type_ext,D1
00001974  4EB9 00001ADA            832          JSR     EA_START
0000197A  4EF8 1332                833          JMP     OP_FINISH
0000197E                           834          
0000197E                           835  *------------------------------------------------------------------------------------------------*
0000197E                           836  * First 4 bits: 1011
0000197E                           837  OP_CMP
0000197E  14FC 0043                838          MOVE.B  #'C',(A2)+
00001982  14FC 004D                839          MOVE.B  #'M',(A2)+
00001986  14FC 0050                840          MOVE.B  #'P',(A2)+
0000198A  223C 00000005            841          MOVE.L  #ea_type_ext,D1
00001990  4EB9 00001ADA            842          JSR     EA_START
00001996  4EF8 1332                843          JMP     OP_FINISH
0000199A                           844          
0000199A                           845  *------------------------------------------------------------------------------------------------*
0000199A                           846  * First 4 bits: 1100
0000199A                           847  OP_MULU
0000199A  14FC 004D                848          MOVE.B  #'M',(A2)+
0000199E  14FC 0055                849          MOVE.B  #'U',(A2)+
000019A2  14FC 004C                850          MOVE.B  #'L',(A2)+
000019A6  14FC 0055                851          MOVE.B  #'U',(A2)+
000019AA  223C 00000005            852          MOVE.L  #ea_type_ext,D1
000019B0  4EB9 00001ADA            853          JSR     EA_START
000019B6  4EF8 1332                854          JMP     OP_FINISH
000019BA                           855          
000019BA                           856  OP_MULS
000019BA  14FC 004D                857          MOVE.B  #'M',(A2)+
000019BE  14FC 0055                858          MOVE.B  #'U',(A2)+
000019C2  14FC 004C                859          MOVE.B  #'L',(A2)+
000019C6  14FC 0053                860          MOVE.B  #'S',(A2)+
000019CA  223C 00000005            861          MOVE.L  #ea_type_ext,D1
000019D0  4EB9 00001ADA            862          JSR     EA_START
000019D6  4EF8 1332                863          JMP     OP_FINISH
000019DA                           864          
000019DA                           865  OP_AND
000019DA  14FC 0041                866          MOVE.B  #'A',(A2)+
000019DE  14FC 004E                867          MOVE.B  #'N',(A2)+
000019E2  14FC 0044                868          MOVE.B  #'D',(A2)+
000019E6  223C 00000005            869          MOVE.L  #ea_type_ext,D1
000019EC  4EB9 00001ADA            870          JSR     EA_START
000019F2  4EF8 1332                871          JMP     OP_FINISH
000019F6                           872          
000019F6                           873  *------------------------------------------------------------------------------------------------*
000019F6                           874  * First 4 bits: 1101
000019F6                           875  OP_ADD
000019F6  14FC 0041                876          MOVE.B  #'A',(A2)+
000019FA  14FC 0044                877          MOVE.B  #'D',(A2)+
000019FE  14FC 0044                878          MOVE.B  #'D',(A2)+
00001A02  223C 00000005            879          MOVE.L  #ea_type_ext,D1
00001A08  4EB9 00001ADA            880          JSR     EA_START
00001A0E  4EF8 1332                881          JMP     OP_FINISH
00001A12                           882  
00001A12                           883  OP_ADDA
00001A12  14FC 0041                884          MOVE.B  #'A',(A2)+
00001A16  14FC 0044                885          MOVE.B  #'D',(A2)+
00001A1A  14FC 0044                886          MOVE.B  #'D',(A2)+
00001A1E  14FC 0041                887          MOVE.B  #'A',(A2)+
00001A22  223C 00000005            888          MOVE.L  #ea_type_ext,D1
00001A28  4EB9 00001ADA            889          JSR     EA_START
00001A2E  4EF8 1332                890          JMP     OP_FINISH
00001A32                           891          
00001A32                           892  *------------------------------------------------------------------------------------------------*
00001A32                           893  * First 4 bits: 1110
00001A32                           894  OP_ASR
00001A32  14FC 0041                895          MOVE.B  #'A',(A2)+
00001A36  14FC 0053                896          MOVE.B  #'S',(A2)+
00001A3A  14FC 0052                897          MOVE.B  #'R',(A2)+
00001A3E  223C 00000000            898          MOVE.L  #ea_type_immediate,D1
00001A44  4EB9 00001ADA            899          JSR     EA_START
00001A4A  4EF8 1332                900          JMP     OP_FINISH
00001A4E                           901  OP_ASL
00001A4E  14FC 0041                902          MOVE.B  #'A',(A2)+
00001A52  14FC 0053                903          MOVE.B  #'S',(A2)+
00001A56  14FC 004C                904          MOVE.B  #'L',(A2)+
00001A5A  223C 00000000            905          MOVE.L  #ea_type_immediate,D1
00001A60  4EB9 00001ADA            906          JSR     EA_START
00001A66  4EF8 1332                907          JMP     OP_FINISH
00001A6A                           908          
00001A6A                           909  OP_LSR
00001A6A  14FC 004C                910          MOVE.B  #'L',(A2)+
00001A6E  14FC 0053                911          MOVE.B  #'S',(A2)+
00001A72  14FC 0052                912          MOVE.B  #'R',(A2)+
00001A76  223C 00000000            913          MOVE.L  #ea_type_immediate,D1
00001A7C  4EB9 00001ADA            914          JSR     EA_START
00001A82  4EF8 1332                915          JMP     OP_FINISH
00001A86                           916         
00001A86                           917  OP_LSL
00001A86  14FC 004C                918          MOVE.B  #'L',(A2)+
00001A8A  14FC 0053                919          MOVE.B  #'S',(A2)+
00001A8E  14FC 004C                920          MOVE.B  #'L',(A2)+
00001A92  223C 00000000            921          MOVE.L  #ea_type_immediate,D1
00001A98  4EB9 00001ADA            922          JSR     EA_START
00001A9E  4EF8 1332                923          JMP     OP_FINISH
00001AA2                           924          
00001AA2                           925  OP_ROR
00001AA2  14FC 0052                926          MOVE.B  #'R',(A2)+
00001AA6  14FC 004F                927          MOVE.B  #'O',(A2)+
00001AAA  14FC 0052                928          MOVE.B  #'R',(A2)+
00001AAE  223C 00000000            929          MOVE.L  #ea_type_immediate,D1
00001AB4  4EB9 00001ADA            930          JSR     EA_START
00001ABA  4EF8 1332                931          JMP     OP_FINISH
00001ABE                           932          
00001ABE                           933  OP_ROL
00001ABE  14FC 0052                934          MOVE.B  #'R',(A2)+
00001AC2  14FC 004F                935          MOVE.B  #'O',(A2)+
00001AC6  14FC 004C                936          MOVE.B  #'L',(A2)+
00001ACA  223C 00000000            937          MOVE.L  #ea_type_immediate,D1
00001AD0  4EB9 00001ADA            938          JSR     EA_START
00001AD6  4EF8 1332                939          JMP     OP_FINISH
00001ADA                           940          
00001ADA                           941  *-----------------------------------------------------------------------*   
00001ADA                           942  EA_START
00001ADA  48E7 38C0                943          MOVEM.L D2-D4/A0-A1, -(SP)
00001ADE                           944          
00001ADE  41F9 00001AF2            945          LEA     EA_TYPE_TABLE, A0
00001AE4  C2FC 0006                946          MULU    #6, D1
00001AE8  4EF0 1000                947          JMP     0(A0, D1)
00001AEC                           948          
00001AEC                           949  EA_FINISH
00001AEC  4CDF 031C                950          MOVEM.L (SP)+, D2-D4/A0-A1
00001AF0  4E75                     951          RTS
00001AF2                           952          
00001AF2                           953  EA_TYPE_TABLE
00001AF2  4EF9 00001BFA            954          JMP     EA_IMMEDIATE        ; 0: ea_immediate
00001AF8  4EF9 00001C4E            955          JMP     EA_MOVE             ; 1: ea_move
00001AFE  4EF9 00001CB6            956          JMP     EA_MOVEA            ; 2: ea_movea
00001B04  4EF9 00001D1E            957          JMP     EA_LEA              ; 3: ea_lea
00001B0A  4EF9 00001D94            958          JMP     EA_DSTONLY          ; 4: ea_dstonly
00001B10  4EF9 00001E3E            959          JMP     EA_EXT              ; 5: ea_ext
00001B16  4EF9 0000201E            960          JMP     EA_MOVEM            ; 6: ea_movem
00001B1C  4EF9 0000201E            961          JMP     EA_TRAP             ; 7: ea_trap
00001B22  4EF9 0000201E            962          JMP     EA_QUICK            ; 8: ea_quick
00001B28  4EF9 0000201E            963          JMP     EA_branch           ; 9: ea_branch
00001B2E  4EF8 1AEC                964          JMP     EA_FINISH
00001B32                           965          
00001B32                           966  EA_SIZE_GENERAL
00001B32  B43C 0000                967          CMP.B   #%00,D2             ; .b
00001B36  6700 00A2                968          BEQ     EA_SIZE_B       
00001B3A  B43C 0001                969          CMP.B   #%01,D2             ; .w
00001B3E  6700 00A4                970          BEQ     EA_SIZE_W       
00001B42  B43C 0002                971          CMP.B   #%10,D2             ; .l
00001B46  6700 00A6                972          BEQ     EA_SIZE_L
00001B4A  6000 05E8                973          BRA     EA_WRONG_SIZE       ; wrong size
00001B4E                           974  
00001B4E                           975  EA_SIZE_MOVE
00001B4E  B43C 0001                976          CMP.B   #%01,D2             ; .b
00001B52  6700 0086                977          BEQ     EA_SIZE_B       
00001B56  B43C 0003                978          CMP.B   #%11,D2             ; .w
00001B5A  6700 0088                979          BEQ     EA_SIZE_W       
00001B5E  B43C 0002                980          CMP.B   #%10,D2             ; .l
00001B62  6700 008A                981          BEQ     EA_SIZE_L
00001B66  6000 05CC                982          BRA     EA_WRONG_SIZE       ; wrong size
00001B6A                           983  
00001B6A                           984  EA_SIZE_MOVEA     
00001B6A  B43C 0003                985          CMP.B   #%11,D2             ; .w
00001B6E  6700 0074                986          BEQ     EA_SIZE_W       
00001B72  B43C 0002                987          CMP.B   #%10,D2             ; .l
00001B76  6700 0076                988          BEQ     EA_SIZE_L
00001B7A  6000 05B8                989          BRA     EA_WRONG_SIZE       ; wrong size
00001B7E                           990  
00001B7E                           991  EA_SIZE_OPMODE_012456               ; Check opmode field for size
00001B7E  B43C 0000                992          CMP.B   #%000,D2            ; When 0 then .b
00001B82  6700 0056                993          BEQ     EA_SIZE_B
00001B86  B43C 0004                994          CMP.B   #%100,D2            ; When 4 then .b
00001B8A  6700 004E                995          BEQ     EA_SIZE_B  
00001B8E  B43C 0001                996          CMP.B   #%001,D2            ; When 1 then .w
00001B92  6700 0050                997          BEQ     EA_SIZE_W
00001B96  B43C 0005                998          CMP.B   #%101,D2            ; When 5 then .w
00001B9A  6700 0048                999          BEQ     EA_SIZE_W 
00001B9E  B43C 0002               1000          CMP.B   #%010,D2            ; When 2 then .l
00001BA2  6700 004A               1001          BEQ     EA_SIZE_L
00001BA6  B43C 0006               1002          CMP.B   #%110,D2            ; When 6 then .l
00001BAA  6700 0042               1003          BEQ     EA_SIZE_L
00001BAE  6000 0584               1004          BRA     EA_WRONG_SIZE       ; wrong size
00001BB2                          1005  
00001BB2                          1006  EA_SIZE_ADDA                        ; Check opmode field for size
00001BB2  B43C 0003               1007          CMP.B   #%011,D2            ; When 3 then .w
00001BB6  6700 002C               1008          BEQ     EA_SIZE_W       
00001BBA  B43C 0007               1009          CMP.B   #%111,D2            ; When 7 then .l
00001BBE  6700 002E               1010          BEQ     EA_SIZE_L
00001BC2  6000 0570               1011          BRA     EA_WRONG_SIZE       ; wrong size
00001BC6                          1012          
00001BC6                          1013  EA_SIZE_MULS_MULU_DIV               ; Check opmode field for size
00001BC6  B43C 0003               1014          CMP.B   #%011,D2            ; When 3 then .w MULU, DIVU
00001BCA  6700 0018               1015          BEQ     EA_SIZE_W       
00001BCE  B43C 0007               1016          CMP.B   #%111,D2            ; When 7 then .l MULS
00001BD2  6700 0010               1017          BEQ     EA_SIZE_W
00001BD6  6000 055C               1018          BRA     EA_WRONG_SIZE       ; wrong size
00001BDA                          1019  
00001BDA                          1020  EA_SIZE_B
00001BDA  14FC 002E               1021          MOVE.B  #'.',(A2)+
00001BDE  14FC 0042               1022          MOVE.B  #'B',(A2)+
00001BE2  4E75                    1023          RTS
00001BE4                          1024  EA_SIZE_W
00001BE4  14FC 002E               1025          MOVE.B  #'.',(A2)+
00001BE8  14FC 0057               1026          MOVE.B  #'W',(A2)+
00001BEC  4E75                    1027          RTS
00001BEE                          1028  EA_SIZE_L
00001BEE  14FC 002E               1029          MOVE.B  #'.',(A2)+
00001BF2  14FC 004C               1030          MOVE.B  #'L',(A2)+
00001BF6  4E75                    1031          RTS
00001BF8                          1032  EA_SIZE_DONE
00001BF8  4E75                    1033          RTS
00001BFA                          1034          
00001BFA                          1035  EA_IMMEDIATE                        ; 0 ea_immediate
00001BFA  2200                    1036          MOVE.L  D0,D1
00001BFC  0241 01C0               1037          ANDI.W  #dst_mode,D1        ; Get bits 8-6 from D1
00001C00  1A3C 0006               1038          MOVE.B  #right6,D5          ; Store 6 into D5
00001C04  EA69                    1039          LSR.W   D5,D1               ; Shift D1 six times to the LSB position
00001C06  0201 0003               1040          ANDI.B  #3,D1               ; Remove the front bit from D1
00001C0A  1401                    1041          MOVE.B  D1,D2               ; Store D1 into D2 (D2 is used to check size)
00001C0C  4EB8 1B32               1042          JSR     EA_SIZE_GENERAL     ; Get size 
00001C10                          1043          
00001C10  14FC 0020               1044          MOVE.B  #$20,(A2)+          ; Add space after size
00001C14  14FC 0020               1045          MOVE.B  #$20,(A2)+          ; Add space 
00001C18                          1046  
00001C18                          1047          ; Get source and store into decode buffer
00001C18  7804                    1048          MOVE.L  #4,D4               ; Store 100 into D4 (Used to jump to immediate)
00001C1A  7607                    1049          MOVE.L  #7,D3               ; Store 111 into D3 (Go to absolute and immediate)
00001C1C  4EB9 0000201E           1050          JSR     EA_GEN_SRC          ; Get EA src print 
00001C22                          1051  
00001C22  14FC 002C               1052          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001C26  14FC 0020               1053          MOVE.B  #$20,(A2)+          ; Add space after comma
00001C2A                          1054  
00001C2A                          1055          ; Get desination and store into decode buffer
00001C2A  2800                    1056          MOVE.L  D0,D4               ; Store the current address into D4 
00001C2C  0244 0007               1057          ANDI.W  #src_reg,D4         ; get the bits at 2-0 (D4 stores EA reg)
00001C30                          1058          
00001C30  2600                    1059          MOVE.L  D0,D3               ; Store the current address into D3 
00001C32  0243 0038               1060          ANDI.W  #src_mode,D3        ; get bits 5-3 (D3 stores EA mode)
00001C36  1A3C 0003               1061          MOVE.B  #right3,D5          ; shift the bits 5-3 to the LSB position
00001C3A  EA6B                    1062          LSR.W   D5,D3               ; do the actual shift 
00001C3C  B63C 0001               1063          CMP.B   #1,D3               ; If dest mode is 001: An
00001C40  6700 0512               1064          BEQ     DST_INVALID         ; Go to invalid message 
00001C44  4EB9 0000201E           1065          JSR     EA_GEN_SRC          ; When a valid dst, get EA dst print
00001C4A                          1066  
00001C4A  4EF8 1AEC               1067          JMP     EA_FINISH           ; Opcode is finish
00001C4E                          1068  
00001C4E                          1069  
00001C4E                          1070  EA_MOVE                             ; 1: ea_move
00001C4E  2200                    1071          MOVE.L  D0,D1
00001C50  0241 F000               1072          ANDI.W  #first_nibble,D1
00001C54  1A3C 000C               1073          MOVE.B  #right12,D5 
00001C58  EA69                    1074          LSR.W   D5,D1
00001C5A  0201 0003               1075          ANDI.B  #3,D1
00001C5E  1401                    1076          MOVE.B  D1,D2
00001C60  4EB8 1B4E               1077          JSR     EA_SIZE_MOVE
00001C64                          1078          
00001C64  14FC 0020               1079          MOVE.B  #$20,(A2)+          ; Print out a space after the size
00001C68  14FC 0020               1080          MOVE.B  #$20,(A2)+          ; Print out a space
00001C6C                          1081          
00001C6C                          1082          ; Get source and store into decode buffer
00001C6C  2800                    1083          MOVE.L  D0,D4               ; Store the src reg in D4
00001C6E  0244 0007               1084          ANDI.W  #src_reg,D4         ; Get the bits at 2-0
00001C72                          1085          
00001C72  2600                    1086          MOVE.L  D0,D3               ; Store the src mode in D3
00001C74  0243 0038               1087          ANDI.W  #src_mode,D3        ; Get bits 5-3
00001C78  1A3C 0003               1088          MOVE.B  #right3,D5          ; Shift the bits 5-3 to the LSB
00001C7C  EA6B                    1089          LSR.W   D5,D3               ; Do the actual shift 
00001C7E  4EB9 0000201E           1090          JSR     EA_GEN_SRC
00001C84                          1091          
00001C84  14FC 002C               1092          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001C88  14FC 0020               1093          MOVE.B  #$20,(A2)+          ; Add space after comma
00001C8C                          1094          
00001C8C                          1095          ; Get desination and store into decode buffer
00001C8C  2800                    1096          MOVE.L  D0,D4               ; Store the dest reg in D4
00001C8E  0244 0E00               1097          ANDI.W  #dst_reg,D4         ; Get the bits at 11-9
00001C92  1A3C 0009               1098          MOVE.B  #right9,D5          ; Shift the bits 11-9 to the LSB
00001C96  EA6C                    1099          LSR.W   D5,D4               ; Do the actual shift
00001C98                          1100          
00001C98  2600                    1101          MOVE.L  D0,D3               ; D0 does not change, D3 is used to store the dst mode and src mode 
00001C9A  0243 01C0               1102          ANDI.W  #dst_mode,D3        ; Get bits 8-6
00001C9E  1A3C 0006               1103          MOVE.B  #right6,D5          ; Shift the bits 8-6 to the LSB
00001CA2  EA6B                    1104          LSR.W   D5,D3               ; Do the actual shift 
00001CA4  B63C 0001               1105          CMP.B   #1,D3               ; If dest mode is 001: An
00001CA8  6700 04AA               1106          BEQ     DST_INVALID         ; Go to invalid message 
00001CAC  4EB9 0000201E           1107          JSR     EA_GEN_SRC          ; Get EA print
00001CB2                          1108          
00001CB2  4EF8 1AEC               1109          JMP     EA_FINISH           ; Opcode is finish
00001CB6                          1110  
00001CB6                          1111             
00001CB6                          1112  EA_MOVEA                            ; 2: ea_movea
00001CB6  2200                    1113          MOVE.L  D0,D1
00001CB8  0241 F000               1114          ANDI.W  #first_nibble,D1
00001CBC  1A3C 000C               1115          MOVE.B  #right12,D5 
00001CC0  EA69                    1116          LSR.W   D5,D1
00001CC2  0201 0003               1117          ANDI.B  #3,D1
00001CC6  1401                    1118          MOVE.B  D1,D2
00001CC8  4EB8 1B6A               1119          JSR     EA_SIZE_MOVEA 
00001CCC                          1120          
00001CCC  14FC 0020               1121          MOVE.B  #$20,(A2)+          ; Print out a space after the size
00001CD0                          1122          
00001CD0                          1123          ; Get source and store into decode buffer
00001CD0  2800                    1124          MOVE.L  D0,D4               ; Store the src reg in D4
00001CD2  0244 0007               1125          ANDI.W  #src_reg,D4         ; Get the bits at 2-0
00001CD6                          1126          
00001CD6  2600                    1127          MOVE.L  D0,D3               ; Store the src mode in D3
00001CD8  0243 0038               1128          ANDI.W  #src_mode,D3        ; Get bits 5-3
00001CDC  1A3C 0003               1129          MOVE.B  #right3,D5          ; Shift the bits 5-3 to the LSB
00001CE0  EA6B                    1130          LSR.W   D5,D3               ; Do the actual shift 
00001CE2  4EB9 0000201E           1131          JSR     EA_GEN_SRC
00001CE8                          1132          
00001CE8  14FC 002C               1133          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001CEC  14FC 0020               1134          MOVE.B  #$20,(A2)+          ; Add space after comma
00001CF0                          1135          
00001CF0                          1136          ; Get desination and store into decode buffer
00001CF0  2800                    1137          MOVE.L  D0,D4               ; Store the dest reg in D4
00001CF2  0244 0E00               1138          ANDI.W  #dst_reg,D4         ; Get the bits at 11-9
00001CF6  1A3C 0009               1139          MOVE.B  #right9,D5          ; Shift the bits 11-9 to the LSB
00001CFA  EA6C                    1140          LSR.W   D5,D4               ; Do the actual shift
00001CFC                          1141          
00001CFC  2600                    1142          MOVE.L  D0,D3               ; D0 does not change, D3 is used to store the dst mode and src mode 
00001CFE  0243 01C0               1143          ANDI.W  #dst_mode,D3        ; Get bits 8-6
00001D02  1A3C 0006               1144          MOVE.B  #right6,D5          ; Shift the bits 8-6 to the LSB
00001D06  EA6B                    1145          LSR.W   D5,D3               ; Do the actual shift 
00001D08  B63C 0001               1146          CMP.B   #1,D3               ; If dst mode is 001: An 
00001D0C  6700 0006               1147          BEQ     MOVEA_DST_VALID     ; dst is valid, so branch 
00001D10  6000 0442               1148          BRA     DST_INVALID         ; Otherwise, go to invalid message 
00001D14                          1149          
00001D14                          1150  MOVEA_DST_VALID
00001D14  4EB9 0000201E           1151          JSR     EA_GEN_SRC          ; Get EA print
00001D1A  4EF8 1AEC               1152          JMP     EA_FINISH           ; Opcode is finish
00001D1E                          1153  
00001D1E                          1154  EA_LEA                              ; 3: ea_lea
00001D1E  14FC 0020               1155          MOVE.B  #$20,(A2)+          ; print out a space after the LEA
00001D22  14FC 0020               1156          MOVE.B  #$20,(A2)+          ; print out a space after the LEA
00001D26  14FC 0020               1157          MOVE.B  #$20,(A2)+          ; print out a space after the LEA
00001D2A  14FC 0020               1158          MOVE.B  #$20,(A2)+          ; print out a space after the LEA
00001D2E                          1159          
00001D2E  2800                    1160          MOVE.L  D0,D4               ; Store the src reg in D4
00001D30  0244 0007               1161          ANDI.W  #src_reg,D4         ; get the bits at 2-0
00001D34                          1162          
00001D34  2600                    1163          MOVE.L  D0,D3               ; Store the src mode in D3
00001D36  0243 0038               1164          ANDI.W  #src_mode,D3        ; get bits 5-3
00001D3A  1A3C 0003               1165          MOVE.B  #right3,D5          ; shift the bits 5-3 to the LSB
00001D3E  EA6B                    1166          LSR.W   D5,D3               ; do the actual shift 
00001D40  B67C 0002               1167          CMP     #2,D3               ; If D3 (src mode) is 010 (An)
00001D44  6700 000E               1168          BEQ     LEA_SRC_VALID
00001D48  B67C 0007               1169          CMP     #7,D3               ; If D3 (src mode) is 111 (W or L)
00001D4C  6700 0006               1170          BEQ     LEA_SRC_VALID
00001D50  6000 0412               1171          BRA     SRC_INVALID         ; when src mode is not 010 or 111, branch to error message
00001D54                          1172          
00001D54                          1173  LEA_SRC_VALID        
00001D54  4EB9 0000201E           1174          JSR     EA_GEN_SRC          ; Go to function 
00001D5A                          1175   
00001D5A  14FC 002C               1176          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001D5E  14FC 0020               1177          MOVE.B  #$20,(A2)+          ; Add space after comma
00001D62                          1178  
00001D62  2600                    1179          MOVE.L  D0,D3               ; D0 does not change, D3 is used to store the dst mode and src mode 
00001D64  0243 01C0               1180          ANDI.W  #dst_mode,D3        ; Get bits 8-6
00001D68  1A3C 0006               1181          MOVE.B  #right6,D5          ; Shift the bits 8-6 to the LSB
00001D6C  EA6B                    1182          LSR.W   D5,D3               ; Do the actual shift
00001D6E  B63C 0007               1183          CMP.B   #7,D3               ; Check if D3 is 111
00001D72  6700 0006               1184          BEQ     CHANGE_TO_001       ; change the D3 bits to 001 
00001D76  6000 03DC               1185          BRA     DST_INVALID         ; Print out an error message if bits 8-6 (dst mode) are not 111
00001D7A                          1186    
00001D7A                          1187  CHANGE_TO_001
00001D7A  163C 0001               1188          MOVE.B  #%001,D3            ; set D3 to 001 to ensure the print out A 
00001D7E                          1189          
00001D7E  2800                    1190          MOVE.L  D0,D4               ; Store the dest reg in D4 to get the Address register number
00001D80  0244 0E00               1191          ANDI.W  #dst_reg,D4         ; get the bits at 11-9
00001D84  1A3C 0009               1192          MOVE.B  #right9,D5          ; shift the bits 11-9 to the LSB
00001D88  EA6C                    1193          LSR.W   D5,D4               ; do the actual shift
00001D8A  4EB9 0000201E           1194          JSR     EA_GEN_SRC          ; Print out the address register
00001D90  4EF8 1AEC               1195          JMP     EA_FINISH           ; Opcode is finish
00001D94                          1196  
00001D94                          1197  EA_DSTONLY                          ; 4: ea_dstonly
00001D94  2200                    1198          MOVE.L  D0,D1
00001D96  0241 0F00               1199          ANDI.W  #second_nibble,D1   ; get second nibble from D1
00001D9A  1A3C 0008               1200          MOVE.B  #right8,D5 
00001D9E  EA69                    1201          LSR.W   D5,D1     
00001DA0  B23C 0002               1202          CMP.B   #2, D1              ; When 0010 for second nibble
00001DA4  6700 000E               1203          BEQ     EA_CLEAR            ; Then do EA_CLEAR
00001DA8  B23C 000E               1204          CMP.B   #$E, D1             ; When 1110 for second nibble
00001DAC  6700 004C               1205          BEQ     EA_JSR              ; Then do EA_JSR
00001DB0  6000 03A2               1206          BRA     DST_INVALID     
00001DB4                          1207          
00001DB4                          1208  EA_CLEAR
00001DB4  2200                    1209          MOVE.L  D0,D1
00001DB6  0241 01C0               1210          ANDI.W  #dst_mode,D1        ; Get bits 8-6 from D1
00001DBA  1A3C 0006               1211          MOVE.B  #right6,D5          ; Store 6 into D5
00001DBE  EA69                    1212          LSR.W   D5,D1               ; Shift D1 six times to the LSB position
00001DC0  0201 0003               1213          ANDI.B  #3,D1               ; Remove the front bit from D1
00001DC4  1401                    1214          MOVE.B  D1,D2               ; Store D1 into D2 (D2 is used to check size)
00001DC6  4EB8 1B32               1215          JSR     EA_SIZE_GENERAL     ; Get size 
00001DCA                          1216          
00001DCA  14FC 0020               1217          MOVE.B  #$20,(A2)+          ; Add space after size
00001DCE  14FC 0020               1218          MOVE.B  #$20,(A2)+          ; Add space 
00001DD2  14FC 0020               1219          MOVE.B  #$20,(A2)+          ; Add space 
00001DD6                          1220          
00001DD6                          1221          ; Get desination and store into decode buffer
00001DD6  2800                    1222          MOVE.L  D0,D4               ; Store the current address into D4 
00001DD8  0244 0007               1223          ANDI.W  #src_reg,D4         ; get the bits at 2-0 (D4 stores EA reg)
00001DDC                          1224          
00001DDC  2600                    1225          MOVE.L  D0,D3               ; Store the current address into D3 
00001DDE  0243 0038               1226          ANDI.W  #src_mode,D3        ; get bits 5-3 (D3 stores EA mode)
00001DE2  1A3C 0003               1227          MOVE.B  #right3,D5          ; shift the bits 5-3 to the LSB position
00001DE6  EA6B                    1228          LSR.W   D5,D3               ; do the actual shift 
00001DE8  B63C 0001               1229          CMP.B   #1,D3               ; If dest mode is 001: An
00001DEC  6700 0366               1230          BEQ     DST_INVALID         ; Go to invalid message 
00001DF0  4EB9 0000201E           1231          JSR     EA_GEN_SRC          ; When a valid dst, get EA dst print
00001DF6  4EF8 1AEC               1232          JMP     EA_FINISH           ; Opcode is finish
00001DFA                          1233          
00001DFA  14FC 0020               1234  EA_JSR  MOVE.B  #$20,(A2)+          ; Add space 
00001DFE  14FC 0020               1235          MOVE.B  #$20,(A2)+          ; Add space 
00001E02  14FC 0020               1236          MOVE.B  #$20,(A2)+          ; Add space 
00001E06  14FC 0020               1237          MOVE.B  #$20,(A2)+          ; Add space 
00001E0A  14FC 0020               1238          MOVE.B  #$20,(A2)+          ; Add space 
00001E0E                          1239  
00001E0E                          1240          ; Get EA and store into decode buffer   
00001E0E  2800                    1241          MOVE.L  D0,D4               ; Store the current address into D4 
00001E10  0244 0007               1242          ANDI.W  #src_reg,D4         ; get the bits at 2-0 (D4 stores EA reg)
00001E14                          1243          
00001E14  2600                    1244          MOVE.L  D0,D3               ; Store the current address into D3 
00001E16  0243 0038               1245          ANDI.W  #src_mode,D3        ; get bits 5-3 (D3 stores EA mode)
00001E1A  1A3C 0003               1246          MOVE.B  #right3,D5          ; shift the bits 5-3 to the LSB position
00001E1E  EA6B                    1247          LSR.W   D5,D3               ; do the actual shift 
00001E20  B67C 0002               1248          CMP     #2,D3               ; If D3 (src mode) is 010: (An)
00001E24  6700 000E               1249          BEQ     JSR_EA_VALID
00001E28  B67C 0007               1250          CMP     #7,D3               ; If D3 (src mode) is 111: (W or L)
00001E2C  6700 0006               1251          BEQ     JSR_EA_VALID
00001E30  6000 0342               1252          BRA     EA_INVALID          ; Otherwise, branch to invalid message
00001E34                          1253          
00001E34                          1254  JSR_EA_VALID
00001E34  4EB9 0000201E           1255          JSR     EA_GEN_SRC          ; When a valid dst, get EA dst print
00001E3A  4EF8 1AEC               1256          JMP     EA_FINISH           ; Opcode is finish
00001E3E                          1257  
00001E3E                          1258  EA_EXT                              ; 5: ea_ext
00001E3E  2200                    1259          MOVE.L  D0,D1
00001E40  0241 01C0               1260          ANDI.W  #dst_mode,D1        ; Get bits 8-6 from D1 (get opmode)
00001E44  1A3C 0006               1261          MOVE.B  #right6,D5          ; Store 6 into D5
00001E48  EA69                    1262          LSR.W   D5,D1               ; Shift D1 six times to the LSB position
00001E4A  1401                    1263          MOVE.B  D1,D2               ; Store D1 into D2 (D2 is used to check size)
00001E4C  C2FC 0006               1264          MULU    #6, D1              ; Multiply 6 to D1 
00001E50  41F9 00001E5A           1265          LEA     EA_EXT_TABLE,A0     ; Load table into A0
00001E56  4EF0 1000               1266          JMP     0(A0,D1)            ; go to displacement (A0 + D1 * 6)
00001E5A                          1267  
00001E5A                          1268  EA_EXT_TABLE
00001E5A  4EF9 00001E8A           1269          JMP     EA_OPMODE_012456    ; 000: ADD/SUB/CMP/OR/AND
00001E60  4EF9 00001E8A           1270          JMP     EA_OPMODE_012456    ; 001: ADD/SUB/CMP/OR/AND
00001E66  4EF9 00001E8A           1271          JMP     EA_OPMODE_012456    ; 010: ADD/SUB/CMP/OR/AND
00001E6C  4EF9 00001F76           1272          JMP     EA_OPMODE_37        ; 011: ADDA/MULS/MULU/DIVU
00001E72  4EF9 00001E8A           1273          JMP     EA_OPMODE_012456    ; 100: ADD/SUB/CMP/OR/AND
00001E78  4EF9 00001E8A           1274          JMP     EA_OPMODE_012456    ; 101: ADD/SUB/CMP/OR/AND
00001E7E  4EF9 00001E8A           1275          JMP     EA_OPMODE_012456    ; 110: ADD/SUB/CMP/OR/AND
00001E84  4EF9 00001F76           1276          JMP     EA_OPMODE_37        ; 111: ADDA/MULS/MULU/DIVU
00001E8A                          1277  
00001E8A                          1278  EA_OPMODE_012456
00001E8A  4EB8 1B7E               1279          JSR     EA_SIZE_OPMODE_012456    
00001E8E                          1280          
00001E8E  14FC 0020               1281          MOVE.B  #$20,(A2)+          ; Print out a space after the size
00001E92  14FC 0020               1282          MOVE.B  #$20,(A2)+          ; Print out a space 
00001E96  14FC 0020               1283          MOVE.B  #$20,(A2)+          ; Print out a space
00001E9A                          1284          
00001E9A                          1285          ; Operation: <ea> + Dn -> Dn
00001E9A  B43C 0000               1286          CMP.B   #%000,D2            ; When 0 then Dn is destination
00001E9E  6700 002E               1287          BEQ     Dn_DST
00001EA2  B43C 0001               1288          CMP.B   #%001,D2            ; When 1 then Dn is destination
00001EA6  6700 0026               1289          BEQ     Dn_DST
00001EAA  B43C 0002               1290          CMP.B   #%010,D2            ; When 2 then Dn is destination
00001EAE  6700 001E               1291          BEQ     Dn_DST
00001EB2                          1292          
00001EB2                          1293          ; Operation: Dn + <ea> -> <ea>
00001EB2  B43C 0004               1294          CMP.B   #%100,D2            ; When 4 then Dn is source
00001EB6  6700 0054               1295          BEQ     Dn_SRC  
00001EBA  B43C 0005               1296          CMP.B   #%101,D2            ; When 5 then Dn is source
00001EBE  6700 004C               1297          BEQ     Dn_SRC 
00001EC2  B43C 0006               1298          CMP.B   #%110,D2            ; When 6 then Dn is source
00001EC6  6700 0044               1299          BEQ     Dn_SRC 
00001ECA                          1300          
00001ECA  6000 02A8               1301          BRA     EA_INVALID
00001ECE                          1302  
00001ECE                          1303  Dn_DST
00001ECE                          1304          ; Get source and store into decode buffer
00001ECE  2800                    1305          MOVE.L  D0,D4               ; Store the src reg in D4
00001ED0  0244 0007               1306          ANDI.W  #src_reg,D4         ; Get the bits at 2-0
00001ED4                          1307          
00001ED4  2600                    1308          MOVE.L  D0,D3               ; Store the src mode in D3
00001ED6  0243 0038               1309          ANDI.W  #src_mode,D3        ; Get bits 5-3
00001EDA  1A3C 0003               1310          MOVE.B  #right3,D5          ; Shift the bits 5-3 to the LSB
00001EDE  EA6B                    1311          LSR.W   D5,D3               ; Do the actual shift 
00001EE0  4EB9 00001F52           1312          JSR     AND_OR_CHECK        ; Check if opcode is AND/OR   
00001EE6  4EB9 0000201E           1313          JSR     EA_GEN_SRC          ; Get EA print
00001EEC                          1314          
00001EEC  14FC 002C               1315          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001EF0  14FC 0020               1316          MOVE.B  #$20,(A2)+          ; Add space after comma
00001EF4                          1317          
00001EF4                          1318          ; Get desination and store into decode buffer
00001EF4  2800                    1319          MOVE.L  D0,D4               ; Store the dest reg in D4
00001EF6  0244 0E00               1320          ANDI.W  #dst_reg,D4         ; Get the bits at 11-9
00001EFA  1A3C 0009               1321          MOVE.B  #right9,D5          ; Shift the bits 11-9 to the LSB
00001EFE  EA6C                    1322          LSR.W   D5,D4               ; Do the actual shift
00001F00                          1323          
00001F00  7600                    1324          MOVE.L  #0,D3               ; Store 000 into D3, so it can jump to Dn 
00001F02  4EB9 0000201E           1325          JSR     EA_GEN_SRC          ; Get the Dn print
00001F08  4EF8 1AEC               1326          JMP     EA_FINISH           ; Opcode is finish
00001F0C                          1327            
00001F0C                          1328  Dn_SRC  
00001F0C  BC3C 000B               1329          CMP.B   #11,D6              ; If first nibble is 1011 (indicates CMP opcode)
00001F10  6700 0262               1330          BEQ     EA_INVALID          ; Then branch to error message
00001F14                          1331       
00001F14                          1332          ; Get source and store into decode buffer
00001F14  2800                    1333          MOVE.L  D0,D4               ; Store the src reg in D4
00001F16  0244 0E00               1334          ANDI.W  #dst_reg,D4         ; Get the bits at 11-9
00001F1A  1A3C 0009               1335          MOVE.B  #right9,D5          ; Shift the bits 11-9 to the LSB
00001F1E  EA6C                    1336          LSR.W   D5,D4               ; Do the actual shift
00001F20                          1337          
00001F20  7600                    1338          MOVE.L  #0,D3               ; Store 000 into D3, so it can jump to Dn 
00001F22  4EB9 0000201E           1339          JSR     EA_GEN_SRC          ; Get the Dn print
00001F28                          1340          
00001F28  14FC 002C               1341          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001F2C  14FC 0020               1342          MOVE.B  #$20,(A2)+          ; Add space after comma
00001F30                          1343  
00001F30                          1344          ; Get destination and store into decode buffer
00001F30  2800                    1345          MOVE.L  D0,D4               ; Store the dst reg in D4
00001F32  0244 0007               1346          ANDI.W  #src_reg,D4         ; Get the bits at 2-0
00001F36                          1347          
00001F36  2600                    1348          MOVE.L  D0,D3               ; Store the dest mode in D3
00001F38  0243 0038               1349          ANDI.W  #src_mode,D3        ; Get bits 5-3
00001F3C  1A3C 0003               1350          MOVE.B  #right3,D5          ; Shift the bits 5-3 to the LSB
00001F40  EA6B                    1351          LSR.W   D5,D3               ; Do the actual shift
00001F42  4EB9 00001F6C           1352          JSR     An_CHECK            ; Check if mode is An
00001F48                          1353         
00001F48  4EB9 0000201E           1354          JSR     EA_GEN_SRC          ; Get EA print
00001F4E  4EF8 1AEC               1355          JMP     EA_FINISH           ; Opcode is finish
00001F52                          1356          
00001F52                          1357  AND_OR_CHECK
00001F52  BC3C 000C               1358          CMP.B   #12,D6              ; If first nibble is 1100 (indicates AND opcode)
00001F56  6700 0014               1359          BEQ     An_CHECK            ; Go check if mode is An 
00001F5A  BC3C 0008               1360          CMP.B   #8,D6               ; If first nibble is 1000 (indicates OR opcode)
00001F5E  6700 0004               1361          BEQ     OR_SPACE            ; Go to OR_SPACE  
00001F62  4E75                    1362          RTS
00001F64                          1363          
00001F64                          1364  OR_SPACE
00001F64  14FC 0020               1365          MOVE.B  #$20,(A2)+          ; Print out a space
00001F68  6700 0002               1366          BEQ     An_CHECK            ; Check if mode is An
00001F6C                          1367          
00001F6C                          1368  An_CHECK 
00001F6C  B63C 0001               1369          CMP.B   #1,D3               ; If mode is An     
00001F70  6700 0202               1370          BEQ     EA_INVALID          ; Then branch to error message
00001F74  4E75                    1371          RTS   
00001F76                          1372  
00001F76                          1373  EA_OPMODE_37
00001F76  BC3C 0008               1374          CMP.B   #8,D6               ; If first nibble 1000: DIVU
00001F7A  6700 0012               1375          BEQ     EA_MULS_MULU_DIV
00001F7E  BC3C 000C               1376          CMP.B   #12,D6              ; If first nibble 1100: MULS/MULU
00001F82  6700 000A               1377          BEQ     EA_MULS_MULU_DIV
00001F86  BC3C 000D               1378          CMP.B   #13,D6              ; If first nibble 1101: ADDA
00001F8A  6700 004E               1379          BEQ     EA_ADDA                
00001F8E                          1380  
00001F8E                          1381  EA_MULS_MULU_DIV
00001F8E  4EB8 1BC6               1382          JSR     EA_SIZE_MULS_MULU_DIV 
00001F92  143C 0001               1383          MOVe.B  #1,D2               ; Set D2 to 1, since we know size is word   
00001F96                          1384  
00001F96  14FC 0020               1385          MOVE.B  #$20,(A2)+          ; Print out a space after the size
00001F9A  14FC 0020               1386          MOVE.B  #$20,(A2)+          ; Print out a space
00001F9E                          1387          
00001F9E                          1388          ; Get source and store into decode buffer
00001F9E  2800                    1389          MOVE.L  D0,D4               ; Store the src reg in D4
00001FA0  0244 0007               1390          ANDI.W  #src_reg,D4         ; Get the bits at 2-0
00001FA4                          1391          
00001FA4  2600                    1392          MOVE.L  D0,D3               ; Store the src mode in D3
00001FA6  0243 0038               1393          ANDI.W  #src_mode,D3        ; Get bits 5-3
00001FAA  1A3C 0003               1394          MOVE.B  #right3,D5          ; Shift the bits 5-3 to the LSB
00001FAE  EA6B                    1395          LSR.W   D5,D3               ; Do the actual shift
00001FB0  4EB8 1F6C               1396          JSR     An_CHECK            ; Check if mode is An 
00001FB4  4EB9 0000201E           1397          JSR     EA_GEN_SRC          ; Go get EA print
00001FBA                          1398          
00001FBA  14FC 002C               1399          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00001FBE  14FC 0020               1400          MOVE.B  #$20,(A2)+          ; Add space after comma
00001FC2                          1401          
00001FC2                          1402          ; Get desination and store into decode buffer
00001FC2  2800                    1403          MOVE.L  D0,D4               ; Store the dest reg in D4
00001FC4  0244 0E00               1404          ANDI.W  #dst_reg,D4         ; Get the bits at 11-9
00001FC8  1A3C 0009               1405          MOVE.B  #right9,D5          ; Shift the bits 11-9 to the LSB
00001FCC  EA6C                    1406          LSR.W   D5,D4               ; Do the actual shift
00001FCE                          1407          
00001FCE  7600                    1408          MOVE.L  #0,D3               ; Store 000 into D3, so it can jump to Dn 
00001FD0  4EB9 0000201E           1409          JSR     EA_GEN_SRC          ; Go get EA print
00001FD6  4EF8 1AEC               1410          JMP     EA_FINISH           ; Opcode is finish
00001FDA                          1411  
00001FDA                          1412  EA_ADDA
00001FDA  4EB8 1BB2               1413          JSR     EA_SIZE_ADDA        ; Get size    
00001FDE                          1414  
00001FDE  14FC 0020               1415          MOVE.B  #$20,(A2)+          ; Print out a space after the size
00001FE2  14FC 0020               1416          MOVE.B  #$20,(A2)+          ; Print out a space
00001FE6                          1417          
00001FE6                          1418          ; Get source and store into decode buffer
00001FE6  2800                    1419          MOVE.L  D0,D4               ; Store the src reg in D4
00001FE8  0244 0007               1420          ANDI.W  #src_reg,D4         ; Get the bits at 2-0
00001FEC                          1421          
00001FEC  2600                    1422          MOVE.L  D0,D3               ; Store the src mode in D3
00001FEE  0243 0038               1423          ANDI.W  #src_mode,D3        ; Get bits 5-3
00001FF2  1A3C 0003               1424          MOVE.B  #right3,D5          ; Shift the bits 5-3 to the LSB
00001FF6  EA6B                    1425          LSR.W   D5,D3               ; Do the actual shift 
00001FF8  4EB9 0000201E           1426          JSR     EA_GEN_SRC
00001FFE                          1427          
00001FFE  14FC 002C               1428          MOVE.B  #$2C,(A2)+          ; Add comma after size print
00002002  14FC 0020               1429          MOVE.B  #$20,(A2)+          ; Add space after comma
00002006                          1430          
00002006                          1431          ; Get desination and store into decode buffer
00002006  2800                    1432          MOVE.L  D0,D4               ; Store the dest reg in D4
00002008  0244 0E00               1433          ANDI.W  #dst_reg,D4         ; Get the bits at 11-9
0000200C  1A3C 0009               1434          MOVE.B  #right9,D5          ; Shift the bits 11-9 to the LSB
00002010  EA6C                    1435          LSR.W   D5,D4               ; Do the actual shift
00002012                          1436          
00002012  7601                    1437          MOVE.L  #1,D3               ; Store 001 into D3, so it can jump to An 
00002014  4EB9 0000201E           1438          JSR     EA_GEN_SRC          ; Go get EA print
0000201A  4EF8 1AEC               1439          JMP     EA_FINISH           ; Opcode is finish
0000201E                          1440  
0000201E                          1441  EA_MOVEM        ; 6: ea_movem
0000201E                          1442  
0000201E                          1443  EA_TRAP         ; 7: ea_trap
0000201E                          1444  
0000201E                          1445  EA_QUICK        ; 8: ea_quick
0000201E                          1446  
0000201E                          1447  EA_BRANCH       ; 9: ea_branch
0000201E                          1448  
0000201E                          1449  EA_REG
0000201E                          1450  
0000201E                          1451  EA_GEN_SRC
0000201E  41F9 0000202C           1452          LEA     EA_GEN_TABLE_SRC, A0
00002024  C6FC 0006               1453          MULU    #6, D3              ; use D3 to jump to the proper src mode and dst mode. 
00002028  4EF0 3000               1454          JMP     0(A0,D3)            ; jump to each ea src generation table entry 
0000202C                          1455  
0000202C                          1456  EA_GEN_TABLE_SRC
0000202C  4EF9 0000205C           1457          JMP     EA_Dn                       ; 000: Dn
00002032  4EF9 00002068           1458          JMP     EA_An                       ; 001: An
00002038  4EF9 00002074           1459          JMP     EA_An_Indirect              ; 010: (An)
0000203E  4EF9 00002088           1460          JMP     EA_An_Indirect_Inc          ; 011: (An)+
00002044  4EF9 000020A0           1461          JMP     EA_An_Indirect_Dec          ; 100: -(An)
0000204A  4EF9 000020B8           1462          JMP     EA_UNSUPPORTED              ; 101: Unsupported EA
00002050  4EF9 000020B8           1463          JMP     EA_UNSUPPORTED              ; 110: Unsupported EA
00002056  4EF9 000020C6           1464          JMP     EA_Absolute_And_Immediate   ; 111: (xxx).W,(xxx).L, or #<data>
0000205C                          1465  
0000205C                          1466  EA_Dn               ; 000: Dn
0000205C  14FC 0044               1467          MOVE.B  #'D',(A2)+
00002060  0604 0030               1468          ADDI.B  #$30,D4
00002064  14C4                    1469          MOVE.B  D4,(A2)+
00002066  4E75                    1470          RTS
00002068                          1471  
00002068                          1472  EA_An               ; 001: An
00002068  14FC 0041               1473          MOVE.B  #'A',(A2)+
0000206C  0604 0030               1474          ADDI.B  #$30,D4
00002070  14C4                    1475          MOVE.B  D4,(A2)+
00002072  4E75                    1476          RTS
00002074                          1477  
00002074                          1478  EA_An_Indirect      ; 010: (An)
00002074  14FC 0028               1479          MOVE.B  #'(',(A2)+
00002078  14FC 0041               1480          MOVE.B  #'A',(A2)+
0000207C  0604 0030               1481          ADDI.B  #$30,D4
00002080  14C4                    1482          MOVE.B  D4,(A2)+
00002082  14FC 0029               1483          MOVE.B  #')',(A2)+
00002086  4E75                    1484          RTS
00002088                          1485          
00002088                          1486  EA_An_Indirect_Inc  ; 011: (An)+
00002088  14FC 0028               1487          MOVE.B  #'(',(A2)+
0000208C  14FC 0041               1488          MOVE.B  #'A',(A2)+
00002090  0604 0030               1489          ADDI.B  #$30, D4
00002094  14C4                    1490          MOVE.B  D4,(A2)+
00002096  14FC 0029               1491          MOVE.B  #')',(A2)+
0000209A  14FC 002B               1492          MOVE.B  #'+',(A2)+
0000209E  4E75                    1493          RTS
000020A0                          1494          
000020A0                          1495  EA_An_Indirect_Dec  ; 100: -(An)
000020A0  14FC 002D               1496          MOVE.B  #'-',(A2)+
000020A4  14FC 0028               1497          MOVE.B  #'(',(A2)+
000020A8  14FC 0041               1498          MOVE.B  #'A',(A2)+
000020AC  0604 0030               1499          ADDI.B  #$30,D4
000020B0  14C4                    1500          MOVE.B  D4,(A2)+
000020B2  14FC 0029               1501          MOVE.B  #')',(A2)+
000020B6  4E75                    1502          RTS
000020B8                          1503  
000020B8                          1504  EA_UNSUPPORTED
000020B8  43F9 000021D3           1505          LEA     EA_TYPE_ERROR,A1
000020BE  103C 000E               1506          MOVE.B  #14,D0
000020C2  4E4F                    1507          TRAP    #15  
000020C4  4E75                    1508          RTS 
000020C6                          1509          
000020C6                          1510  EA_Absolute_And_Immediate           ; 111: (xxx).W,(xxx).L, or #<data>
000020C6  B83C 0000               1511          CMP.B   #0,D4               ; If D4 is (xxx).W
000020CA  6700 0016               1512          BEQ     ABSOLUTE_WORD
000020CE                          1513          
000020CE  B83C 0001               1514          CMP.B   #1,D4               ; If D4 is (xxx).L
000020D2  6700 001A               1515          BEQ     ABSOLUTE_LONG
000020D6                          1516          
000020D6  B83C 0004               1517          CMP.B   #4,D4               ; If D4 is #<data>  
000020DA  6700 001E               1518          BEQ     IMMEDIATE
000020DE                          1519          
000020DE  6000 0064               1520          BRA     ABSOLUTE_IMMEDIATE_ERROR    
000020E2                          1521  
000020E2                          1522  ABSOLUTE_WORD
000020E2  14FC 0024               1523          MOVE.B  #$24,(A2)+          ; Add $ symbol
000020E6  7401                    1524          MOVE.L  #1,D2               ; Insert 1 to D2 
000020E8  4EB8 1114               1525          JSR     ITOA                ; Convert word hex values to ITOA
000020EC  4E75                    1526          RTS
000020EE                          1527          
000020EE                          1528  ABSOLUTE_LONG
000020EE  14FC 0024               1529          MOVE.B  #$24,(A2)+          ; Add $ symbol
000020F2  7402                    1530          MOVE.L  #2,D2               ; Insert 2 to D2
000020F4  4EB8 1114               1531          JSR     ITOA                ; Convert long hex values to ITOA
000020F8  4E75                    1532          RTS
000020FA                          1533  
000020FA                          1534  IMMEDIATE
000020FA  14FC 0023               1535          MOVE.B  #$23,(A2)+          ; Add # symbol
000020FE  14FC 0024               1536          MOVE.B  #$24,(A2)+          ; Add $ symbol
00002102                          1537  
00002102  BC3C 0001               1538          CMP.B   #1,D6               ; If MOVE.b (code0001)
00002106  6700 0020               1539          BEQ     DO_ITOA_MOVE
0000210A  BC3C 0002               1540          CMP.B   #2, D6              ; If MOVE.l / MOVEA.l (code0010)
0000210E  6700 0018               1541          BEQ     DO_ITOA_MOVE
00002112  BC3C 0003               1542          CMP.B   #3, D6              ; If MOVE.w / MOVEA.w (code0011)
00002116  6700 0010               1543          BEQ     DO_ITOA_MOVE        
0000211A  BC3C 000D               1544          CMP.B   #13, D6             ; If ADD / ADDA (code1101)
0000211E  6700 000E               1545          BEQ     DO_ITOA_OPMODE
00002122                          1546          
00002122  4EB8 1114               1547          JSR     ITOA                ; Go to ITOA when not a move instruction
00002126  4E75                    1548          RTS
00002128                          1549          
00002128                          1550  DO_ITOA_MOVE
00002128  4EB8 1136               1551          JSR ITOA_MOVE
0000212C  4E75                    1552          RTS
0000212E                          1553                
0000212E                          1554  DO_ITOA_OPMODE
0000212E  4EB8 1158               1555          JSR ITOA_OPMODE
00002132  4E75                    1556          RTS
00002134                          1557                
00002134                          1558  EA_WRONG_SIZE 
00002134  43F9 00002189           1559          LEA     WRONG_SIZE_MESSAGE, A1 
0000213A  103C 000E               1560          MOVE.B  #14, D0
0000213E  4E4F                    1561          TRAP    #15
00002140  6000 0042               1562          BRA     DONE
00002144                          1563          
00002144                          1564  ABSOLUTE_IMMEDIATE_ERROR  
00002144  43F9 00002197           1565          LEA     ABSOLUTE_WRONGREG, A1 
0000214A  103C 000E               1566          MOVE.B  #14, D0
0000214E  4E4F                    1567          TRAP    #15
00002150  6000 0032               1568          BRA     DONE
00002154                          1569          
00002154                          1570  DST_INVALID
00002154  43F9 000021F5           1571          LEA     DST_INVALID_MSG, A1 
0000215A  103C 000E               1572          MOVE.B  #14, D0
0000215E  4E4F                    1573          TRAP    #15
00002160  6000 0022               1574          BRA     DONE
00002164                          1575          
00002164                          1576  SRC_INVALID 
00002164  43F9 00002227           1577          LEA     SRC_INVALID_MSG, A1 
0000216A  103C 000E               1578          MOVE.B  #14, D0
0000216E  4E4F                    1579          TRAP    #15
00002170  6000 0012               1580          BRA     DONE
00002174                          1581          
00002174                          1582  EA_INVALID  
00002174  43F9 00002254           1583          LEA     EA_INVALID_MSG, A1 
0000217A  103C 000E               1584          MOVE.B  #14, D0
0000217E  4E4F                    1585          TRAP    #15
00002180  6000 0002               1586          BRA     DONE
00002184                          1587      
00002184  FFFF FFFF               1588  DONE    SIMHALT             ; halt simulator
00002188                          1589  
00002188                          1590  * Put variables and constants here
00002188                          1591     
00002188                          1592         
00002188  =00000040               1593  buffer_size         EQU         64 
00002188  =00005000               1594  decoded_buffer      EQU         $5000
00002188                          1595     
00002188  =0000000D               1596  CR                  EQU         $0D
00002188  =0000000A               1597  LF                  EQU         $0A
00002188  =0000A000               1598  stack               EQU         $0000A000
00002188  =00000014               1599  lines_p_screen      EQU         20
00002188  =00000003               1600  right3              EQU         3
00002188  =00000004               1601  right4              EQU         4
00002188  =00000006               1602  right6              EQU         6
00002188  =00000008               1603  right8              EQU         8
00002188  =00000009               1604  right9              EQU         9
00002188  =0000000C               1605  right12             EQU         12
00002188  =00000010               1606  right16             EQU         16
00002188  =00000018               1607  right24             EQU         24
00002188= 20                      1608  ascii_y_n           DC.B        32
00002189  =00000059               1609  y_uppercase         EQU         $59         
00002189  =00000079               1610  y_lowercase         EQU         $79
00002189  =0000004E               1611  n_uppercase         EQU         $4E
00002189  =0000006E               1612  n_lowercase         EQU         $6E
00002189  =00000002               1613  task2               EQU         $02
00002189  =00000005               1614  task5               EQU         $05
00002189  =00000009               1615  task9               EQU         $09
00002189  =0000000D               1616  task13              EQU         $0D
00002189  =0000000E               1617  task14              EQU         $0E
00002189  =0000F000               1618  first_nibble        EQU         $F000
00002189  =00000F00               1619  second_nibble       EQU         $0F00   
00002189  =000000F0               1620  third_nibble        EQU         $00F0
00002189  =0000000F               1621  fourth_nibble       EQU         $000F
00002189  =000001C0               1622  dst_mode            EQU         $01C0
00002189  =00000E00               1623  dst_reg             EQU         $0E00
00002189  =00000038               1624  src_mode            EQU         $0038
00002189  =00000007               1625  src_reg             EQU         $0007
00002189  =00000100               1626  bit8                EQU         $0100
00002189                          1627  
00002189  =00000000               1628  ea_type_immediate   EQU     0       ; EA Type = immediate
00002189  =00000001               1629  ea_type_move        EQU     1       ; EA Type = move
00002189  =00000002               1630  ea_type_movea       EQU     2       ; EA Type = movea
00002189  =0000000C               1631  ea_type_movea6      EQU     12      ; EA Type = movea * 6
00002189  =00000003               1632  ea_type_lea         EQU     3       ; EA Type = lea
00002189  =00000004               1633  ea_type_dstonly     EQU     4       ; EA Type = clr, neg, not, jsr, jmp
00002189  =00000005               1634  ea_type_ext         EQU     5       ; EA Type = ext, add, adda
00002189  =00000006               1635  ea_type_movem       EQU     6       ; EA Type = movem
00002189  =00000007               1636  ea_type_trap        EQU     7       ; EA Type = trap
00002189  =00000008               1637  ea_type_quick       EQU     8       ; EA Type = addq, subq
00002189  =00000009               1638  ea_type_branch      EQU     9       ; EA Type = bra, bsr, bcc
00002189  =00000000               1639  ea_bcc_flag         EQU     0       ; EA Type = branch, flag = bcc
00002189  =00000001               1640  ea_dbcc_flag        EQU     1       ; EA Type = branch, flag = dbcc
00002189  =00000002               1641  ea_scc_flag         EQU     2       ; EA Type = branch, flag = scc
00002189                          1642  
00002189= 57 72 6F 6E 67 20 ...   1643  WRONG_SIZE_MESSAGE  DC.B    'Wrong size.',CR,LF,0
00002197= 45 52 52 4F 52 3A ...   1644  ABSOLUTE_WRONGREG   DC.B    'ERROR: Register does not exist for Absolute and immediate',CR,LF,0
000021D3= 45 52 52 4F 52 3A ...   1645  EA_TYPE_ERROR       DC.B    'ERROR: EA type is not supported',CR,LF,0
000021F5= 45 52 52 4F 52 3A ...   1646  DST_INVALID_MSG     DC.B    'ERROR: Destination effective address is invalid',CR,LF,0
00002227= 45 52 52 4F 52 3A ...   1647  SRC_INVALID_MSG     DC.B    'ERROR: Source effective address is invalid',CR,LF,0
00002254= 45 52 52 4F 52 3A ...   1648  EA_INVALID_MSG      DC.B    'ERROR: Invalid addressing mode',CR,LF,0
00002275= 45 52 52 4F 52 3A ...   1649  OPCODE_INVALID      DC.B    'ERROR: Opcode is invalid',CR,LF,0
00002290= 45 52 52 4F 52 3A ...   1650  ERROR_MESSAGE       DC.B    'ERROR: The input is invalid',CR,LF,0  
000022AE= 45 52 52 4F 52 3A ...   1651  ODD_ERROR_MESSAGE   DC.B    'ERROR: The last digit of the address is odd, which is invalid',CR,LF,0  
000022EE                          1652               
000022EE= 57 65 6C 63 6F 6D ...   1653  WELCOME             DC.B        'Welcome to the 68k Disassembler of Avery and Alan',CR,LF,CR,LF,0
00002324                          1654  
00002324= 50 6C 65 61 73 65 ...   1655  USER_INST           DC.B        'Please follow the proper input instructions below: ',CR,LF
00002359= 2D 20 53 74 61 72 ...   1656                      DC.B        '- Starting address must be lower than ending address.',CR,LF
00002390= 2D 20 54 68 65 20 ...   1657                      DC.B        '- The values for the starting and ending address must be an even value.',CR,LF
000023D9= 2D 20 53 74 61 72 ...   1658                      DC.B        '- Starting and ending address must be inputted as hexadecimal value.',CR,LF
0000241F= 2D 20 44 6F 20 6E ...   1659                      DC.B        '- Do not put spaces in between input characters.',CR,LF
00002451= 2D 20 56 61 6C 69 ...   1660                      DC.B        '- Valid characters include: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F',CR,LF,0
0000249E                          1661                  
0000249E= 50 72 65 73 73 20 ...   1662  ENTER_PROMPT        DC.B        'Press enter to continue...',CR,LF,0
000024BB= 50 72 65 73 73 20 ...   1663  PROMPT_AGAIN        DC.B        'Press Y to continue / N to exit.',CR,LF,0
000024DE= 50 72 6F 67 72 61 ...   1664  EXIT_PROMPT         DC.B        'Program has execution has stopped.',CR,LF,0
00002503                          1665        
00002503= 45 6E 74 65 72 20 ...   1666  START_IN            DC.B        'Enter a starting address: ',CR,LF,0 
00002520= 45 6E 74 65 72 20 ...   1667  END_IN              DC.B        'Enter an ending address: ',CR,LF,0 
0000253C                          1668  START_ADDRESS       DS.B        32     
0000255C                          1669  END_ADDRESS         DS.B        32 
0000257C                          1670       
0000257C                          1671  
0000257C                          1672      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_IMMEDIATE_ERROR  2144
ABSOLUTE_LONG       20EE
ABSOLUTE_WORD       20E2
ABSOLUTE_WRONGREG   2197
AND_OR_CHECK        1F52
AN_CHECK            1F6C
ASCII_TO_HEX_LETTER  1084
ASCII_Y_N           2188
ATOI                105E
BIT8                100
BUFFER_SIZE         40
CHANGE_TO_001       1D7A
CODE0000            13AE
CODE0001            13C8
CODE0010            13CC
CODE0011            13E4
CODE0100            13FC
CODE0101            1416
CODE0110            141A
CODE0111            1432
CODE1000            1436
CODE1001            144E
CODE1010            1452
CODE1011            1456
CODE1100            145A
CODE1101            1474
CODE1110            148E
CODE1111            150C
COMPLETE_END        10E6
COMPLETE_START      10DE
CONTINUE_OR_END     12AC
CR                  D
DECODED_BUFFER      5000
DECODE_MEMORY       12FC
DECODE_PAUSE        1298
DECODING_ITERATION  1274
DISP_UI             100C
DISP_W              1000
DN_DST              1ECE
DN_SRC              1F0C
DONE                2184
DO_ITOA_MOVE        2128
DO_ITOA_OPMODE      212E
DST_INVALID         2154
DST_INVALID_MSG     21F5
DST_MODE            1C0
DST_REG             E00
EA_ABSOLUTE_AND_IMMEDIATE  20C6
EA_ADDA             1FDA
EA_AN               2068
EA_AN_INDIRECT      2074
EA_AN_INDIRECT_DEC  20A0
EA_AN_INDIRECT_INC  2088
EA_BCC_FLAG         0
EA_BRANCH           201E
EA_CLEAR            1DB4
EA_DBCC_FLAG        1
EA_DN               205C
EA_DSTONLY          1D94
EA_EXT              1E3E
EA_EXT_TABLE        1E5A
EA_FINISH           1AEC
EA_GEN_SRC          201E
EA_GEN_TABLE_SRC    202C
EA_IMMEDIATE        1BFA
EA_INVALID          2174
EA_INVALID_MSG      2254
EA_JSR              1DFA
EA_LEA              1D1E
EA_MOVE             1C4E
EA_MOVEA            1CB6
EA_MOVEM            201E
EA_MULS_MULU_DIV    1F8E
EA_OPMODE_012456    1E8A
EA_OPMODE_37        1F76
EA_QUICK            201E
EA_REG              201E
EA_SCC_FLAG         2
EA_SIZE_ADDA        1BB2
EA_SIZE_B           1BDA
EA_SIZE_DONE        1BF8
EA_SIZE_GENERAL     1B32
EA_SIZE_L           1BEE
EA_SIZE_MOVE        1B4E
EA_SIZE_MOVEA       1B6A
EA_SIZE_MULS_MULU_DIV  1BC6
EA_SIZE_OPMODE_012456  1B7E
EA_SIZE_W           1BE4
EA_START            1ADA
EA_TRAP             201E
EA_TYPE_BRANCH      9
EA_TYPE_DSTONLY     4
EA_TYPE_ERROR       21D3
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_TABLE       1AF2
EA_TYPE_TRAP        7
EA_UNSUPPORTED      20B8
EA_WRONG_SIZE       2134
END_ADDRESS         255C
END_IN              2520
ENTER_PROMPT        249E
ERROR_MESSAGE       2290
EXIT                12EC
EXIT_PROMPT         24DE
FIRST_NIBBLE        F000
FOURTH_NIBBLE       F
IMMEDIATE           20FA
INPUT_INVALID       10A6
ITOA                1114
ITOA_BYTE           119C
ITOA_BYTE_CONVERT   1230
ITOA_CONVERT_A_TO_F  1260
ITOA_DONE           126C
ITOA_LONG           11C6
ITOA_LONGADDRESS    11F8
ITOA_MOVE           1136
ITOA_NIBBLE_CONVERT  1250
ITOA_OPMODE         1158
ITOA_WORD           11AA
JSR_EA_VALID        1E34
JSR_NOP_RTS         16F0
LAST_DIGIT_CHECK    10C4
LAST_DIGIT_ODD      10F8
LEA_SRC_VALID       1D54
LF                  A
LINES_P_SCREEN      14
MEMORY_1110_LEFT    14C4
MEMORY_1110_RIGHT   14E8
MOVEA_DST_VALID     1D14
N_LOWERCASE         6E
N_UPPERCASE         4E
ODD_ERROR_MESSAGE   22AE
OPCODE_INVALID      2275
OP_0000_TABLE       1510
OP_0100_TABLE       1570
OP_1100_TABLE       15D0
OP_1101_TABLE       1630
OP_1110_TABLE_REGISTER  1690
OP_ADD              19F6
OP_ADDA             1A12
OP_ADDI             174E
OP_ADDQ             1856
OP_AND              19DA
OP_ASL              1A4E
OP_ASR              1A32
OP_BCC              1892
OP_BGT              18AE
OP_BLE              18CA
OP_BRA              1876
OP_BSR              18E6
OP_CLEAR_DATA       1338
OP_CLEAR_DATA_LOOP  1344
OP_CLR              17B2
OP_CMP              197E
OP_DIVU             192A
OP_FINISH           1332
OP_JSR              17FA
OP_LEA              183A
OP_LSL              1A86
OP_LSR              1A6A
OP_MOVE             1792
OP_MOVEA            176E
OP_MOVEM            1816
OP_MOVEQ            1902
OP_MULS             19BA
OP_MULU             199A
OP_NOP              17CE
OP_OR               194A
OP_ROL              1ABE
OP_ROR              1AA2
OP_RTS              17EA
OP_SUB              1962
OP_SUBI             172E
OP_TABLE            134E
OP_UNSUPPORTED      171E
OR_SPACE            1F64
PROMPT_AGAIN        24BB
PROMPT_END          103E
PROMPT_START        1018
READ_END            104A
READ_START          102A
RIGHT12             C
RIGHT16             10
RIGHT24             18
RIGHT3              3
RIGHT4              4
RIGHT6              6
RIGHT8              8
RIGHT9              9
SECOND_NIBBLE       F00
SRC_INVALID         2164
SRC_INVALID_MSG     2227
SRC_MODE            38
SRC_REG             7
STACK               A000
START               1000
START_ADDRESS       253C
START_DECODING      1272
START_IN            2503
TASK13              D
TASK14              E
TASK2               2
TASK5               5
TASK9               9
THIRD_NIBBLE        F0
USER_INST           2324
VALIDATE_END        105A
VALIDATE_START      103A
WELCOME             22EE
WRONG_SIZE_MESSAGE  2189
Y_LOWERCASE         79
Y_UPPERCASE         59
