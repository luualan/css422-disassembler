00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/3/2020 2:53:47 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler for the Motorola MC68000 Microprocessor
00000000                             3  * Written by :  Avery Mortenson & Alan Luu
00000000                             4  * Date       :  2/12/2020
00000000                             5  * Description:  An inverse assembler (disassembler) that will 
00000000                             6  * convert a memory image of instructions and data back 
00000000                             7  * to the MC68000 assembly code and that will output the 
00000000                             8  * disassembled code to the display.
00000000                             9  *-----------------------------------------------------------
00001000                            10      ORG    $1000
00001000  4EB9 00001012             11  START:      JSR     DISP_W          ; Display Welcome Message. 
00001006  4EB9 0000101E             12              JSR     DISP_UI         ; Display User Instructions.
0000100C  4EB9 0000102A             13              JSR     PROMPT_START    ; Prompt the user for starting address. 
00001012                            14              
00001012                            15  *------------------------------------------------------------*
00001012                            16  * D0: used for the tasks
00001012                            17  * D1: used to hold the size of the input obtained. 
00001012                            18  * D5: used to store the starting and ending address 
00001012                            19  * temporarily before moving them to A4 and A6 correspondingly. 
00001012                            20  * D6: used to check the last digit to see if the input 
00001012                            21  * for the starting and ending address causes a bus error. 
00001012                            22  * A1: a pointer to the message to print out. 
00001012                            23  *------------------------------------------------------------*
00001012                            24  
00001012  103C 000E                 25  DISP_W      MOVE.B  #14,D0          ; Display Welcome Message. 
00001016  43F9 0000196D             26              LEA     WELCOME,A1
0000101C  4E4F                      27              TRAP    #15
0000101E                            28  
0000101E                            29  * Put program code here
0000101E                            30  
0000101E  103C 000E                 31  DISP_UI         MOVE.B  #14,D0             ; Display User Instructions. 
00001022  43F9 000019A3             32                  LEA     USER_INST,A1
00001028  4E4F                      33                  TRAP    #15    
0000102A                            34  
0000102A                            35         
0000102A  4FF9 000A0000             36  PROMPT_START    LEA     stack, SP          ; SP = stack ($A0000)
00001030  43F9 00001B82             37                  LEA     START_IN,A1        ; Display starting address message
00001036  103C 000E                 38                  MOVE.B  #14,D0
0000103A  4E4F                      39                  TRAP    #15       
0000103C                            40       
0000103C  43F9 00001BBB             41  READ_START      LEA     START_ADDRESS,A1        ; Store user's starting address input
00001042  103C 0002                 42                  MOVE.B  #2,D0                   ; Read user's input into A1; length is stored into D1
00001046  4E4F                      43                  TRAP    #15
00001048  1C3C 0000                 44                  MOVE.B  #0,D6
0000104C                            45  
0000104C  6000 0022                 46  VALIDATE_START  BRA     ATOI
00001050                            47  
00001050  43F9 00001B9F             48  PROMPT_END      LEA     END_IN,A1        ; Display starting address message
00001056  103C 000E                 49                  MOVE.B  #14,D0
0000105A  4E4F                      50                  TRAP    #15            
0000105C  43F9 00001BFB             51  READ_END        LEA     END_ADDRESS,A1        ; Store user's starting address input
00001062  103C 0002                 52                  MOVE.B  #2,D0                   ; Read user's input into A1; length is stored into D1
00001066  4E4F                      53                  TRAP    #15
00001068  1C3C 0001                 54                  MOVE.B  #1,D6
0000106C                            55  
0000106C  6000 0002                 56  VALIDATE_END    BRA     ATOI
00001070                            57  
00001070                            58  * D0 stores the value to pushed from A1.
00001070                            59  
00001070  1019                      60  ATOI            MOVE.B  (A1)+,D0    ; Move to next character in A1 and store in D0          
00001072  B03C 0030                 61                  CMP.B   #$30,D0
00001076  6D00 0040                 62                  BLT     INVALID
0000107A  B03C 0039                 63                  CMP.B   #$39,D0
0000107E  6E00 0016                 64                  BGT     ASCII_TO_HEX_LETTER
00001082  0400 0030                 65                  SUB.B   #$30,D0     ; Subtract by 30 to get the numbers 0-9
00001086  DA80                      66                  ADD.L   D0,D5
00001088  5341                      67                  SUBI    #1,D1       ; Decrement input's length to move to next character          
0000108A  B23C 0000                 68                  CMP.B   #0,D1       ; Compare to see if we're at the last digit
0000108E  6700 0036                 69                  BEQ     LASTDIGITCHECK
00001092  E98D                      70                  LSL.L   #4,D5
00001094  60DA                      71                  BRA     ATOI
00001096                            72  
00001096                            73    
00001096  B03C 0041                 74  ASCII_TO_HEX_LETTER     CMP.B   #$41,D0
0000109A  6D00 001C                 75                          BLT     INVALID
0000109E  B03C 0046                 76                          CMP.B   #$46, D0
000010A2  6E00 0014                 77                          BGT     INVALID 
000010A6  0400 0031                 78                          SUB.B   #$31,D0     ; Subtract by 31 to get the numbers A-F
000010AA  5D00                      79                          SUB.B   #6,D0
000010AC  DA80                      80                          ADD.L   D0,D5
000010AE  5341                      81                          SUBI    #1,D1
000010B0  6700 0014                 82                          BEQ     LASTDIGITCHECK
000010B4  E98D                      83                          LSL.L   #4,D5
000010B6  60B8                      84                          BRA     ATOI     
000010B8                            85  
000010B8                            86                      
000010B8  43F9 00001C3B             87  INVALID     LEA     ERROR_MESSAGE, A1   ; Display error message
000010BE  103C 000E                 88              MOVE.B  #14, D0
000010C2  4E4F                      89              TRAP    #15
000010C4  4206                      90              CLR.B   D6
000010C6                            91   
000010C6                            92                  
000010C6  2E05                      93  LASTDIGITCHECK      MOVE.L  D5, D7  ; D7 used as temporary storage
000010C8  E20F                      94                      LSR.B   #1, D7  ; Check for carry bit to see if last digit is odd
000010CA  6500 0024                 95                      BCS     ODD
000010CE  4287                      96                      CLR.L   D7
000010D0  BC3C 0000                 97                      CMP.B   #0,D6
000010D4  6700 000A                 98                      BEQ     COMPLETE_STARTA  ; When even, go to prompt for end address
000010D8  BC3C 0001                 99                      CMP.B   #1,D6
000010DC  6700 000A                100                      BEQ     COMPLETE_ENDA
000010E0                           101  
000010E0  2845                     102  COMPLETE_STARTA     MOVEA.L D5, A4  ; A4 holds the starting address.
000010E2  4285                     103                      CLR.L   D5 
000010E4  6000 FF6A                104                      BRA PROMPT_END
000010E8                           105  
000010E8                           106  
000010E8  2C45                     107  COMPLETE_ENDA       MOVEA.L D5, A6  ; A6 holds the ending address. 
000010EA  2A4C                     108                       MOVEA.L A4, A5  ; Store starting address into current address
000010EC  6000 01B6                109                      BRA DECODE_MEMORY
000010F0                           110  
000010F0                           111  
000010F0  43F9 00001C3B            112  ODD     LEA     ERROR_MESSAGE, A1 
000010F6  103C 000E                113          MOVE.B  #14, D0
000010FA  4E4F                     114          TRAP    #15
000010FC                           115          
000010FC  48E7 C000                116  ITOA    MOVEM.L D0-D1, -(SP) ; convert integer to ASCII
00001100  B43C 0000                117          CMP.B   #$00, D2
00001104  6700 003A                118          BEQ     ITOA_BYTE
00001108  B43C 0001                119          CMP.B   #$01, D2
0000110C  6700 0040                120          BEQ     ITOA_WORD
00001110  B43C 0010                121          CMP.B   #$10, D2
00001114  6700 0054                122          BEQ     ITOA_LONG
00001118  4EF9 0000119C            123          JMP     ITOA_LONGADDRESS
0000111E                           124          
0000111E                           125  ITOA_MOVE
0000111E  48E7 C000                126          MOVEM.L D0-D1, -(SP)
00001122                           127          
00001122  B43C 0001                128          CMP.B   #%01, D2
00001126  6700 0018                129          BEQ     ITOA_BYTE
0000112A  B43C 0003                130          CMP.B   #%11, D2
0000112E  6700 001E                131          BEQ     ITOA_WORD
00001132  B43C 0002                132          CMP.B   #%10,D2
00001136  6700 0032                133          BEQ     ITOA_LONG
0000113A  4EF9 0000119C            134          JMP     ITOA_LONGADDRESS
00001140                           135  
00001140                           136  ITOA_BYTE
00001140  3E1D                     137          MOVE.W  (A5)+,D7
00001142  4EB9 000011D4            138          JSR     ITOA_BYTE_CONVERT
00001148  4EF9 00001210            139          JMP     ITOA_DONE
0000114E                           140          
0000114E                           141  ITOA_WORD
0000114E  3E15                     142          MOVE.W  (A5),D7
00001150  123C 0008                143          MOVE.B  #right8, D1
00001154  E26F                     144          LSR.W   D1,D7
00001156  4EB9 000011D4            145          JSR     ITOA_BYTE_CONVERT
0000115C  3E1D                     146          MOVE.W  (A5)+, D7
0000115E  4EB9 000011D4            147          JSR     ITOA_BYTE_CONVERT
00001164  4EF9 00001210            148          JMP     ITOA_DONE
0000116A                           149          
0000116A                           150  ITOA_LONG
0000116A  3E15                     151          MOVE.W  (A5),D7
0000116C  123C 0008                152          MOVE.B  #right8, D1
00001170  E26F                     153          LSR.W   D1, D7
00001172  4EB9 000011D4            154          JSR     ITOA_BYTE_CONVERT
00001178  3E1D                     155          MOVE.W  (A5)+, D7
0000117A  4EB9 000011D4            156          JSR     ITOA_BYTE_CONVERT
00001180                           157          
00001180  3E15                     158          MOVE.W  (A5),D7
00001182  123C 0008                159          MOVE.B  #right8, D1
00001186  E26F                     160          LSR.W   D1, D7
00001188  4EB9 000011D4            161          JSR     ITOA_BYTE_CONVERT
0000118E  3E1D                     162          MOVE.W  (A5)+, D7
00001190  4EB9 000011D4            163          JSR     ITOA_BYTE_CONVERT
00001196  4EF9 00001210            164          JMP     ITOA_DONE
0000119C                           165  
0000119C                           166  ITOA_LONGADDRESS
0000119C  3E0D                     167          MOVE.W  A5,D7
0000119E  123C 0018                168          MOVE.B  #right24,D1
000011A2  E26F                     169          LSR.W   D1,D7
000011A4  4EB9 000011D4            170          JSR     ITOA_BYTE_CONVERT
000011AA  3E4D                     171          MOVE.W  A5,A7
000011AC  123C 0010                172          MOVE.B  #right16,D1
000011B0  E26F                     173          LSR.W   D1,D7
000011B2  4EB9 000011D4            174          JSR     ITOA_BYTE_CONVERT
000011B8  3E0D                     175          MOVE.W  A5,D7
000011BA  123C 0008                176          MOVE.B  #right8,D1
000011BE  E26F                     177          LSR.W   D1,D7
000011C0  4EB9 000011D4            178          JSR     ITOA_BYTE_CONVERT
000011C6  3E0D                     179          MOVE.W  A5,D7
000011C8  4EB9 000011D4            180          JSR     ITOA_BYTE_CONVERT   
000011CE  4EF9 00001210            181          JMP     ITOA_DONE   
000011D4                           182  
000011D4                           183  ITOA_BYTE_CONVERT
000011D4  3007                     184          MOVE.W  D7, D0 
000011D6  0240 00F0                185          ANDI.W  #$F0, D0
000011DA  123C 0004                186          MOVE.B  #right4, D1
000011DE  E268                     187          LSR.W   D1, D0
000011E0  4EB9 000011F4            188          JSR     ITOA_NIBBLE_CONVERT
000011E6                           189          
000011E6  3007                     190          MOVE.W  D7, D0
000011E8  0240 00F0                191          ANDI.W  #$F0, D0
000011EC  4EB9 000011F4            192          JSR     ITOA_NIBBLE_CONVERT
000011F2  4E75                     193          RTS
000011F4                           194          
000011F4                           195  ITOA_NIBBLE_CONVERT
000011F4  B03C 0009                196          CMP.B   #9, D0
000011F8  6E00 000A                197          BGT     ITOA_CONVERT_A_TO_F
000011FC  0600 0030                198          ADD.B   #$30, D0
00001200  14C0                     199          MOVE.B  D0, (A2)+   ; store D0 into decode buffer
00001202  4E75                     200          RTS
00001204                           201          
00001204                           202  ITOA_CONVERT_A_TO_F
00001204  0400 000A                203          SUBI.B  #10, D0
00001208  0600 0041                204          ADDI.B  #$41, D0
0000120C  14C0                     205          MOVE.B  D0, (A2)+   ; store D0 into decode buffer
0000120E  4E75                     206          RTS
00001210                           207  
00001210                           208  ITOA_DONE
00001210  4CDF 0003                209          MOVEM.L (SP)+, D0-D1
00001214  4E75                     210          RTS
00001216                           211  
00001216                           212  *-------------------------------------------------------------------------------*
00001216                           213  
00001216                           214  START_DECODING
00001216  4282                     215          CLR.L   D2
00001218                           216          
00001218                           217  DECODING_ITERATION
00001218                           218          ;decoding the current address
00001218  4EB9 000012A4            219          JSR     DECODE_MEMORY
0000121E  103C 000D                220          MOVE.B  #task13, D0
00001222  43F9 00000040            221          LEA     decoded_buffer, A1
00001228  4E4F                     222          TRAP    #15
0000122A                           223          
0000122A                           224          ;check if decoding has finished or if the screen is filled. 
0000122A  BDCD                     225          CMP.L   A5, A6
0000122C  6F00 0024                226          BLE     CONTINUE_OR_END
00001230                           227          ;have yet to reach the ending address
00001230  5202                     228          ADDQ.B  #1, D2
00001232  B439 00000014            229          CMP.B   lines_p_screen, D2
00001238  6C00 0004                230          BGE     DECODE_PAUSE
0000123C                           231          ;not yet reached the maximum lines per screen. 
0000123C  60DA                     232          BRA     DECODING_ITERATION
0000123E                           233  
0000123E                           234  DECODE_PAUSE
0000123E  103C 000E                235          MOVE.B  #task14, D0
00001242  43F9 00001B1D            236          LEA     ENTER_PROMPT, A1
00001248  4E4F                     237          TRAP    #15
0000124A  103C 0005                238          MOVE.B  #task5, D0
0000124E  4E4F                     239          TRAP    #15
00001250  60C4                     240          BRA     START_DECODING
00001252                           241  
00001252                           242  CONTINUE_OR_END
00001252  103C 000E                243          MOVE.B  #task14, D0
00001256  43F9 00001B3A            244          LEA     PROMPT_AGAIN, A1
0000125C  4E4F                     245          TRAP    #15
0000125E                           246          
0000125E  103C 0002                247          MOVE.B  #task2, D0
00001262  43F9 0000196C            248          LEA     ascii_y_n, A1
00001268  4E4F                     249          TRAP    #15
0000126A                           250          
0000126A  1639 0000196C            251          MOVE.B  ascii_y_n, D3
00001270  0C03 0059                252          CMPI.B  #y_uppercase, D3
00001274  6700 FDB4                253          BEQ     PROMPT_START
00001278  0C03 0079                254          CMPI.B  #y_lowercase, D3
0000127C  6700 FDAC                255          BEQ     PROMPT_START
00001280  0C03 004E                256          CMPI.B  #n_uppercase, D3
00001284  6700 000C                257          BEQ     EXIT
00001288  0C03 006E                258          CMPI.B  #n_lowercase, D3
0000128C  6700 0004                259          BEQ     EXIT
00001290                           260  
00001290  60C0                     261          BRA     CONTINUE_OR_END 
00001292                           262          
00001292                           263  EXIT
00001292  103C 000E                264          MOVE.B  #task14, D0
00001296  43F9 00001B5D            265          LEA     EXIT_PROMPT, A1
0000129C  4E4F                     266          TRAP    #15
0000129E                           267          
0000129E  103C 0009                268          MOVE.B  #task9, D0
000012A2  4E4F                     269          TRAP    #15
000012A4                           270  
000012A4                           271          
000012A4                           272          
000012A4                           273  *---------------------------------------------------------------------------------*
000012A4                           274  * D0: the current instruction. 
000012A4                           275  * D1: 
000012A4                           276  * D2: data size / shift count
000012A4                           277  * D3: loop counter for the amount of lines per screen. 
000012A4                           278  * D4: 
000012A4                           279  * D5: 
000012A4                           280  * D6: 
000012A4                           281  * D7: 
000012A4                           282  * A0: 
000012A4                           283  * A1: A pointer to the message to print out. 
000012A4                           284  * A2: A pointer to the decode_buffer. 
000012A4                           285  * A3: 
000012A4                           286  * A4: Store the starting address and increment to the ending address. 
000012A4                           287  * A5: The current address. 
000012A4                           288  * A6: Store the ending address. 
000012A4                           289  * A7: Stack pointer. 
000012A4                           290  *---------------------------------------------------------------------------------*
000012A4                           291                                
000012A4                           292  DECODE_MEMORY     
000012A4                           293  
000012A4                           294  *Clear the data and address registers used to obtain the starting and ending address. 
000012A4  4280                     295          CLR.L   D0
000012A6  4285                     296          CLR.L   D5
000012A8  4286                     297          CLR.L   D6
000012AA  327C 0000                298          MOVEA   #0, A1
000012AE                           299          
000012AE  48E7 2002                300          MOVEM.L D2/A6, -(SP)
000012B2                           301                  
000012B2                           302          ;zero clear the decode_buffer
000012B2  4EB9 000012E8            303          JSR     OP_CLEAR_DATA
000012B8  45F9 00000040            304          LEA     decoded_buffer, A2
000012BE                           305                  
000012BE                           306          ;print out the current address
000012BE  7403                     307          MOVE.L  #$0003, D2
000012C0  4EB8 10FC                308          JSR     ITOA
000012C4  14FC 0009                309          MOVE.B  #$9, (A2)+
000012C8                           310                  
000012C8                           311          ;load the next instruction and jump to the opcode table entry
000012C8  41F9 000012FE            312          LEA     OP_TABLE, A0
000012CE  4280                     313          CLR.L   D0
000012D0  301D                     314          MOVE.W  (A5)+, D0
000012D2  2200                     315          MOVE.L  D0, D1
000012D4  143C 000C                316          MOVE.B  #right12, D2
000012D8  E469                     317          LSR.W   D2, D1
000012DA  C2FC 0006                318          MULU    #6, D1
000012DE  4EF0 1000                319          JMP     0(A0, D1)
000012E2                           320  OP_FINISH
000012E2  4CDF 4004                321          MOVEM.L (SP)+, D2/A6
000012E6  4E75                     322          RTS
000012E8                           323  
000012E8                           324  *------------------------------------------------------------------------------------*
000012E8                           325          ;clear the 32 bits within the decoded_buffer       
000012E8                           326  OP_CLEAR_DATA
000012E8  4283                     327          CLR.L   D3
000012EA  163C 0040                328          MOVE.B  #buffer_size, D3
000012EE  45F9 00000040            329          LEA     decoded_buffer, A2
000012F4                           330  OP_CLEAR_DATA_LOOP
000012F4  14FC 0000                331          MOVE.B  #0, (A2)+
000012F8  5343                     332          SUBI    #1, D3
000012FA  6EF8                     333          BGT     OP_CLEAR_DATA_LOOP
000012FC  4E75                     334          RTS
000012FE                           335  
000012FE                           336  *------------------------------------------------------------------------------------*
000012FE                           337  
000012FE                           338  OP_TABLE
000012FE  4EF9 0000135E            339          JMP     code0000    ; ADDI.bwl/ ANDI.bwl / CMPI.bwl / EORI.bwl / ORI.bwl / SUBI.bwl 
00001304  4EF9 00001378            340          JMP     code0001    ; MOVE.b
0000130A  4EF9 0000137C            341          JMP     code0010    ; MOVE.l / MOVEA.l
00001310  4EF9 00001394            342          JMP     code0011    ; MOVE.w / MOVEA.w
00001316  4EF9 000013AC            343          JMP     code0100    ; CLR.bwl / JMP / JSR / LEA / MOVEM.wl / NOP / NOT.bwl / RTS / STOP / TRAP
0000131C  4EF9 000013C6            344          JMP     code0101    ; ADDQ.bwl / SUBQ.bwl / Scc / Dbcc
00001322  4EF9 000013CA            345          JMP     code0110    ; BRA.bw / BSR.bw / Bcc.bw
00001328  4EF9 000013E2            346          JMP     code0111    ; MOVEQ
0000132E  4EF9 000013E6            347          JMP     code1000    ; DIVS / DIVU / CR.bwl
00001334  4EF9 000013FE            348          JMP     code1001    ; SUB.bwl / SUBA.wl
0000133A  4EF9 00001402            349          JMP     code1010    ;   [unassigned]
00001340  4EF9 00001406            350          JMP     code1011    ; CMP.bwl / CMPA.wl / EOR.bwl
00001346  4EF9 0000140A            351          JMP     code1100    ; MULS / MULU / AND.bwl
0000134C  4EF9 0000140A            352          JMP     code1101    ; ADD.bwl / ADDA.wl / ADDX.bwl
00001352  4EF9 0000140A            353          JMP     code1110    ; ASL.bwl / ASR.bwl / LSL.bwl / LSR.bwl / ROR.bwl / ROL.bwl
00001358  4EF9 0000140A            354          JMP     code1111    ;   [unassigned]
0000135E                           355          
0000135E                           356  code0000:                       ; Opcodes ADDI and SUBI
0000135E  220D                     357      MOVE.L  A5,D1               ; A5 is current instruction word
00001360  0241 0F00                358      ANDI.W  #second_nibble,D1   ; Extract 2nd nibble from instruction word
00001364  143C 0008                359      MOVE.B  #right8,D2          ; Used to shift 8 times to right
00001368  E469                     360      LSR.W   D2,D1               ; Shift nibble into LSB position
0000136A  C2FC 0006                361      MULU    #6, D1              ; Set displacement 
0000136E  41F9 0000140E            362      LEA     OP_0000_TABLE,A0    ; Load table into A0
00001374  4EF0 1000                363      JMP     0(A0,D1)            ; go to displacement (A0 + xxxx * 6)
00001378                           364  
00001378                           365  code0001:                       ; Opcode MOVE.B
00001378  6000 01F2                366      BRA     OP_MOVE             ; Go to opcode MOVE
0000137C                           367  
0000137C                           368  code0010:                       ; Opcodes MOVE.L and MOVEA.L 
0000137C  220D                     369      MOVE.L  A5,D1               ; A5 is current instruction word
0000137E  0241 00C0                370      ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
00001382  143C 0006                371      MOVE.B  #right6,D2          ; Used to shift 6 times to right
00001386  E469                     372      LSR.W   D2,D1               ; Shift dst mode into LSB position
00001388  B23C 0001                373      CMP.B   #1, D1              ; When 001 in destination mode
0000138C  6700 01BA                374      BEQ     OP_MOVEA            ; Go to opcode MOVEA
00001390  6000 01DA                375      BRA     OP_MOVE             ; Otherwise, go to opcode MOVE
00001394                           376  
00001394                           377  code0011:                       ; Opcodes MOVE.W and MOVEA.W 
00001394  220D                     378      MOVE.L  A5,D1               ; A5 is current instruction word
00001396  0241 00C0                379      ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
0000139A  143C 0006                380      MOVE.B  #right6,D2          ; Used to shift 6 times to right
0000139E  E469                     381      LSR.W   D2,D1               ; Shift dst mode into LSB position
000013A0  B23C 0001                382      CMP.B   #1, D1              ; When 001 in destination mode
000013A4  6700 01A2                383      BEQ     OP_MOVEA            ; Go to opcode MOVEA
000013A8  6000 01C2                384      BRA     OP_MOVE             ; Otherwise, go to opcode MOVE
000013AC                           385  
000013AC                           386  code0100:                       ; Opcodes CLR, JSR, LEA, MOVEM, NOP, RTS
000013AC  220D                     387      MOVE.L  A5,D1               ; A5 is current instruction word
000013AE  0241 0F00                388      ANDI.W  #second_nibble,D1   ; Extract 2nd nibble from instruction word
000013B2  143C 0008                389      MOVE.B  #right8,D2          ; Used to shift 8 times to right
000013B6  E469                     390      LSR.W   D2,D1               ; Shift nibble into LSB position
000013B8  C2FC 0006                391      MULU    #6, D1              ; Set displacement 
000013BC  41F9 0000146E            392      LEA     OP_0100_TABLE,A0    ; Load table into A0
000013C2  4EF0 1000                393      JMP     0(A0,D1)            ; go to displacement (A0 + xxxx * 6)
000013C6                           394  
000013C6                           395  code0101:                       ; Opcode ADDQ.B/W/L
000013C6  6000 0274                396      BRA     OP_ADDQ             ; Go to opcode ADDQ
000013CA                           397  
000013CA                           398  code0110:                       ; Opcodes BRA and BSR
000013CA  220D                     399      MOVE.L  A5,D1               ; A5 is current instruction word
000013CC  0241 0F00                400      ANDI.W  #second_nibble,D1   ; Extract 2nd 4 bits from instruction word
000013D0  143C 0008                401      MOVE.B  #right8,D2          ; Used to shift 8 times to right
000013D4  E469                     402      LSR.W   D2,D1               ; Shift nibble into LSB position
000013D6  B23C 0000                403      CMP.B   #0, D1              ; When 0000 in destination mode
000013DA  6700 0280                404      BEQ     OP_BRA              ; Go to opcode BRA
000013DE  6000 02EC                405      BRA     OP_BSR              ; Otherwise, go to opcode BSR
000013E2                           406  
000013E2                           407  code0111:                       ; Opcode MOVEQ
000013E2  6000 0304                408      BRA     OP_MOVEQ            ; Go to opcode MOVEQ
000013E6                           409  
000013E6                           410  code1000:                       ; Opcodes DIVU word and OR.B/W/L
000013E6  220D                     411      MOVE.L  A5,D1               ; A5 is current instruction word
000013E8  0241 00C0                412      ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000013EC  143C 0006                413      MOVE.B  #right6,D2          ; Used to shift 6 times to right
000013F0  E469                     414      LSR.W   D2,D1               ; Shift dst mode into LSB position
000013F2  B23C 0003                415      CMP.B   #3, D1              ; When 011 in destination mode
000013F6  6700 0318                416      BEQ     OP_DIVU             ; Go to opcode DIVU word
000013FA  6000 0334                417      BRA     OP_OR               ; Otherwise, go to opcode OR
000013FE                           418  
000013FE                           419  code1001:                       ; Opcode SUB.B/W/L
000013FE  6000 0348                420      BRA     OP_SUB              ; Go to opcode SUB   
00001402                           421  
00001402                           422  code1010:                       ; Opcode not supported 
00001402  6000 00F8                423      BRA     OP_UNSUPPORTED      ; Go to opcode unsupported   
00001406                           424       
00001406                           425  code1011:                       ; Opcode CMP.B/W/L
00001406  6000 035C                426      BRA     OP_CMP              ; Go to opcode CMP
0000140A                           427  
0000140A                           428  code1100:                       ; Opcodes MULS, MULU, AND.B/W/L
0000140A                           429  
0000140A                           430  code1101:                       ; Opcodes ADD.B/W/L, ADDA.B/W/L
0000140A                           431  
0000140A                           432  code1110:                       ; Opcodes ASL.B/W/L, ASR.B/W/L, LSL.B/W/L, LSR.B/W/L, ROL.B/W/L, ROR.B/W/L                       
0000140A                           433  
0000140A                           434  code1111:                       ; Opcode not supported 
0000140A  6000 00F0                435      BRA     OP_UNSUPPORTED      ; Go to opcode unsupported   
0000140E                           436           
0000140E                           437  OP_0000_TABLE:
0000140E  4EF9 000014FC            438      JMP     OP_UNSUPPORTED  ; 0 Go to opcode unsupported  
00001414  4EF9 000014FC            439      JMP     OP_UNSUPPORTED  ; 1 Go to opcode unsupported  
0000141A  4EF9 000014FC            440      JMP     OP_UNSUPPORTED  ; 2 Go to opcode unsupported  
00001420  4EF9 000014FC            441      JMP     OP_UNSUPPORTED  ; 3 Go to opcode unsupported  
00001426  4EF9 00001508            442      JMP     OP_SUBI         ; 4 Go to opcode SUBI
0000142C  4EF9 000014FC            443      JMP     OP_UNSUPPORTED  ; 5 Go to opcode unsupported  
00001432  4EF9 00001528            444      JMP     OP_ADDI         ; 6 Go to opcode ADDI
00001438  4EF9 000014FC            445      JMP     OP_UNSUPPORTED  ; 7 Go to opcode unsupported  
0000143E  4EF9 000014FC            446      JMP     OP_UNSUPPORTED  ; 8 Go to opcode unsupported  
00001444  4EF9 000014FC            447      JMP     OP_UNSUPPORTED  ; 9 Go to opcode unsupported  
0000144A  4EF9 000014FC            448      JMP     OP_UNSUPPORTED  ; A Go to opcode unsupported  
00001450  4EF9 000014FC            449      JMP     OP_UNSUPPORTED  ; B Go to opcode unsupported  
00001456  4EF9 000014FC            450      JMP     OP_UNSUPPORTED  ; C Go to opcode unsupported  
0000145C  4EF9 000014FC            451      JMP     OP_UNSUPPORTED  ; D Go to opcode unsupported  
00001462  4EF9 000014FC            452      JMP     OP_UNSUPPORTED  ; E Go to opcode unsupported  
00001468  4EF9 000014FC            453      JMP     OP_UNSUPPORTED  ; F Go to opcode unsupported  
0000146E                           454      
0000146E                           455   OP_0100_TABLE:
0000146E  4EF9 000014FC            456      JMP     OP_UNSUPPORTED      ; 0 Go to opcode unsupported  
00001474  4EF9 00001620            457      JMP     OP_LEA              ; 1 Go to opcode LEA
0000147A  4EF9 0000158C            458      JMP     OP_CLR              ; 2 Go to opcode CLR
00001480  4EF9 00001620            459      JMP     OP_LEA              ; 3 Go to opcode LEA
00001486  4EF9 000014FC            460      JMP     OP_UNSUPPORTED      ; 4 Go to opcode unsupported  
0000148C  4EF9 00001620            461      JMP     OP_LEA              ; 5 Go to opcode LEA
00001492  4EF9 00001528            462      JMP     OP_ADDI             ; 6 Go to opcode ADDI
00001498  4EF9 00001620            463      JMP     OP_LEA              ; 7 Go to opcode LEA
0000149E  4EF9 000015FC            464      JMP     OP_MOVEM            ; 8 Go to opcode MOVEM
000014A4  4EF9 00001620            465      JMP     OP_LEA              ; 9 Go to opcode LEA
000014AA  4EF9 000014FC            466      JMP     OP_UNSUPPORTED      ; A Go to opcode unsupported  
000014B0  4EF9 00001620            467      JMP     OP_LEA              ; B Go to opcode LEA
000014B6  4EF9 000015FC            468      JMP     OP_MOVEM            ; C Go to opcode MOVEM
000014BC  4EF9 00001620            469      JMP     OP_LEA              ; D Go to opcode LEA
000014C2  4EF9 000014CE            470      JMP     JSR_NOP_RTS         ; E Go to opcode JSR, NOP, or RTS
000014C8  4EF9 000014FC            471      JMP     OP_UNSUPPORTED      ; F Go to opcode unsupported  
000014CE                           472  
000014CE                           473  JSR_NOP_RTS:
000014CE  220D                     474      MOVE.L  A5,D1               ; A5 is current instruction word
000014D0  0241 00C0                475      ANDI.W  #dst_mode,D1        ; Extract dst mode position from instruction word
000014D4  143C 0006                476      MOVE.B  #right6,D2          ; Used to shift 6 times to right
000014D8  E469                     477      LSR.W   D2,D1               ; Shift dst mode into LSB position
000014DA  B23C 0002                478      CMP.B   #2, D1              ; When 010 in destination mode
000014DE  6700 0100                479      BEQ     OP_JSR              ; Go to opcode JSR
000014E2  220D                     480      MOVE.L  A5,D1               ; A5 is current instruction word
000014E4  0241 0007                481      ANDI.W  #src_reg ,D1        ; Extract src reg position from instruction word
000014E8  B23C 0001                482      CMP.B   #1, D1              ; When 001 in src register
000014EC  6700 00BA                483      BEQ     OP_NOP              ; Go to opcode NOP
000014F0  B23C 0005                484      CMP.B   #5, D1              ; When 005 in src register
000014F4  6700 00CE                485      BEQ     OP_RTS              ; Go to opcode RTS
000014F8  6000 0002                486      BRA     OP_UNSUPPORTED      ; Otherwise, go to opcode unsupported 
000014FC                           487  
000014FC                           488  OP_UNSUPPORTED
000014FC  43F9 00001C3B            489      LEA     ERROR_MESSAGE, A1 
00001502  103C 000E                490      MOVE.B  #14, D0
00001506  4E4F                     491      TRAP    #15
00001508                           492          
00001508                           493  *----------------------------------------------------------------------------------------------*
00001508                           494  * param D0 the current instruction in word
00001508                           495  * param D1 the EA type
00001508                           496  * param A2 a pointer to the decode_buffer
00001508                           497  * param A5 current address
00001508                           498  * ea_start(D0, D1, A2, A5){
00001508                           499  * D2: size
00001508                           500  * D3: src moe, dst mode
00001508                           501  * D4: src regs, dst regs
00001508                           502  * D5: #shifts
00001508                           503  * D7: immediate data
00001508                           504  * A0: EA_TYPE_TABLE
00001508                           505  *       0 = ea_immediate
00001508                           506  * }
00001508                           507  
00001508                           508  *----------------------------------------------------------------------------------------------*
00001508                           509  * First 4 bits: 0000
00001508                           510  
00001508                           511  OP_SUBI
00001508  14FC 0053                512          MOVE.B  #'S', (A2)+
0000150C  14FC 0055                513          MOVE.B  #'U', (A2)+
00001510  14FC 0042                514          MOVE.B  #'B', (A2)+
00001514  14FC 0049                515          MOVE.B  #'I', (A2)+
00001518  223C 00000000            516          MOVE.L  #ea_type_immediate, D1
0000151E  4EB9 000018C0            517          JSR     EA_START
00001524  4EF8 12E2                518          JMP     OP_FINISH
00001528                           519          
00001528                           520  OP_ADDI
00001528  14FC 0041                521          MOVE.B  #'A', (A2)+
0000152C  14FC 0044                522          MOVE.B  #'D', (A2)+
00001530  14FC 0044                523          MOVE.B  #'D', (A2)+
00001534  14FC 0049                524          MOVE.B  #'I', (A2)+
00001538  223C 00000000            525          MOVE.L  #ea_type_immediate, D1
0000153E  4EB9 000018C0            526          JSR     EA_START
00001544  4EF8 12E2                527          JMP     OP_FINISH
00001548                           528  
00001548                           529  *-----------------------------------------------------------------------------------------------*
00001548                           530  * First 4 bits: 0001
00001548                           531  OP_MOVEA
00001548  14FC 004D                532          MOVE.B  #'M', (A2)+
0000154C  14FC 004F                533          MOVE.B  #'O', (A2)+
00001550  14FC 0056                534          MOVE.B  #'V', (A2)+
00001554  14FC 0041                535          MOVE.B  #'A', (A2)+
00001558  14FC 0041                536          MOVE.B  #'A', (A2)+
0000155C  223C 00000000            537          MOVE.L  #ea_type_immediate, D1
00001562  4EB9 000018C0            538          JSR     EA_START
00001568  4EF8 12E2                539          JMP     OP_FINISH
0000156C                           540  
0000156C                           541  *------------------------------------------------------------------------------------------------*
0000156C                           542  * First 4 bits: 0011
0000156C                           543  OP_MOVE
0000156C  14FC 004D                544          MOVE.B  #'M', (A2)+
00001570  14FC 004F                545          MOVE.B  #'O', (A2)+
00001574  14FC 0056                546          MOVE.B  #'V', (A2)+
00001578  14FC 0045                547          MOVE.B  #'E', (A2)+
0000157C  223C 00000000            548          MOVE.L  #ea_type_immediate, D1
00001582  4EB9 000018C0            549          JSR     EA_START
00001588  4EF8 12E2                550          JMP     OP_FINISH
0000158C                           551  
0000158C                           552  *------------------------------------------------------------------------------------------------*
0000158C                           553  * First 4 bits: 0100
0000158C                           554  OP_CLR
0000158C  14FC 0043                555          MOVE.B  #'C', (A2)+
00001590  14FC 004C                556          MOVE.B  #'L', (A2)+
00001594  14FC 0052                557          MOVE.B  #'R', (A2)+
00001598  223C 00000000            558          MOVE.L  #ea_type_immediate, D1
0000159E  4EB9 000018C0            559          JSR     EA_START
000015A4  4EF8 12E2                560          JMP     OP_FINISH
000015A8                           561          
000015A8                           562  OP_NOP
000015A8  14FC 004E                563          MOVE.B  #'N', (A2)+
000015AC  14FC 004F                564          MOVE.B  #'O', (A2)+
000015B0  14FC 0050                565          MOVE.B  #'P', (A2)+
000015B4  223C 00000000            566          MOVE.L  #ea_type_immediate, D1
000015BA  4EB9 000018C0            567          JSR     EA_START
000015C0  4EF8 12E2                568          JMP     OP_FINISH
000015C4                           569          
000015C4                           570  OP_RTS
000015C4  14FC 0052                571          MOVE.B  #'R', (A2)+
000015C8  14FC 0054                572          MOVE.B  #'T', (A2)+
000015CC  14FC 0053                573          MOVE.B  #'S', (A2)+
000015D0  223C 00000000            574          MOVE.L  #ea_type_immediate, D1
000015D6  4EB9 000018C0            575          JSR     EA_START
000015DC  4EF8 12E2                576          JMP     OP_FINISH
000015E0                           577          
000015E0                           578  OP_JSR
000015E0  14FC 004A                579          MOVE.B  #'J', (A2)+
000015E4  14FC 0053                580          MOVE.B  #'S', (A2)+
000015E8  14FC 0052                581          MOVE.B  #'R', (A2)+
000015EC  223C 00000000            582          MOVE.L  #ea_type_immediate, D1
000015F2  4EB9 000018C0            583          JSR     EA_START
000015F8  4EF8 12E2                584          JMP     OP_FINISH
000015FC                           585  
000015FC                           586  OP_MOVEM
000015FC  14FC 004D                587          MOVE.B  #'M', (A2)+
00001600  14FC 004F                588          MOVE.B  #'O', (A2)+
00001604  14FC 0056                589          MOVE.B  #'V', (A2)+
00001608  14FC 0045                590          MOVE.B  #'E', (A2)+
0000160C  14FC 004D                591          MOVE.B  #'M', (A2)+
00001610  223C 00000000            592          MOVE.L  #ea_type_immediate, D1
00001616  4EB9 000018C0            593          JSR     EA_START
0000161C  4EF8 12E2                594          JMP     OP_FINISH
00001620                           595          
00001620                           596  OP_LEA
00001620  14FC 004C                597          MOVE.B  #'L', (A2)+
00001624  14FC 0045                598          MOVE.B  #'E', (A2)+
00001628  14FC 0041                599          MOVE.B  #'A', (A2)+
0000162C  223C 00000000            600          MOVE.L  #ea_type_immediate, D1
00001632  4EB9 000018C0            601          JSR     EA_START
00001638  4EF8 12E2                602          JMP     OP_FINISH
0000163C                           603  
0000163C                           604  *------------------------------------------------------------------------------------------------*
0000163C                           605  * First 4 bits: 0101
0000163C                           606  OP_ADDQ
0000163C  14FC 0041                607          MOVE.B  #'A', (A2)+
00001640  14FC 0044                608          MOVE.B  #'D', (A2)+
00001644  14FC 0044                609          MOVE.B  #'D', (A2)+
00001648  14FC 0051                610          MOVE.B  #'Q', (A2)+
0000164C  223C 00000000            611          MOVE.L  #ea_type_immediate, D1
00001652  4EB9 000018C0            612          JSR     EA_START
00001658  4EF8 12E2                613          JMP     OP_FINISH
0000165C                           614          
0000165C                           615  *------------------------------------------------------------------------------------------------*
0000165C                           616  * First 4 bits: 0110
0000165C                           617  OP_BRA
0000165C  14FC 0042                618          MOVE.B  #'B', (A2)+
00001660  14FC 0052                619          MOVE.B  #'R', (A2)+
00001664  14FC 0041                620          MOVE.B  #'A', (A2)+
00001668  223C 00000000            621          MOVE.L  #ea_type_immediate, D1
0000166E  4EB9 000018C0            622          JSR     EA_START
00001674  4EF8 12E2                623          JMP     OP_FINISH
00001678                           624  
00001678                           625  OP_BCC
00001678  14FC 0042                626          MOVE.B  #'B', (A2)+
0000167C  14FC 0043                627          MOVE.B  #'C', (A2)+
00001680  14FC 0043                628          MOVE.B  #'C', (A2)+
00001684  223C 00000000            629          MOVE.L  #ea_type_immediate, D1
0000168A  4EB9 000018C0            630          JSR     EA_START
00001690  4EF8 12E2                631          JMP     OP_FINISH
00001694                           632          
00001694                           633  OP_BGT
00001694  14FC 0042                634          MOVE.B  #'B', (A2)+
00001698  14FC 0047                635          MOVE.B  #'G', (A2)+
0000169C  14FC 0054                636          MOVE.B  #'T', (A2)+
000016A0  223C 00000000            637          MOVE.L  #ea_type_immediate, D1
000016A6  4EB9 000018C0            638          JSR     EA_START
000016AC  4EF8 12E2                639          JMP     OP_FINISH
000016B0                           640  
000016B0                           641  OP_BLE
000016B0  14FC 0042                642          MOVE.B  #'B', (A2)+
000016B4  14FC 004C                643          MOVE.B  #'L', (A2)+
000016B8  14FC 0045                644          MOVE.B  #'E', (A2)+
000016BC  223C 00000000            645          MOVE.L  #ea_type_immediate, D1
000016C2  4EB9 000018C0            646          JSR     EA_START
000016C8  4EF8 12E2                647          JMP     OP_FINISH
000016CC                           648          
000016CC                           649  OP_BSR
000016CC  14FC 0042                650          MOVE.B  #'B', (A2)+
000016D0  14FC 0053                651          MOVE.B  #'S', (A2)+
000016D4  14FC 0052                652          MOVE.B  #'R', (A2)+
000016D8  223C 00000000            653          MOVE.L  #ea_type_immediate, D1
000016DE  4EB9 000018C0            654          JSR     EA_START
000016E4  4EF8 12E2                655          JMP     OP_FINISH
000016E8                           656  *------------------------------------------------------------------------------------------------*
000016E8                           657  * First 4 bits: 0111
000016E8                           658  OP_MOVEQ
000016E8  14FC 004D                659          MOVE.B  #'M', (A2)+
000016EC  14FC 004F                660          MOVE.B  #'O', (A2)+
000016F0  14FC 0056                661          MOVE.B  #'V', (A2)+
000016F4  14FC 0056                662          MOVE.B  #'V', (A2)+
000016F8  14FC 0045                663          MOVE.B  #'E', (A2)+
000016FC  14FC 0051                664          MOVE.B  #'Q', (A2)+
00001700  223C 00000000            665          MOVE.L  #ea_type_immediate, D1
00001706  4EB9 000018C0            666          JSR     EA_START
0000170C  4EF8 12E2                667          JMP     OP_FINISH
00001710                           668          
00001710                           669  *------------------------------------------------------------------------------------------------*
00001710                           670  * First 4 bits: 1000
00001710                           671  OP_DIVU
00001710  14FC 0044                672          MOVE.B  #'D', (A2)+
00001714  14FC 0049                673          MOVE.B  #'I', (A2)+
00001718  14FC 0056                674          MOVE.B  #'V', (A2)+
0000171C  14FC 0055                675          MOVE.B  #'U', (A2)+
00001720  223C 00000000            676          MOVE.L  #ea_type_immediate, D1
00001726  4EB9 000018C0            677          JSR     EA_START
0000172C  4EF8 12E2                678          JMP     OP_FINISH
00001730                           679    
00001730                           680  OP_OR
00001730  14FC 004F                681          MOVE.B  #'O', (A2)+
00001734  14FC 0052                682          MOVE.B  #'R', (A2)+
00001738  223C 00000000            683          MOVE.L  #ea_type_immediate, D1
0000173E  4EB9 000018C0            684          JSR     EA_START
00001744  4EF8 12E2                685          JMP     OP_FINISH
00001748                           686  
00001748                           687  *------------------------------------------------------------------------------------------------*
00001748                           688  * First 4 bits: 1001
00001748                           689  OP_SUB
00001748  14FC 0053                690          MOVE.B  #'S', (A2)+
0000174C  14FC 0055                691          MOVE.B  #'U', (A2)+
00001750  14FC 0042                692          MOVE.B  #'B', (A2)+
00001754  223C 00000000            693          MOVE.L  #ea_type_immediate, D1
0000175A  4EB9 000018C0            694          JSR     EA_START
00001760  4EF8 12E2                695          JMP     OP_FINISH
00001764                           696          
00001764                           697  *------------------------------------------------------------------------------------------------*
00001764                           698  * First 4 bits: 1011
00001764                           699  OP_CMP
00001764  14FC 0043                700          MOVE.B  #'C', (A2)+
00001768  14FC 004D                701          MOVE.B  #'M', (A2)+
0000176C  14FC 0050                702          MOVE.B  #'P', (A2)+
00001770  223C 00000000            703          MOVE.L  #ea_type_immediate, D1
00001776  4EB9 000018C0            704          JSR     EA_START
0000177C  4EF8 12E2                705          JMP     OP_FINISH
00001780                           706          
00001780                           707  *------------------------------------------------------------------------------------------------*
00001780                           708  * First 4 bits: 1100
00001780                           709  OP_MULU
00001780  14FC 004D                710          MOVE.B  #'M', (A2)+
00001784  14FC 0055                711          MOVE.B  #'U', (A2)+
00001788  14FC 004C                712          MOVE.B  #'L', (A2)+
0000178C  14FC 0055                713          MOVE.B  #'U', (A2)+
00001790  223C 00000000            714          MOVE.L  #ea_type_immediate, D1
00001796  4EB9 000018C0            715          JSR     EA_START
0000179C  4EF8 12E2                716          JMP     OP_FINISH
000017A0                           717          
000017A0                           718  OP_MULS
000017A0  14FC 004D                719          MOVE.B  #'M', (A2)+
000017A4  14FC 0055                720          MOVE.B  #'U', (A2)+
000017A8  14FC 004C                721          MOVE.B  #'L', (A2)+
000017AC  14FC 0053                722          MOVE.B  #'S', (A2)+
000017B0  223C 00000000            723          MOVE.L  #ea_type_immediate, D1
000017B6  4EB9 000018C0            724          JSR     EA_START
000017BC  4EF8 12E2                725          JMP     OP_FINISH
000017C0                           726          
000017C0                           727  OP_AND
000017C0  14FC 0041                728          MOVE.B  #'A', (A2)+
000017C4  14FC 004E                729          MOVE.B  #'N', (A2)+
000017C8  14FC 0044                730          MOVE.B  #'D', (A2)+
000017CC  223C 00000000            731          MOVE.L  #ea_type_immediate, D1
000017D2  4EB9 000018C0            732          JSR     EA_START
000017D8  4EF8 12E2                733          JMP     OP_FINISH
000017DC                           734          
000017DC                           735  *------------------------------------------------------------------------------------------------*
000017DC                           736  * First 4 bits: 1101
000017DC                           737  OP_ADD
000017DC  14FC 0041                738          MOVE.B  #'A', (A2)+
000017E0  14FC 0044                739          MOVE.B  #'D', (A2)+
000017E4  14FC 0044                740          MOVE.B  #'D', (A2)+
000017E8  223C 00000000            741          MOVE.L  #ea_type_immediate, D1
000017EE  4EB9 000018C0            742          JSR     EA_START
000017F4  4EF8 12E2                743          JMP     OP_FINISH
000017F8                           744  
000017F8                           745  OP_ADDA
000017F8  14FC 0041                746          MOVE.B  #'A', (A2)+
000017FC  14FC 0044                747          MOVE.B  #'D', (A2)+
00001800  14FC 0044                748          MOVE.B  #'D', (A2)+
00001804  14FC 0041                749          MOVE.B  #'A', (A2)+
00001808  223C 00000000            750          MOVE.L  #ea_type_immediate, D1
0000180E  4EB9 000018C0            751          JSR     EA_START
00001814  4EF8 12E2                752          JMP     OP_FINISH
00001818                           753          
00001818                           754  *------------------------------------------------------------------------------------------------*
00001818                           755  * First 4 bits: 1110
00001818                           756  OP_ASR
00001818  14FC 0041                757          MOVE.B  #'A', (A2)+
0000181C  14FC 0053                758          MOVE.B  #'S', (A2)+
00001820  14FC 0052                759          MOVE.B  #'R', (A2)+
00001824  223C 00000000            760          MOVE.L  #ea_type_immediate, D1
0000182A  4EB9 000018C0            761          JSR     EA_START
00001830  4EF8 12E2                762          JMP     OP_FINISH
00001834                           763  OP_ASL
00001834  14FC 0041                764          MOVE.B  #'A', (A2)+
00001838  14FC 0053                765          MOVE.B  #'S', (A2)+
0000183C  14FC 004C                766          MOVE.B  #'L', (A2)+
00001840  223C 00000000            767          MOVE.L  #ea_type_immediate, D1
00001846  4EB9 000018C0            768          JSR     EA_START
0000184C  4EF8 12E2                769          JMP     OP_FINISH
00001850                           770          
00001850                           771  OP_LSR
00001850  14FC 004C                772          MOVE.B  #'L', (A2)+
00001854  14FC 0053                773          MOVE.B  #'S', (A2)+
00001858  14FC 0052                774          MOVE.B  #'R', (A2)+
0000185C  223C 00000000            775          MOVE.L  #ea_type_immediate, D1
00001862  4EB9 000018C0            776          JSR     EA_START
00001868  4EF8 12E2                777          JMP     OP_FINISH
0000186C                           778         
0000186C                           779  OP_LSL
0000186C  14FC 004C                780          MOVE.B  #'L', (A2)+
00001870  14FC 0053                781          MOVE.B  #'S', (A2)+
00001874  14FC 004C                782          MOVE.B  #'L', (A2)+
00001878  223C 00000000            783          MOVE.L  #ea_type_immediate, D1
0000187E  4EB9 000018C0            784          JSR     EA_START
00001884  4EF8 12E2                785          JMP     OP_FINISH
00001888                           786          
00001888                           787  OP_ROR
00001888  14FC 0052                788          MOVE.B  #'R', (A2)+
0000188C  14FC 004F                789          MOVE.B  #'O', (A2)+
00001890  14FC 0052                790          MOVE.B  #'R', (A2)+
00001894  223C 00000000            791          MOVE.L  #ea_type_immediate, D1
0000189A  4EB9 000018C0            792          JSR     EA_START
000018A0  4EF8 12E2                793          JMP     OP_FINISH
000018A4                           794          
000018A4                           795  OP_ROL
000018A4  14FC 0052                796          MOVE.B  #'R', (A2)+
000018A8  14FC 004F                797          MOVE.B  #'O', (A2)+
000018AC  14FC 004C                798          MOVE.B  #'L', (A2)+
000018B0  223C 00000000            799          MOVE.L  #ea_type_immediate, D1
000018B6  4EB9 000018C0            800          JSR     EA_START
000018BC  4EF8 12E2                801          JMP     OP_FINISH
000018C0                           802          
000018C0                           803  *-----------------------------------------------------------------------*
000018C0                           804          
000018C0                           805  EA_START
000018C0  48E7 38C0                806          MOVEM.L D2-D4/A0-A1, -(SP)
000018C4                           807          
000018C4  41F9 000018D8            808          LEA     EA_TYPE_TABLE, A0
000018CA  C2FC 0006                809          MULU    #6, D1
000018CE  4EF0 1000                810          JMP     0(A0, D1)
000018D2                           811          
000018D2                           812  EA_FINISH
000018D2  4CDF 031C                813          MOVEM.L (SP)+, D2-D4/A0-A1
000018D6  4E75                     814          RTS
000018D8                           815          
000018D8                           816  EA_TYPE_TABLE
000018D8  4EF9 00001956            817          JMP     EA_IMMEDIATE    ; 0: ea_immediate
000018DE  4EF9 00001968            818          JMP     EA_MOVE         ; 1: ea_move
000018E4  4EF9 00001968            819          JMP     EA_MOVEA        ; 2: ea_movea
000018EA  4EF9 00001968            820          JMP     EA_LEA          ; 3: ea_lea
000018F0  4EF9 00001968            821          JMP     EA_DSTONLY      ; 4: ea_dstonly
000018F6  4EF9 00001968            822          JMP     EA_EXT          ; 5: ea_ext
000018FC  4EF9 00001968            823          JMP     EA_MOVEM        ; 6: ea_movem
00001902  4EF9 00001968            824          JMP     EA_TRAP         ; 7: ea_trap
00001908  4EF9 00001968            825          JMP     EA_QUICK        ; 8: ea_quick
0000190E  4EF9 00001968            826          JMP     EA_branch       ; 9: ea_branch
00001914  4EF8 18D2                827          JMP     EA_FINISH
00001918                           828          
00001918                           829  EA_SIZE
00001918  B43C 0000                830          CMP.B   #%00, D2        ; .b
0000191C  6700 0018                831          BEQ     EA_SIZE_B       
00001920  B43C 0001                832          CMP.B   #%01, D2        ; .w
00001924  6700 001A                833          BEQ     EA_SIZE_W       
00001928  B43C 0002                834          CMP.B   #%10, D2        ; .l
0000192C  6700 001C                835          BEQ     EA_SIZE_L
00001930  4EF9 0000196D            836          JMP     EA_WRONGSIZE    ; wrong size
00001936                           837  EA_SIZE_B
00001936  14FC 002E                838          MOVE.B  #'.', (A2)+
0000193A  14FC 0042                839          MOVE.B  #'B', (A2)+
0000193E  4E75                     840          RTS
00001940                           841  EA_SIZE_W
00001940  14FC 002E                842          MOVE.B  #'.', (A2)+
00001944  14FC 0057                843          MOVE.B  #'W', (A2)+
00001948  4E75                     844          RTS
0000194A                           845  EA_SIZE_L
0000194A  14FC 002E                846          MOVE.B  #'.', (A2)+
0000194E  14FC 004C                847          MOVE.B  #'L', (A2)+
00001952  4E75                     848          RTS
00001954                           849  EA_SIZE_DONE
00001954  4E75                     850          RTS
00001956                           851          
00001956                           852  EA_IMMEDIATE
00001956  220D                     853          MOVE.L  A5, D1
00001958  0241 00C0                854          ANDI.W  #dst_mode, D1
0000195C  143C 0006                855          MOVE.B  #right6, D2
00001960  E469                     856          LSR.W   D2, D1
00001962  5601                     857          ADDI.B  #3, D1
00001964  1401                     858          MOVE.B  D1, D2
00001966  60B0                     859          BRA     EA_SIZE
00001968                           860          
00001968                           861  EA_MOVE         ; 1: ea_move
00001968                           862  EA_MOVEA        ; 2: ea_movea
00001968                           863  EA_LEA          ; 3: ea_lea
00001968                           864  EA_DSTONLY      ; 4: ea_dstonly
00001968                           865  EA_EXT          ; 5: ea_ext
00001968                           866  EA_MOVEM        ; 6: ea_movem
00001968                           867  EA_TRAP         ; 7: ea_trap
00001968                           868  EA_QUICK        ; 8: ea_quick
00001968                           869  EA_branch       ; 9: ea_branch
00001968                           870  
00001968                           871  
00001968                           872          
00001968                           873          
00001968  FFFF FFFF                874      SIMHALT             ; halt simulator
0000196C                           875  
0000196C                           876  * Put variables and constants here
0000196C                           877     
0000196C  =0000000D                878  CR              EQU         $0D
0000196C  =0000000A                879  LF              EQU         $0A
0000196C  =000A0000                880  stack           EQU         $000A0000
0000196C  =00000040                881  buffer_size     EQU         64 
0000196C  =00000040                882  decoded_buffer  EQU         64
0000196C  =00000014                883  lines_p_screen  EQU         20
0000196C  =00000004                884  right4          EQU         4
0000196C  =00000006                885  right6          EQU         6
0000196C  =00000008                886  right8          EQU         8
0000196C  =0000000C                887  right12         EQU         12
0000196C  =00000010                888  right16         EQU         16
0000196C  =00000018                889  right24         EQU         24
0000196C= 20                       890  ascii_y_n       DC.B        32
0000196D  =00000059                891  y_uppercase     EQU         $59         
0000196D  =00000079                892  y_lowercase     EQU         $79
0000196D  =0000004E                893  n_uppercase     EQU         $4E
0000196D  =0000006E                894  n_lowercase     EQU         $6E
0000196D  =00000002                895  task2           EQU         $02
0000196D  =00000005                896  task5           EQU         $05
0000196D  =00000009                897  task9           EQU         $09
0000196D  =0000000D                898  task13          EQU         $0D
0000196D  =0000000E                899  task14          EQU         $0E
0000196D  =0000F000                900  first_nibble    EQU         $F000
0000196D  =00000F00                901  second_nibble   EQU         $0F00   
0000196D  =000000F0                902  third_nibble    EQU         $00F0
0000196D  =0000000F                903  fourth_nibble   EQU         $000F
0000196D  =000000C0                904  dst_mode        EQU         $00C0
0000196D  =00000E00                905  dst_reg         EQU         $0E00
0000196D  =00000018                906  src_mode        EQU         $0018
0000196D  =00000007                907  src_reg         EQU         $0007
0000196D  =00000100                908  bit8            EQU         $0100
0000196D                           909  
0000196D  =00000000                910  ea_type_immediate   EQU     0       ; EA Type = immediate
0000196D  =00000001                911  ea_type_move        EQU     1       ; EA Type = move
0000196D  =00000002                912  ea_type_movea       EQU     2       ; EA Type = movea
0000196D  =0000000C                913  ea_type_movea6      EQU     12      ; EA Type = movea * 6
0000196D  =00000003                914  ea_type_lea         EQU     3       ; EA Type = lea
0000196D  =00000004                915  ea_type_dstonly     EQU     4       ; EA Type = clr, neg, not, jsr, jmp
0000196D  =00000005                916  ea_type_ext         EQU     5       ; EA Type = ext
0000196D  =00000006                917  ea_type_movem       EQU     6       ; EA Type = movem
0000196D  =00000007                918  ea_type_trap        EQU     7       ; EA Type = trap
0000196D  =00000008                919  ea_type_quick       EQU     8       ; EA Type = addq, subq
0000196D  =00000009                920  ea_type_branch      EQU     9       ; EA Type = bra, bsr, bcc
0000196D  =00000000                921  ea_bcc_flag         EQU     0       ; EA Type = branch, flag = bcc
0000196D  =00000001                922  ea_dbcc_flag        EQU     1       ; EA Type = branch, flag = dbcc
0000196D  =00000002                923  ea_scc_flag         EQU     2       ; EA Type = branch, flag = scc
0000196D                           924  EA_WRONGSIZE
0000196D                           925  
0000196D                           926  
0000196D                           927  
0000196D= 57 65 6C 63 6F 6D ...    928  WELCOME         DC.B        'Welcome to the 68k Disassembler of Avery and Alan',CR,LF,CR,LF,0
000019A3                           929  
000019A3= 50 6C 65 61 73 65 ...    930  USER_INST       DC.B        'Please follow the proper input instructions below: ',CR,LF
000019D8= 2D 20 53 74 61 72 ...    931                  DC.B        '- Starting address must be lower than ending address.',CR,LF
00001A0F= 2D 20 54 68 65 20 ...    932                  DC.B        '- The values for the starting and ending address must be an even value.',CR,LF
00001A58= 2D 20 53 74 61 72 ...    933                  DC.B        '- Starting and ending address must be inputted as hexadecimal value.',CR,LF
00001A9E= 2D 20 44 6F 20 6E ...    934                  DC.B        '- Do not put spaces in between input characters.',CR,LF
00001AD0= 2D 20 56 61 6C 69 ...    935                  DC.B        '- Valid characters include: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F',CR,LF,0
00001B1D                           936                  
00001B1D= 50 72 65 73 73 20 ...    937  ENTER_PROMPT    DC.B        'Press enter to continue...',CR,LF,0
00001B3A= 50 72 65 73 73 20 ...    938  PROMPT_AGAIN    DC.B        'Press Y to continue / N to exit.',CR,LF,0
00001B5D= 50 72 6F 67 72 61 ...    939  EXIT_PROMPT     DC.B        'Program has execution has stopped.',CR,LF,0
00001B82                           940        
00001B82= 45 6E 74 65 72 20 ...    941  START_IN        DC.B        'Enter a starting address: ',CR,LF,0 
00001B9F= 45 6E 74 65 72 20 ...    942  END_IN          DC.B        'Enter an ending address: ',CR,LF,0 
00001BBB                           943  START_ADDRESS   DS.B        64     
00001BFB                           944  END_ADDRESS     DS.B        64 
00001C3B= 45 72 72 6F 72 2C ...    945  ERROR_MESSAGE   DC.B        'Error, the input is Invalid.',CR,LF,0       
00001C5A                           946  
00001C5A                           947  
00001C5A                           948      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_TO_HEX_LETTER  1096
ASCII_Y_N           196C
ATOI                1070
BIT8                100
BUFFER_SIZE         40
CODE0000            135E
CODE0001            1378
CODE0010            137C
CODE0011            1394
CODE0100            13AC
CODE0101            13C6
CODE0110            13CA
CODE0111            13E2
CODE1000            13E6
CODE1001            13FE
CODE1010            1402
CODE1011            1406
CODE1100            140A
CODE1101            140A
CODE1110            140A
CODE1111            140A
COMPLETE_ENDA       10E8
COMPLETE_STARTA     10E0
CONTINUE_OR_END     1252
CR                  D
DECODED_BUFFER      40
DECODE_MEMORY       12A4
DECODE_PAUSE        123E
DECODING_ITERATION  1218
DISP_UI             101E
DISP_W              1012
DST_MODE            C0
DST_REG             E00
EA_BCC_FLAG         0
EA_BRANCH           1968
EA_DBCC_FLAG        1
EA_DSTONLY          1968
EA_EXT              1968
EA_FINISH           18D2
EA_IMMEDIATE        1956
EA_LEA              1968
EA_MOVE             1968
EA_MOVEA            1968
EA_MOVEM            1968
EA_QUICK            1968
EA_SCC_FLAG         2
EA_SIZE             1918
EA_SIZE_B           1936
EA_SIZE_DONE        1954
EA_SIZE_L           194A
EA_SIZE_W           1940
EA_START            18C0
EA_TRAP             1968
EA_TYPE_BRANCH      9
EA_TYPE_DSTONLY     4
EA_TYPE_EXT         5
EA_TYPE_IMMEDIATE   0
EA_TYPE_LEA         3
EA_TYPE_MOVE        1
EA_TYPE_MOVEA       2
EA_TYPE_MOVEA6      C
EA_TYPE_MOVEM       6
EA_TYPE_QUICK       8
EA_TYPE_TABLE       18D8
EA_TYPE_TRAP        7
EA_WRONGSIZE        196D
END_ADDRESS         1BFB
END_IN              1B9F
ENTER_PROMPT        1B1D
ERROR_MESSAGE       1C3B
EXIT                1292
EXIT_PROMPT         1B5D
FIRST_NIBBLE        F000
FOURTH_NIBBLE       F
INVALID             10B8
ITOA                10FC
ITOA_BYTE           1140
ITOA_BYTE_CONVERT   11D4
ITOA_CONVERT_A_TO_F  1204
ITOA_DONE           1210
ITOA_LONG           116A
ITOA_LONGADDRESS    119C
ITOA_MOVE           111E
ITOA_NIBBLE_CONVERT  11F4
ITOA_WORD           114E
JSR_NOP_RTS         14CE
LASTDIGITCHECK      10C6
LF                  A
LINES_P_SCREEN      14
N_LOWERCASE         6E
N_UPPERCASE         4E
ODD                 10F0
OP_0000_TABLE       140E
OP_0100_TABLE       146E
OP_ADD              17DC
OP_ADDA             17F8
OP_ADDI             1528
OP_ADDQ             163C
OP_AND              17C0
OP_ASL              1834
OP_ASR              1818
OP_BCC              1678
OP_BGT              1694
OP_BLE              16B0
OP_BRA              165C
OP_BSR              16CC
OP_CLEAR_DATA       12E8
OP_CLEAR_DATA_LOOP  12F4
OP_CLR              158C
OP_CMP              1764
OP_DIVU             1710
OP_FINISH           12E2
OP_JSR              15E0
OP_LEA              1620
OP_LSL              186C
OP_LSR              1850
OP_MOVE             156C
OP_MOVEA            1548
OP_MOVEM            15FC
OP_MOVEQ            16E8
OP_MULS             17A0
OP_MULU             1780
OP_NOP              15A8
OP_OR               1730
OP_ROL              18A4
OP_ROR              1888
OP_RTS              15C4
OP_SUB              1748
OP_SUBI             1508
OP_TABLE            12FE
OP_UNSUPPORTED      14FC
PROMPT_AGAIN        1B3A
PROMPT_END          1050
PROMPT_START        102A
READ_END            105C
READ_START          103C
RIGHT12             C
RIGHT16             10
RIGHT24             18
RIGHT4              4
RIGHT6              6
RIGHT8              8
SECOND_NIBBLE       F00
SRC_MODE            18
SRC_REG             7
STACK               A0000
START               1000
START_ADDRESS       1BBB
START_DECODING      1216
START_IN            1B82
TASK13              D
TASK14              E
TASK2               2
TASK5               5
TASK9               9
THIRD_NIBBLE        F0
USER_INST           19A3
VALIDATE_END        106C
VALIDATE_START      104C
WELCOME             196D
Y_LOWERCASE         79
Y_UPPERCASE         59
